[
  {
    "summary": "List all aliases currently set on your local computer.",
    "description": "Aliases are global, which means that you can use all the listed aliases in any Salesforce DX project on your computer.",
    "examples": [
      "List all the aliases you've set:\n<%= config.bin %> <%= command.id %>"
    ],
    "aliases": [
      "force:alias:list"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "alias:list",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "alias",
      "list.js"
    ],
    "args": {},
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "pluginAlias": "@salesforce/plugin-settings",
    "pluginName": "@salesforce/plugin-settings",
    "pluginType": "core",
    "strict": true,
    "aliasPermutations": [
      "force:alias:list",
      "alias:force:list",
      "alias:list:force",
      "force:list:alias",
      "list:force:alias",
      "list:alias:force"
    ],
    "permutations": [
      "alias:list",
      "list:alias"
    ]
  },
  {
    "summary": "Set one or more aliases on your local computer.",
    "description": "Aliases are user-defined short names that make it easier to use the CLI. For example, users often set an alias for a scratch org usernames because they're long and unintuitive. Check the --help of a CLI command to determine where you can use an alias.\n\nYou can associate an alias with only one value at a time. If you set an alias multiple times, the alias points to the most recent value. Aliases are global; after you set an alias, you can use it in any Salesforce DX project on your computer.\n\nUse quotes to specify an alias value that contains spaces. You typically use an equal sign to set your alias, although you don't need it if you're setting a single alias in a command.",
    "examples": [
      "Set an alias for a scratch org username:\n<%= config.bin %> <%= command.id %> my-scratch-org=test-sadbiytjsupn@example.com",
      "Set multiple aliases with a single command:\n<%= config.bin %> <%= command.id %> my-scratch-org=test-sadbiytjsupn@example.com my-other-scratch-org=test-ss0xut7txzxf@example.com",
      "Set an alias that contains spaces:\n<%= config.bin %> <%= command.id %> my-alias='alias with spaces'",
      "Set a single alias without using an equal sign:\n<%= config.bin %> <%= command.id %> my-scratch-org test-ss0xut7txzxf@example.com"
    ],
    "strict": false,
    "aliases": [
      "force:alias:set"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "alias:set",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "alias",
      "set.js"
    ],
    "args": {},
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "pluginAlias": "@salesforce/plugin-settings",
    "pluginName": "@salesforce/plugin-settings",
    "pluginType": "core",
    "aliasPermutations": [
      "force:alias:set",
      "alias:force:set",
      "alias:set:force",
      "force:set:alias",
      "set:force:alias",
      "set:alias:force"
    ],
    "permutations": [
      "alias:set",
      "set:alias"
    ]
  },
  {
    "summary": "Unset one or more aliases that are currently set on your local computer.",
    "description": "Aliases are global, so when you unset one it's no longer available in any Salesforce DX project.",
    "examples": [
      "Unset an alias:\n<%= config.bin %> <%= command.id %> my-alias",
      "Unset multiple aliases with a single command:\n<%= config.bin %> <%= command.id %> my-alias my-other-alias",
      "Unset all aliases:\n<%= config.bin %> <%= command.id %> --all [--no-prompt]"
    ],
    "strict": false,
    "aliases": [
      "force:alias:unset"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "all": {
        "char": "a",
        "name": "all",
        "summary": "Unset all currently set aliases.",
        "allowNo": false,
        "type": "boolean"
      },
      "no-prompt": {
        "char": "p",
        "name": "no-prompt",
        "summary": "Don't prompt the user for confirmation when unsetting all aliases.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "alias:unset",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "alias",
      "unset.js"
    ],
    "args": {},
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "pluginAlias": "@salesforce/plugin-settings",
    "pluginName": "@salesforce/plugin-settings",
    "pluginType": "core",
    "aliasPermutations": [
      "force:alias:unset",
      "alias:force:unset",
      "alias:unset:force",
      "force:unset:alias",
      "unset:force:alias",
      "unset:alias:force"
    ],
    "permutations": [
      "alias:unset",
      "unset:alias"
    ]
  },
  {
    "aliases": [
      "force:analytics:template:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "examples": [
      "Generate the metadata files for a simple Analytics template file called myTemplate in the force-app/main/default/waveTemplates directory:\n<%= config.bin %> <%= command.id %> --name myTemplate --output-dir force-app/main/default/waveTemplates"
    ],
    "summary": "Generate a simple Analytics template.",
    "description": "The metadata files associated with the Analytics template must be contained in a parent directory called \"waveTemplates\" in your package directory. Either run this command from an existing directory of this name, or use the --output-dir flag to generate one or point to an existing one.",
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir"
        ],
        "char": "d",
        "deprecateAliases": true,
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "name": "output-dir",
        "summary": "Directory for saving the created files.",
        "default": ".",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "templatename"
        ],
        "char": "n",
        "deprecateAliases": true,
        "name": "name",
        "required": true,
        "summary": "Name of the Analytics template.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "analytics:generate:template",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "analytics",
      "generate",
      "template.js"
    ],
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginName": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliasPermutations": [
      "force:analytics:template:create",
      "analytics:force:template:create",
      "analytics:template:force:create",
      "analytics:template:create:force",
      "force:template:analytics:create",
      "template:force:analytics:create",
      "template:analytics:force:create",
      "template:analytics:create:force",
      "force:template:create:analytics",
      "template:force:create:analytics",
      "template:create:force:analytics",
      "template:create:analytics:force",
      "force:analytics:create:template",
      "analytics:force:create:template",
      "analytics:create:force:template",
      "analytics:create:template:force",
      "force:create:analytics:template",
      "create:force:analytics:template",
      "create:analytics:force:template",
      "create:analytics:template:force",
      "force:create:template:analytics",
      "create:force:template:analytics",
      "create:template:force:analytics",
      "create:template:analytics:force"
    ],
    "permutations": [
      "analytics:generate:template",
      "generate:analytics:template",
      "generate:template:analytics",
      "analytics:template:generate",
      "template:analytics:generate",
      "template:generate:analytics"
    ]
  },
  {
    "aliases": [
      "force:apex:class:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate an Apex class.",
    "description": "Generates the Apex *.cls file and associated metadata file. These files must be contained in a parent directory called \"classes\" in your package directory. Either run this command from an existing directory of this name, or use the --output-dir flag to generate one or point to an existing one.",
    "examples": [
      "Generate two metadata files associated with the MyClass Apex class (MyClass.cls and MyClass.cls-meta.xml) in the current directory:\n<%= config.bin %> <%= command.id %> --name MyClass",
      "Similar to previous example, but generates the files in the \"force-app/main/default/classes\" directory:\n<%= config.bin %> <%= command.id %> --name MyClass --output-dir force-app/main/default/classes"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "classname"
        ],
        "char": "n",
        "deprecateAliases": true,
        "description": "The name can be up to 40 characters and must start with a letter.",
        "name": "name",
        "required": true,
        "summary": "Name of the generated Apex class.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "template": {
        "char": "t",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "name": "template",
        "summary": "Template to use for file creation.",
        "default": "DefaultApexClass",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "ApexException",
          "ApexUnitTest",
          "BasicUnitTest",
          "DefaultApexClass",
          "InboundEmailService"
        ],
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir"
        ],
        "char": "d",
        "deprecateAliases": true,
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "name": "output-dir",
        "summary": "Directory for saving the created files.",
        "default": ".",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "apex:generate:class",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "apex",
      "generate",
      "class.js"
    ],
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginName": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliasPermutations": [
      "force:apex:class:create",
      "apex:force:class:create",
      "apex:class:force:create",
      "apex:class:create:force",
      "force:class:apex:create",
      "class:force:apex:create",
      "class:apex:force:create",
      "class:apex:create:force",
      "force:class:create:apex",
      "class:force:create:apex",
      "class:create:force:apex",
      "class:create:apex:force",
      "force:apex:create:class",
      "apex:force:create:class",
      "apex:create:force:class",
      "apex:create:class:force",
      "force:create:apex:class",
      "create:force:apex:class",
      "create:apex:force:class",
      "create:apex:class:force",
      "force:create:class:apex",
      "create:force:class:apex",
      "create:class:force:apex",
      "create:class:apex:force"
    ],
    "permutations": [
      "apex:generate:class",
      "generate:apex:class",
      "generate:class:apex",
      "apex:class:generate",
      "class:apex:generate",
      "class:generate:apex"
    ]
  },
  {
    "aliases": [
      "force:apex:trigger:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate an Apex trigger.",
    "description": "Generates the Apex trigger *.trigger file and associated metadata file. These files must be contained in a parent directory called \"triggers\" in your package directory. Either run this command from an existing directory of this name, or use the --output-dir flag to generate one or point to an existing one.\n\nIf you don't specify the --sobject flag, the .trigger file contains the generic placeholder SOBJECT; replace it with the Salesforce object you want to generate a trigger for. If you don't specify --event, \"before insert\" is used.",
    "examples": [
      "Generate two files associated with the MyTrigger Apex trigger (MyTrigger.trigger and MyTrigger.trigger-meta.xml) in the current directory:\n<%= config.bin %> <%= command.id %> --name MyTrigger",
      "Similar to the previous example, but generate the files in the \"force-app/main/default/triggers\" directory:\n<%= config.bin %> <%= command.id %> --name MyTrigger --output-dir force-app/main/default/triggers",
      "Generate files for a trigger that fires on the Account object before and after an insert:\n<%= config.bin %> <%= command.id %> --name MyTrigger --sobject Account --event \"before insert,after insert\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "triggername"
        ],
        "char": "n",
        "deprecateAliases": true,
        "description": "The name can be up to 40 characters and must start with a letter.",
        "name": "name",
        "required": true,
        "summary": "Name of the generated Apex trigger",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "template": {
        "char": "t",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "name": "template",
        "summary": "Template to use for file creation.",
        "default": "ApexTrigger",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "ApexTrigger"
        ],
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir"
        ],
        "char": "d",
        "deprecateAliases": true,
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "name": "output-dir",
        "summary": "Directory for saving the created files.",
        "default": ".",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sobject": {
        "char": "s",
        "name": "sobject",
        "summary": "Salesforce object to generate a trigger on.",
        "default": "SOBJECT",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "event": {
        "aliases": [
          "triggerevents"
        ],
        "char": "e",
        "deprecateAliases": true,
        "name": "event",
        "summary": "Events that fire the trigger.",
        "default": [
          "before insert"
        ],
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "options": [
          "before insert",
          "before update",
          "before delete",
          "after insert",
          "after update",
          "after delete",
          "after undelete"
        ],
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "apex:generate:trigger",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "apex",
      "generate",
      "trigger.js"
    ],
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginName": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliasPermutations": [
      "force:apex:trigger:create",
      "apex:force:trigger:create",
      "apex:trigger:force:create",
      "apex:trigger:create:force",
      "force:trigger:apex:create",
      "trigger:force:apex:create",
      "trigger:apex:force:create",
      "trigger:apex:create:force",
      "force:trigger:create:apex",
      "trigger:force:create:apex",
      "trigger:create:force:apex",
      "trigger:create:apex:force",
      "force:apex:create:trigger",
      "apex:force:create:trigger",
      "apex:create:force:trigger",
      "apex:create:trigger:force",
      "force:create:apex:trigger",
      "create:force:apex:trigger",
      "create:apex:force:trigger",
      "create:apex:trigger:force",
      "force:create:trigger:apex",
      "create:force:trigger:apex",
      "create:trigger:force:apex",
      "create:trigger:apex:force"
    ],
    "permutations": [
      "apex:generate:trigger",
      "generate:apex:trigger",
      "generate:trigger:apex",
      "apex:trigger:generate",
      "trigger:apex:generate",
      "trigger:generate:apex"
    ]
  },
  {
    "aliases": [
      "force:apex:log:get"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Fetch the specified log or given number of most recent logs from the org.",
    "description": "To get the IDs for your debug logs, run \"sf apex log list\". Executing this command without flags returns the most recent log.",
    "examples": [
      "Fetch the log in your default org using an ID:\n<%= config.bin %> <%= command.id %> --log-id <log id>",
      "Fetch the log in the org with the specified username using an ID:\n<%= config.bin %> <%= command.id %> --log-id <log id> --target-org me@my.org",
      "Fetch the two most recent logs in your default org:\n<%= config.bin %> <%= command.id %> --number 2",
      "Similar to previous example, but save the two log files in the specified directory:\n<%= config.bin %> <%= command.id %> --output-dir /Users/sfdxUser/logs --number 2"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "log-id": {
        "aliases": [
          "logid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "log-id",
        "summary": "ID of the specific log to display.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "number": {
        "char": "n",
        "name": "number",
        "summary": "Number of the most recent logs to display.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir",
          "output-directory"
        ],
        "char": "d",
        "deprecateAliases": true,
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "name": "output-dir",
        "summary": "Directory for saving the log files.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "apex:get:log",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "apex",
      "get",
      "log.js"
    ],
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginName": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliasPermutations": [
      "force:apex:log:get",
      "apex:force:log:get",
      "apex:log:force:get",
      "apex:log:get:force",
      "force:log:apex:get",
      "log:force:apex:get",
      "log:apex:force:get",
      "log:apex:get:force",
      "force:log:get:apex",
      "log:force:get:apex",
      "log:get:force:apex",
      "log:get:apex:force",
      "force:apex:get:log",
      "apex:force:get:log",
      "apex:get:force:log",
      "apex:get:log:force",
      "force:get:apex:log",
      "get:force:apex:log",
      "get:apex:force:log",
      "get:apex:log:force",
      "force:get:log:apex",
      "get:force:log:apex",
      "get:log:force:apex",
      "get:log:apex:force"
    ],
    "permutations": [
      "apex:get:log",
      "get:apex:log",
      "get:log:apex",
      "apex:log:get",
      "log:apex:get",
      "log:get:apex"
    ]
  },
  {
    "aliases": [
      "force:apex:test:report"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Display test results for a specific asynchronous test run.",
    "description": "Provide a test run ID to display test results for an enqueued or completed asynchronous test run. The test run ID is displayed after running the \"sf apex test run\" command.\n\nTo see code coverage results, use the --code-coverage flag with --result-format. The output displays a high-level summary of the test run and the code coverage values for classes in your org. If you specify human-readable result format, use the --detailed-coverage flag to see detailed coverage results for each test method run.",
    "examples": [
      "Display test results for your default org using a test run ID:\n<%= config.bin %> <%= command.id %> --test-run-id <test run id>",
      "Similar to previous example, but output the result in JUnit format:\n<%= config.bin %> <%= command.id %> --test-run-id <test run id> --result-format junit",
      "Also retrieve code coverage results and output in JSON format:\n<%= config.bin %> <%= command.id %> --test-run-id <test run id> --code-coverage --json",
      "Specify a directory in which to save the test results from the org with the specified username (rather than your default org):\n<%= config.bin %> <%= command.id %> --test-run-id <test run id> --code-coverage --output-dir <path to outputdir> --target-org me@myorg'"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "test-run-id": {
        "aliases": [
          "testrunid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "test-run-id",
        "required": true,
        "summary": "ID of the test run.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "code-coverage": {
        "aliases": [
          "codecoverage"
        ],
        "char": "c",
        "deprecateAliases": true,
        "name": "code-coverage",
        "summary": "Retrieve code coverage results.",
        "allowNo": false,
        "type": "boolean"
      },
      "detailed-coverage": {
        "dependsOn": [
          "code-coverage"
        ],
        "name": "detailed-coverage",
        "summary": "Display detailed code coverage per test.",
        "allowNo": false,
        "type": "boolean"
      },
      "output-dir": {
        "aliases": [
          "outputdir",
          "output-directory"
        ],
        "char": "d",
        "deprecateAliases": true,
        "name": "output-dir",
        "summary": "Directory in which to store test result files.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "result-format": {
        "aliases": [
          "resultformat"
        ],
        "char": "r",
        "deprecateAliases": true,
        "name": "result-format",
        "summary": "Format of the test results.",
        "default": "human",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "human",
          "tap",
          "junit",
          "json"
        ],
        "type": "option"
      },
      "concise": {
        "name": "concise",
        "summary": "Display only failed test results; works with human-readable output only.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "apex:get:test",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "apex",
      "get",
      "test.js"
    ],
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginName": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliasPermutations": [
      "force:apex:test:report",
      "apex:force:test:report",
      "apex:test:force:report",
      "apex:test:report:force",
      "force:test:apex:report",
      "test:force:apex:report",
      "test:apex:force:report",
      "test:apex:report:force",
      "force:test:report:apex",
      "test:force:report:apex",
      "test:report:force:apex",
      "test:report:apex:force",
      "force:apex:report:test",
      "apex:force:report:test",
      "apex:report:force:test",
      "apex:report:test:force",
      "force:report:apex:test",
      "report:force:apex:test",
      "report:apex:force:test",
      "report:apex:test:force",
      "force:report:test:apex",
      "report:force:test:apex",
      "report:test:force:apex",
      "report:test:apex:force"
    ],
    "permutations": [
      "apex:get:test",
      "get:apex:test",
      "get:test:apex",
      "apex:test:get",
      "test:apex:get",
      "test:get:apex"
    ]
  },
  {
    "aliases": [
      "force:apex:log:list"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Display a list of IDs and general information about debug logs.",
    "description": "Run this command in a project to list the IDs and general information for all debug logs in your default org.\n\nTo fetch a specific log from your org, obtain the ID from this command's output, then run the “sf apex log get” command.",
    "examples": [
      "List the IDs and information about the debug logs in your default org:\n<%= config.bin %> <%= command.id %>",
      "Similar to previous example, but use the org with the specified username:\n<%= config.bin %> <%= command.id %> --target-org me@my.org"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "apex:list:log",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "apex",
      "list",
      "log.js"
    ],
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginName": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliasPermutations": [
      "force:apex:log:list",
      "apex:force:log:list",
      "apex:log:force:list",
      "apex:log:list:force",
      "force:log:apex:list",
      "log:force:apex:list",
      "log:apex:force:list",
      "log:apex:list:force",
      "force:log:list:apex",
      "log:force:list:apex",
      "log:list:force:apex",
      "log:list:apex:force",
      "force:apex:list:log",
      "apex:force:list:log",
      "apex:list:force:log",
      "apex:list:log:force",
      "force:list:apex:log",
      "list:force:apex:log",
      "list:apex:force:log",
      "list:apex:log:force",
      "force:list:log:apex",
      "list:force:log:apex",
      "list:log:force:apex",
      "list:log:apex:force"
    ],
    "permutations": [
      "apex:list:log",
      "list:apex:log",
      "list:log:apex",
      "apex:log:list",
      "log:apex:list",
      "log:list:apex"
    ]
  },
  {
    "aliases": [
      "force:apex:execute"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Execute anonymous Apex code entered on the command line or from a local file.",
    "description": "If you don’t run this command from within a Salesforce DX project, you must specify the —-target-org flag.\n\nTo execute your code interactively, run this command with no flags. At the prompt, enter all your Apex code; press CTRL-D when you're finished. Your code is then executed in a single execute anonymous request.\nFor more information, see \"Anonymous Blocks\" in the Apex Developer Guide.",
    "examples": [
      "Execute the Apex code that's in the ~/test.apex file in the org with the specified username:\n<%= config.bin %> <%= command.id %> --target-org testusername@salesforce.org --file ~/test.apex",
      "Similar to previous example, but execute the code in your default org:\n<%= config.bin %> <%= command.id %> --file ~/test.apex",
      "Run the command with no flags to start interactive mode; the code will execute in your default org when you exit. At the prompt, start type Apex code and press the Enter key after each line. Press CTRL+D when finished.\n<%= config.bin %> <%= command.id %>"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "file": {
        "aliases": [
          "apexcodefile"
        ],
        "char": "f",
        "deprecateAliases": true,
        "name": "file",
        "summary": "Path to a local file that contains Apex code.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "apex:run",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "apex",
      "run.js"
    ],
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginName": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliasPermutations": [
      "force:apex:execute",
      "apex:force:execute",
      "apex:execute:force",
      "force:execute:apex",
      "execute:force:apex",
      "execute:apex:force"
    ],
    "permutations": [
      "apex:run",
      "run:apex"
    ]
  },
  {
    "aliases": [
      "force:apex:test:run"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Invoke Apex tests in an org.",
    "description": "Specify which tests to run by using the --class-names, --suite-names, or --tests flags. Alternatively, use the --test-level flag to run all the tests in your org, local tests, or specified tests.\n\nTo see code coverage results, use the --code-coverage flag with --result-format. The output displays a high-level summary of the test run and the code coverage values for classes in your org. If you specify human-readable result format, use the --detailed-coverage flag to see detailed coverage results for each test method run.\n\nBy default, Apex tests run asynchronously and immediately return a test run ID. You can use the --wait flag to specify the number of minutes to wait; if the tests finish in that timeframe, the command displays the results. If the tests haven't finished by the end of the wait time, the command displays a test run ID. Use the \"sf apex get test --test-run-id\" command to get the results.\n\nYou must have the \"View All Data\" system permission to use this command. The permission is disabled by default and can be enabled only by a system administrator.\n\nNOTE: The testRunCoverage value (JSON and JUnit result formats) is a percentage of the covered lines and total lines from all the Apex classes evaluated by the tests in this run.",
    "examples": [
      "Run all Apex tests and suites in your default org:\n<%= config.bin %> <%= command.id %>",
      "Run the specified Apex test classes in your default org and display results in human-readable form:\n<%= config.bin %> <%= command.id %> --class-names MyClassTest --class-names MyOtherClassTest --result-format human",
      "Run the specified Apex test suites in your default org and include code coverage results and additional details:\n<%= config.bin %> <%= command.id %> --suite-names MySuite --suite-names MyOtherSuite --code-coverage --detailed-coverage",
      "Run the specified Apex tests in your default org and display results in human-readable output:\n<%= config.bin %> <%= command.id %> --tests MyClassTest.testCoolFeature --tests MyClassTest.testAwesomeFeature --tests AnotherClassTest --tests namespace.TheirClassTest.testThis --result-format human",
      "Run all tests in the org with the specified username with the specified test level; save the output to the specified directory:\n<%= config.bin %> <%= command.id %> --test-level RunLocalTests --output-dir <path to outputdir> --target-org me@my.org",
      "Run all tests in the org asynchronously:\n<%= config.bin %> <%= command.id %> --target-org myscratch",
      "Run all tests synchronously; the command waits to display the test results until all tests finish:\n<%= config.bin %> <%= command.id %> --synchronous",
      "Run specific tests using the --test-level flag:\n<%= config.bin %> <%= command.id %> --test-level RunLocalTests",
      "Run Apex tests on all the methods in the specified class; output results in Test Anything Protocol (TAP) format and request code coverage results:\n<%= config.bin %> <%= command.id %> --class-names TestA --class-names TestB --result-format tap --code-coverage",
      "Run Apex tests on methods specified using the standard Class.method notation; if you specify a test class without a method, the command runs all methods in the class:\n<%= config.bin %> <%= command.id %> --tests TestA.excitingMethod --tests TestA.boringMethod --tests TestB",
      "Run Apex tests on methods specified using the standard Class.method notation with a namespace:\n<%= config.bin %> <%= command.id %> --tests ns.TestA.excitingMethod --tests ns.TestA.boringMethod --tests ns.TestB"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "code-coverage": {
        "aliases": [
          "codecoverage"
        ],
        "char": "c",
        "deprecateAliases": true,
        "name": "code-coverage",
        "summary": "Retrieve code coverage results.",
        "allowNo": false,
        "type": "boolean"
      },
      "output-dir": {
        "aliases": [
          "outputdir",
          "output-directory"
        ],
        "char": "d",
        "deprecateAliases": true,
        "name": "output-dir",
        "summary": "Directory in which to store test run files.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "test-level": {
        "aliases": [
          "testlevel"
        ],
        "char": "l",
        "deprecateAliases": true,
        "description": "Here's what the levels mean:\n\n- RunSpecifiedTests — Only the tests that you specify in the runTests option are run. Code coverage requirements differ from the default coverage requirements when using this test level. The executed tests must cover each class and trigger in the deployment package for a minimum of 75% code coverage. This coverage is computed for each class and triggers individually, and is different than the overall coverage percentage.\n- RunLocalTests — All local tests in your org, including tests that originate from no-namespaced unlocked packages, are run. The tests that originate from installed managed packages and namespaced unlocked packages aren't run. This test level is the default for production deployments that include Apex classes or triggers.\n- RunAllTestsInOrg — All tests are run. The tests include all tests in your org.",
        "name": "test-level",
        "summary": "Level of tests to run; default is RunLocalTests.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "RunLocalTests",
          "RunAllTestsInOrg",
          "RunSpecifiedTests"
        ],
        "type": "option"
      },
      "class-names": {
        "aliases": [
          "classnames"
        ],
        "char": "n",
        "deprecateAliases": true,
        "description": "If you select --class-names, you can't specify --suite-names or --tests.\nFor multiple classes, repeat the flag for each.\n--class-names Class1 --class-names Class2",
        "exclusive": [
          "suite-names",
          "tests"
        ],
        "name": "class-names",
        "summary": "Apex test class names to run; default is all classes.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "result-format": {
        "aliases": [
          "resultformat"
        ],
        "char": "r",
        "deprecateAliases": true,
        "name": "result-format",
        "summary": "Format of the test results.",
        "default": "human",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "human",
          "tap",
          "junit",
          "json"
        ],
        "type": "option"
      },
      "suite-names": {
        "aliases": [
          "suitenames"
        ],
        "char": "s",
        "deprecateAliases": true,
        "description": "If you select --suite-names, you can't specify --class-names or --tests.\nFor multiple suites, repeat the flag for each.\n--suite-names Suite1 --suite-names Suite2",
        "exclusive": [
          "class-names",
          "tests"
        ],
        "name": "suite-names",
        "summary": "Apex test suite names to run.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "tests": {
        "char": "t",
        "description": "If you specify --tests, you can't specify --class-names or --suite-names\nFor multiple tests, repeat the flag for each.\n--tests Test1 --tests Test2",
        "exclusive": [
          "class-names",
          "suite-names"
        ],
        "name": "tests",
        "summary": "Apex test class names or IDs and, if applicable, test methods to run; default is all tests.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "name": "wait",
        "summary": "Sets the streaming client socket timeout in minutes; specify a longer wait time if timeouts occur frequently.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "synchronous": {
        "char": "y",
        "name": "synchronous",
        "summary": "Runs test methods from a single Apex class synchronously; if not specified, tests are run asynchronously.",
        "allowNo": false,
        "type": "boolean"
      },
      "detailed-coverage": {
        "aliases": [
          "detailedcoverage"
        ],
        "char": "v",
        "dependsOn": [
          "code-coverage"
        ],
        "deprecateAliases": true,
        "name": "detailed-coverage",
        "summary": "Display detailed code coverage per test.",
        "allowNo": false,
        "type": "boolean"
      },
      "concise": {
        "name": "concise",
        "summary": "Display only failed test results; works with human-readable output only.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "apex:run:test",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "apex",
      "run",
      "test.js"
    ],
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginName": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliasPermutations": [
      "force:apex:test:run",
      "apex:force:test:run",
      "apex:test:force:run",
      "apex:test:run:force",
      "force:test:apex:run",
      "test:force:apex:run",
      "test:apex:force:run",
      "test:apex:run:force",
      "force:test:run:apex",
      "test:force:run:apex",
      "test:run:force:apex",
      "test:run:apex:force",
      "force:apex:run:test",
      "apex:force:run:test",
      "apex:run:force:test",
      "apex:run:test:force",
      "force:run:apex:test",
      "run:force:apex:test",
      "run:apex:force:test",
      "run:apex:test:force",
      "force:run:test:apex",
      "run:force:test:apex",
      "run:test:force:apex",
      "run:test:apex:force"
    ],
    "permutations": [
      "apex:run:test",
      "run:apex:test",
      "run:test:apex",
      "apex:test:run",
      "test:apex:run",
      "test:run:apex"
    ]
  },
  {
    "aliases": [
      "force:apex:log:tail"
    ],
    "args": {},
    "enableJsonFlag": false,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Activate debug logging and display logs in the terminal.",
    "description": "You can also pipe the logs to a file.",
    "examples": [
      "Activate debug logging:\n<%= config.bin %> <%= command.id %>",
      "Specify a debug level:\n<%= config.bin %> <%= command.id %> --debug-level MyDebugLevel",
      "Skip the trace flag setup and apply default colors:\n<%= config.bin %> <%= command.id %> --color --skip-trace-flag"
    ],
    "deprecateAliases": true,
    "flags": {
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "color": {
        "char": "c",
        "name": "color",
        "summary": "Apply default colors to noteworthy log lines.",
        "allowNo": false,
        "type": "boolean"
      },
      "debug-level": {
        "aliases": [
          "debuglevel"
        ],
        "char": "d",
        "deprecateAliases": true,
        "exclusive": [
          "skip-trace-flag"
        ],
        "name": "debug-level",
        "summary": "Debug level to set on the DEVELOPER_LOG trace flag for your user.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "skip-trace-flag": {
        "aliases": [
          "skiptraceflag"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "skip-trace-flag",
        "summary": "Skip trace flag setup. Assumes that a trace flag and debug level are fully set up.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "apex:tail:log",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "apex",
      "tail",
      "log.js"
    ],
    "pluginAlias": "@salesforce/plugin-apex",
    "pluginName": "@salesforce/plugin-apex",
    "pluginType": "core",
    "aliasPermutations": [
      "force:apex:log:tail",
      "apex:force:log:tail",
      "apex:log:force:tail",
      "apex:log:tail:force",
      "force:log:apex:tail",
      "log:force:apex:tail",
      "log:apex:force:tail",
      "log:apex:tail:force",
      "force:log:tail:apex",
      "log:force:tail:apex",
      "log:tail:force:apex",
      "log:tail:apex:force",
      "force:apex:tail:log",
      "apex:force:tail:log",
      "apex:tail:force:log",
      "apex:tail:log:force",
      "force:tail:apex:log",
      "tail:force:apex:log",
      "tail:apex:force:log",
      "tail:apex:log:force",
      "force:tail:log:apex",
      "tail:force:log:apex",
      "tail:log:force:apex",
      "tail:log:apex:force"
    ],
    "permutations": [
      "apex:tail:log",
      "tail:apex:log",
      "tail:log:apex",
      "apex:log:tail",
      "log:apex:tail",
      "log:tail:apex"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Execute a GraphQL statement.",
    "description": "Specify the GraphQL statement with the \"--body\" flag, either directly at the command line or with a file that contains the statement. You can query Salesforce records using a \"query\" statement or use mutations to modify Salesforce records.\n\nThis command uses the GraphQL API to query or modify Salesforce objects. For details about the API, and examples of queries and mutations, see https://developer.salesforce.com/docs/platform/graphql/guide/graphql-about.html.",
    "examples": [
      "Execute a GraphQL query on the Account object by specifying the query directly to the \"--body\" flag; the command uses your default org:\n<%= config.bin %> <%= command.id %> --body \"query accounts { uiapi { query { Account { edges { node { Id \\n Name { value } } } } } } }\"",
      "Read the GraphQL statement from a file called \"example.txt\" and execute it on an org with alias \"my-org\":\n<%= config.bin %> <%= command.id %> --body example.txt --target-org my-org",
      "Pipe the GraphQL statement that you want to execute from standard input to the command:\n$ echo graphql | sf api request graphql --body -",
      "Write the output of the command to a file called \"output.txt\" and include the HTTP response status and headers:\n<%= config.bin %> <%= command.id %> --body example.txt --stream-to-file output.txt --include"
    ],
    "state": "beta",
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "stream-to-file": {
        "char": "S",
        "exclusive": [
          "include"
        ],
        "name": "stream-to-file",
        "summary": "Stream responses to a file.",
        "hasDynamicHelp": false,
        "helpValue": "Example: report.xlsx",
        "multiple": false,
        "type": "option"
      },
      "include": {
        "char": "i",
        "exclusive": [
          "stream-to-file"
        ],
        "name": "include",
        "summary": "Include the HTTP response status and headers in the output.",
        "allowNo": false,
        "type": "boolean"
      },
      "body": {
        "name": "body",
        "required": true,
        "summary": "File or content with the GraphQL statement. Specify \"-\" to read from standard input.",
        "hasDynamicHelp": false,
        "helpValue": "file",
        "multiple": false,
        "type": "option"
      }
    },
    "id": "api:request:graphql",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "api",
      "request",
      "graphql.js"
    ],
    "pluginAlias": "@salesforce/plugin-api",
    "pluginName": "@salesforce/plugin-api",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "api:request:graphql",
      "request:api:graphql",
      "request:graphql:api",
      "api:graphql:request",
      "graphql:api:request",
      "graphql:request:api"
    ]
  },
  {
    "aliases": [],
    "args": {
      "url": {
        "description": "Salesforce API endpoint",
        "name": "url",
        "required": false
      }
    },
    "enableJsonFlag": false,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Make an authenticated HTTP request using the Salesforce REST API.",
    "description": "When sending the HTTP request with the \"--body\" flag, you can specify the request directly at the command line or with a file that contains the request.\n\nFor a full list of supported REST endpoints and resources, see https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_list.htm.",
    "examples": [
      "List information about limits in the org with alias \"my-org\":\n<%= config.bin %> <%= command.id %> 'services/data/v56.0/limits' --target-org my-org",
      "List all endpoints in your default org; write the output to a file called \"output.txt\" and include the HTTP response status and headers:\n<%= config.bin %> <%= command.id %> '/services/data/v56.0/' --stream-to-file output.txt --include",
      "Get the response in XML format by specifying the \"Accept\" HTTP header:\n<%= config.bin %> <%= command.id %> '/services/data/v56.0/limits' --header 'Accept: application/xml'",
      "Create an account record using the POST method; specify the request details directly in the \"--body\" flag:\n<%= config.bin %> <%= command.id %> /services/data/v56.0/sobjects/account --body \"{\\\"Name\\\" : \\\"Account from REST API\\\",\\\"ShippingCity\\\" : \\\"Boise\\\"}\" --method POST",
      "Create an account record using the information in a file called \"info.json\" (note the @ prefixing the file name):\n<%= config.bin %> <%= command.id %> '/services/data/v56.0/sobjects/account' --body @info.json --method POST",
      "Update an account record using the PATCH method:\n<%= config.bin %> <%= command.id %> '/services/data/v56.0/sobjects/account/<Account ID>' --body \"{\\\"BillingCity\\\": \\\"San Francisco\\\"}\" --method PATCH",
      "Store the values for the request header, body, and so on, in a file, which you then specify with the --file flag; see the description of --file for more information:\n<%= config.bin %> <%= command.id %> --file myFile.json"
    ],
    "state": "beta",
    "flags": {
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "include": {
        "char": "i",
        "exclusive": [
          "stream-to-file"
        ],
        "name": "include",
        "summary": "Include the HTTP response status and headers in the output.",
        "allowNo": false,
        "type": "boolean"
      },
      "method": {
        "char": "X",
        "name": "method",
        "summary": "HTTP method for the request.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "GET",
          "POST",
          "PUT",
          "PATCH",
          "HEAD",
          "DELETE",
          "OPTIONS",
          "TRACE"
        ],
        "type": "option"
      },
      "header": {
        "char": "H",
        "name": "header",
        "summary": "HTTP header in \"key:value\" format.",
        "hasDynamicHelp": false,
        "helpValue": "key:value",
        "multiple": true,
        "type": "option"
      },
      "file": {
        "char": "f",
        "description": "Use this flag instead of specifying the request details with individual flags, such as --body or --method. This schema defines how to create the JSON file:\n\n{\nurl: { raw: string } | string;\nmethod: 'GET', 'POST', 'PUT', 'PATCH', 'HEAD', 'DELETE', 'OPTIONS', 'TRACE';\ndescription?: string;\nheader: string | Array<Record<string, string>>;\nbody: { mode: 'raw' | 'formdata'; raw: string; formdata: FormData };\n}\n\nSalesforce CLI defined this schema to be mimic Postman schemas; both share similar properties. The CLI's schema also supports Postman Collections to reuse and share requests. As a result, you can build an API call using Postman, export and save it to a file, and then use the file as a value to this flag. For information about Postman, see https://learning.postman.com/.\n\nHere's a simple example of a JSON file that contains values for the request URL, method, and body:\n\n{\n\"url\": \"sobjects/Account/<Account ID>\",\n\"method\": \"PATCH\",\n\"body\" : {\n\"mode\": \"raw\",\n\"raw\": {\n\"BillingCity\": \"Boise\"\n}\n}\n}\n\nSee more examples in the plugin-api test directory, including JSON files that use \"formdata\" to define collections: https://github.com/salesforcecli/plugin-api/tree/main/test/test-files/data-project.",
        "exclusive": [
          "body"
        ],
        "name": "file",
        "summary": "JSON file that contains values for the request header, body, method, and URL.",
        "hasDynamicHelp": false,
        "helpValue": "file",
        "multiple": false,
        "type": "option"
      },
      "stream-to-file": {
        "char": "S",
        "exclusive": [
          "include"
        ],
        "name": "stream-to-file",
        "summary": "Stream responses to a file.",
        "hasDynamicHelp": false,
        "helpValue": "Example: report.xlsx",
        "multiple": false,
        "type": "option"
      },
      "body": {
        "char": "b",
        "name": "body",
        "summary": "File or content for the body of the HTTP request. Specify \"-\" to read from standard input or \"\" for an empty body. If passing a file, prefix the filename with '@'.",
        "hasDynamicHelp": false,
        "helpValue": "file",
        "multiple": false,
        "type": "option"
      }
    },
    "id": "api:request:rest",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "api",
      "request",
      "rest.js"
    ],
    "pluginAlias": "@salesforce/plugin-api",
    "pluginName": "@salesforce/plugin-api",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "api:request:rest",
      "request:api:rest",
      "request:rest:api",
      "api:rest:request",
      "rest:api:request",
      "rest:request:api"
    ]
  },
  {
    "args": {
      "shell": {
        "description": "Shell type",
        "name": "shell",
        "options": [
          "zsh",
          "bash",
          "powershell"
        ],
        "required": false
      }
    },
    "description": "Display autocomplete installation instructions.",
    "examples": [
      "$ <%= config.bin %> autocomplete",
      "$ <%= config.bin %> autocomplete bash",
      "$ <%= config.bin %> autocomplete zsh",
      "$ <%= config.bin %> autocomplete powershell",
      "$ <%= config.bin %> autocomplete --refresh-cache"
    ],
    "flags": {
      "refresh-cache": {
        "char": "r",
        "description": "Refresh cache (ignores displaying instructions)",
        "name": "refresh-cache",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "autocomplete",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "autocomplete",
      "index.js"
    ],
    "aliases": [],
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "pluginAlias": "@oclif/plugin-autocomplete",
    "pluginName": "@oclif/plugin-autocomplete",
    "pluginType": "core",
    "strict": true,
    "aliasPermutations": [],
    "permutations": [
      "autocomplete"
    ]
  },
  {
    "aliases": [
      "force:cmdt:field:create",
      "cmdt:field:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.0",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a field for a custom metadata type based on the provided field type.",
    "description": "Similar to a custom object, a custom metadata type has a list of custom fields that represent aspects of the metadata.\n\nThis command creates a metadata file that describes the new custom metadata type field. By default, the file is created in a \"fields\" directory in the current directory. Use the --output-directory to generate the file in the directory that contains the custom metadata type metdata files, such as \"force-app/main/default/objects/MyCmdt__mdt\" for the custom metadata type called MyCmdt.",
    "examples": [
      "Generate a metadata file for a custom checkbox field and add the file to the MyCmdt__mdt/fields directory:\n<%= config.bin %> <%= command.id %> --name MyCheckboxField --type Checkbox --output-directory force-app/main/default/objects/MyCmdt__mdt",
      "Generate a metadata file for a custom picklist field and add a few values:\n<%= config.bin %> <%= command.id %> --name MyPicklistField --type Picklist --picklist-values A --picklist-values B --picklist-values C --output-directory force-app/main/default/objects/MyCmdt__mdt",
      "Generate a metadata file for a custom number field and specify 2 decimal places:\n<%= config.bin %> <%= command.id %> --name MyNumberField --type Number --decimal-places 2 --output-directory force-app/main/default/objects/MyCmdt__mdt"
    ],
    "requiresProject": true,
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "fieldname"
        ],
        "char": "n",
        "name": "name",
        "required": true,
        "summary": "Unique name for the field.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "type": {
        "aliases": [
          "fieldtype"
        ],
        "char": "f",
        "description": "You can't use this command to create a custom metadata type field of type \"Metadata Relationship\". Use the Salesforce Setup UI instead.",
        "name": "type",
        "required": true,
        "summary": "Type of the field.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "Checkbox",
          "Date",
          "DateTime",
          "Email",
          "Number",
          "Percent",
          "Phone",
          "Picklist",
          "Text",
          "TextArea",
          "LongTextArea",
          "Url"
        ],
        "type": "option"
      },
      "picklist-values": {
        "aliases": [
          "picklistvalues"
        ],
        "char": "p",
        "name": "picklist-values",
        "summary": "Picklist values; required for picklist fields.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "decimal-places": {
        "aliases": [
          "decimalplaces"
        ],
        "char": "s",
        "description": "The value must be greater than or equal to zero. Default value is 0.",
        "name": "decimal-places",
        "summary": "Number of decimal places to use for number or percent fields.",
        "default": 0,
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "label": {
        "char": "l",
        "name": "label",
        "summary": "Label for the field.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "output-directory": {
        "aliases": [
          "outputdir",
          "outputdirectory"
        ],
        "char": "d",
        "description": "New files are automatically created in the \"fields\" directory. The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "name": "output-directory",
        "summary": "Directory to store newly-created field definition files.",
        "default": "",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "cmdt:generate:field",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "cmdt",
      "generate",
      "field.js"
    ],
    "pluginAlias": "@salesforce/plugin-custom-metadata",
    "pluginName": "@salesforce/plugin-custom-metadata",
    "pluginType": "user",
    "aliasPermutations": [
      "force:cmdt:field:create",
      "cmdt:force:field:create",
      "cmdt:field:force:create",
      "cmdt:field:create:force",
      "force:field:cmdt:create",
      "field:force:cmdt:create",
      "field:cmdt:force:create",
      "field:cmdt:create:force",
      "force:field:create:cmdt",
      "field:force:create:cmdt",
      "field:create:force:cmdt",
      "field:create:cmdt:force",
      "force:cmdt:create:field",
      "cmdt:force:create:field",
      "cmdt:create:force:field",
      "cmdt:create:field:force",
      "force:create:cmdt:field",
      "create:force:cmdt:field",
      "create:cmdt:force:field",
      "create:cmdt:field:force",
      "force:create:field:cmdt",
      "create:force:field:cmdt",
      "create:field:force:cmdt",
      "create:field:cmdt:force",
      "cmdt:field:create",
      "field:cmdt:create",
      "field:create:cmdt",
      "cmdt:create:field",
      "create:cmdt:field",
      "create:field:cmdt"
    ],
    "permutations": [
      "cmdt:generate:field",
      "generate:cmdt:field",
      "generate:field:cmdt",
      "cmdt:field:generate",
      "field:cmdt:generate",
      "field:generate:cmdt"
    ]
  },
  {
    "aliases": [
      "force:cmdt:generate"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.0",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a custom metadata type and all its records from a Salesforce object.",
    "description": "Use this command to migrate existing custom objects or custom settings in an org to custom metadata types. If a field of the Salesforce object is of an unsupported type, the field type is automatically converted to text. Run \"sf cmdt generate field --help\" to see the list of supported cmdt field types, listed in the --type flag summary. Use the --ignore-unsupported to ignore these fields.\n\nThis command creates the metadata files that describe the new custom metadata type and its fields in the \"force-app/main/default/objects/TypeName__mdt\" directory by default, where \"TypeName\" is the value of the required --dev-name flag. Use --type-output-directory to create them in a different directory.",
    "examples": [
      "Generate a custom metadata type from a custom object called MySourceObject__c in your default org:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --sobject MySourceObject__c",
      "Generate a custom metadata type from a custom object in an org with alias my-scratch-org; ignore unsupported field types instead of converting them to text:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --sobject MySourceObject__c --ignore-unsupported --target-org my-scratch-org",
      "Generate a protected custom metadata type from a custom object:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --sobject MySourceObject__c --visibility Protected",
      "Generate a protected custom metadata type from a custom setting with a specific singular and plural label:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --label \"My CMDT\" --plural-label \"My CMDTs\" --sobject MySourceSetting__c --visibility Protected",
      "Generate a custom metadata type and put the resulting metadata files in the specified directory:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --sobject MySourceObject__c --type-output-directory path/to/my/cmdt/directory",
      "Generate a custom metadata type and put the resulting record metadata file(s) in the specified directory:\n<%= config.bin %> <%= command.id %> --dev-name MyCMDT --sobject MySourceObject__c --records-output-dir path/to/my/cmdt/record/directory"
    ],
    "requiresProject": true,
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "dev-name": {
        "aliases": [
          "devname"
        ],
        "char": "n",
        "name": "dev-name",
        "required": true,
        "summary": "Name of the custom metadata type.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "label": {
        "char": "l",
        "name": "label",
        "summary": "Label for the custom metadata type.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "plural-label": {
        "aliases": [
          "plurallabel"
        ],
        "char": "p",
        "name": "plural-label",
        "summary": "Plural version of the label value; if blank, uses label.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "visibility": {
        "char": "v",
        "description": "For more information on what each option means, see this topic in Salesforce Help: https://help.salesforce.com/s/articleView?id=sf.custommetadatatypes_ui_create.htm&type=5.",
        "name": "visibility",
        "summary": "Who can see the custom metadata type.",
        "default": "Public",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "PackageProtected",
          "Protected",
          "Public"
        ],
        "type": "option"
      },
      "sobject": {
        "aliases": [
          "sobjectname"
        ],
        "char": "s",
        "name": "sobject",
        "required": true,
        "summary": "API name of the source Salesforce object used to generate the custom metadata type.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "ignore-unsupported": {
        "aliases": [
          "ignoreunsupported"
        ],
        "char": "i",
        "description": "In this context, \"ignore\" means that the fields aren't created. The default behavior is to create fields of type text and convert the field values to text.",
        "name": "ignore-unsupported",
        "summary": "Ignore unsupported field types.",
        "allowNo": false,
        "type": "boolean"
      },
      "type-output-directory": {
        "aliases": [
          "typeoutputdir"
        ],
        "char": "d",
        "name": "type-output-directory",
        "summary": "Directory to store newly-created custom metadata type files.",
        "default": "force-app/main/default/objects",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "records-output-dir": {
        "aliases": [
          "recordsoutputdir"
        ],
        "char": "r",
        "name": "records-output-dir",
        "summary": "Directory to store newly-created custom metadata record files.",
        "default": "force-app/main/default/customMetadata",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "cmdt:generate:fromorg",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "cmdt",
      "generate",
      "fromorg.js"
    ],
    "pluginAlias": "@salesforce/plugin-custom-metadata",
    "pluginName": "@salesforce/plugin-custom-metadata",
    "pluginType": "user",
    "aliasPermutations": [
      "force:cmdt:generate",
      "cmdt:force:generate",
      "cmdt:generate:force",
      "force:generate:cmdt",
      "generate:force:cmdt",
      "generate:cmdt:force"
    ],
    "permutations": [
      "cmdt:generate:fromorg",
      "generate:cmdt:fromorg",
      "generate:fromorg:cmdt",
      "cmdt:fromorg:generate",
      "fromorg:cmdt:generate",
      "fromorg:generate:cmdt"
    ]
  },
  {
    "aliases": [
      "force:cmdt:create",
      "cmdt:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.0",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a new custom metadata type in the current project.",
    "description": "This command creates a metadata file that describes the new custom metadata type. By default, the file is created in the MyCustomType__mdt directory in the current directory, where MyCustomType is the value of the required --type-name flag. Use the --output-directory to generate the file in a package directory with other custom metadata types, such as \"force-app/main/default/objects\".",
    "examples": [
      "Generate a custom metadata type with developer name 'MyCustomType'; this name is also used as the label:\n<%= config.bin %> <%= command.id %> --type-name MyCustomType",
      "Generate a protected custom metadata type with a specific label:\n<%= config.bin %> <%= command.id %> --type-name MyCustomType --label \"Custom Type\" --plural-label \"Custom Types\" --visibility Protected"
    ],
    "deprecateAliases": true,
    "requiresProject": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "type-name": {
        "aliases": [
          "typename"
        ],
        "char": "n",
        "description": "The name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores.",
        "name": "type-name",
        "required": true,
        "summary": "Unique object name for the custom metadata type.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "label": {
        "char": "l",
        "name": "label",
        "summary": "Label for the custom metadata type.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "plural-label": {
        "aliases": [
          "plurallabel"
        ],
        "char": "p",
        "name": "plural-label",
        "summary": "Plural version of the label value; if blank, uses label.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "visibility": {
        "char": "v",
        "description": "For more information on what each option means, see this topic in Salesforce Help: https://help.salesforce.com/s/articleView?id=sf.custommetadatatypes_ui_create.htm&type=5.",
        "name": "visibility",
        "summary": "Who can see the custom metadata type.",
        "default": "Public",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "PackageProtected",
          "Protected",
          "Public"
        ],
        "type": "option"
      },
      "output-directory": {
        "aliases": [
          "outputdir",
          "outputdirectory"
        ],
        "char": "d",
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "name": "output-directory",
        "summary": "Directory to store the newly-created custom metadata type files",
        "default": "",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "cmdt:generate:object",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "cmdt",
      "generate",
      "object.js"
    ],
    "pluginAlias": "@salesforce/plugin-custom-metadata",
    "pluginName": "@salesforce/plugin-custom-metadata",
    "pluginType": "user",
    "aliasPermutations": [
      "force:cmdt:create",
      "cmdt:force:create",
      "cmdt:create:force",
      "force:create:cmdt",
      "create:force:cmdt",
      "create:cmdt:force",
      "cmdt:create",
      "create:cmdt"
    ],
    "permutations": [
      "cmdt:generate:object",
      "generate:cmdt:object",
      "generate:object:cmdt",
      "cmdt:object:generate",
      "object:cmdt:generate",
      "object:generate:cmdt"
    ]
  },
  {
    "aliases": [
      "force:cmdt:record:create",
      "cmdt:record:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": false,
    "_base": "@oclif/core@4.2.0",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a new record for a given custom metadata type in the current project.",
    "description": "The custom metadata type must already exist in your project. You must specify a name for the new record. Use name=value pairs to specify the values for the fields, such as MyTextField=\"some text here\" or MyNumberField=32.",
    "requiresProject": true,
    "deprecateAliases": true,
    "examples": [
      "Create a record metadata file for custom metadata type 'MyCMT' with specified values for two custom fields:\n<%= config.bin %> <%= command.id %> --type-name MyCMT__mdt --record-name MyRecord My_Custom_Field_1=Foo My_Custom_Field_2=Bar",
      "Create a protected record metadata file for custom metadata type 'MyCMT' with a specific label and values specified for two custom fields:\n<%= config.bin %> <%= command.id %> --type-name MyCMT__mdt --record-name MyRecord --label \"My Record\" --protected true My_Custom_Field_1=Foo My_Custom_Field_2=Bar"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "type-name": {
        "aliases": [
          "typename"
        ],
        "char": "t",
        "name": "type-name",
        "required": true,
        "summary": "API name of the custom metadata type to create a record for; must end in \"__mdt\".",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "record-name": {
        "aliases": [
          "recordname"
        ],
        "char": "n",
        "name": "record-name",
        "required": true,
        "summary": "Name of the new record.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "label": {
        "char": "l",
        "name": "label",
        "summary": "Label for the new record.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "protected": {
        "char": "p",
        "description": "Protected records can only be accessed by code in the same managed package namespace.",
        "name": "protected",
        "summary": "Protect the record when it's in a managed package.",
        "default": "false",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "true",
          "false"
        ],
        "type": "option"
      },
      "input-directory": {
        "aliases": [
          "inputdir",
          "inputdirectory"
        ],
        "char": "i",
        "name": "input-directory",
        "summary": "Directory from which to get the custom metadata type definition from.",
        "default": "force-app/main/default/objects",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "output-directory": {
        "aliases": [
          "outputdir",
          "outputdirectory"
        ],
        "char": "d",
        "name": "output-directory",
        "summary": "Directory to store newly-created custom metadata record files.",
        "default": "force-app/main/default/customMetadata",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "cmdt:generate:record",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "cmdt",
      "generate",
      "record.js"
    ],
    "pluginAlias": "@salesforce/plugin-custom-metadata",
    "pluginName": "@salesforce/plugin-custom-metadata",
    "pluginType": "user",
    "aliasPermutations": [
      "force:cmdt:record:create",
      "cmdt:force:record:create",
      "cmdt:record:force:create",
      "cmdt:record:create:force",
      "force:record:cmdt:create",
      "record:force:cmdt:create",
      "record:cmdt:force:create",
      "record:cmdt:create:force",
      "force:record:create:cmdt",
      "record:force:create:cmdt",
      "record:create:force:cmdt",
      "record:create:cmdt:force",
      "force:cmdt:create:record",
      "cmdt:force:create:record",
      "cmdt:create:force:record",
      "cmdt:create:record:force",
      "force:create:cmdt:record",
      "create:force:cmdt:record",
      "create:cmdt:force:record",
      "create:cmdt:record:force",
      "force:create:record:cmdt",
      "create:force:record:cmdt",
      "create:record:force:cmdt",
      "create:record:cmdt:force",
      "cmdt:record:create",
      "record:cmdt:create",
      "record:create:cmdt",
      "cmdt:create:record",
      "create:cmdt:record",
      "create:record:cmdt"
    ],
    "permutations": [
      "cmdt:generate:record",
      "generate:cmdt:record",
      "generate:record:cmdt",
      "cmdt:record:generate",
      "record:cmdt:generate",
      "record:generate:cmdt"
    ]
  },
  {
    "aliases": [
      "force:cmdt:record:insert",
      "cmdt:record:insert"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.0",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate new custom metadata type records from a CSV file.",
    "description": "The custom metadata type must already exist in your project. By default, the Name column is used to determine the record name; use the --name-column flag to specify a different column.",
    "requiresProject": true,
    "deprecateAliases": true,
    "examples": [
      "Generate record metadata files from values in a CSV file for the custom metadata type MyCmdt. Use 'Name' as the column that specifies the record name:\n<%= config.bin %> <%= command.id %> --csv path/to/my.csv --type-name MyCmdt",
      "Generate record metadata files from a CSV file in the directory different from the default, and use 'PrimaryKey' as the column that specifies the record name:\n<%= config.bin %> <%= command.id %> --csv path/to/my.csv --type-name MyCmdt --input-directory path/to/my/cmdt/directory --name-column \"PrimaryKey\""
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "csv": {
        "aliases": [
          "filepath"
        ],
        "char": "f",
        "name": "csv",
        "required": true,
        "summary": "Pathname of the CSV file.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "type-name": {
        "aliases": [
          "typename"
        ],
        "char": "t",
        "description": "The '__mdt' suffix is appended to the end of the name if it's omitted.",
        "name": "type-name",
        "required": true,
        "summary": "API name of the custom metadata type to create a record for.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "input-directory": {
        "aliases": [
          "inputdir",
          "inputdirectory"
        ],
        "char": "i",
        "name": "input-directory",
        "summary": "Directory from which to get the custom metadata type definition from.",
        "default": "force-app/main/default/objects",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "output-directory": {
        "aliases": [
          "outputdir",
          "outputdirectory"
        ],
        "char": "d",
        "name": "output-directory",
        "summary": "Directory to store newly-created custom metadata record files.",
        "default": "force-app/main/default/customMetadata",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name-column": {
        "aliases": [
          "namecolumn"
        ],
        "char": "n",
        "name": "name-column",
        "summary": "Column used to determine the name of the record.",
        "default": "Name",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "cmdt:generate:records",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "cmdt",
      "generate",
      "records.js"
    ],
    "pluginAlias": "@salesforce/plugin-custom-metadata",
    "pluginName": "@salesforce/plugin-custom-metadata",
    "pluginType": "user",
    "aliasPermutations": [
      "force:cmdt:record:insert",
      "cmdt:force:record:insert",
      "cmdt:record:force:insert",
      "cmdt:record:insert:force",
      "force:record:cmdt:insert",
      "record:force:cmdt:insert",
      "record:cmdt:force:insert",
      "record:cmdt:insert:force",
      "force:record:insert:cmdt",
      "record:force:insert:cmdt",
      "record:insert:force:cmdt",
      "record:insert:cmdt:force",
      "force:cmdt:insert:record",
      "cmdt:force:insert:record",
      "cmdt:insert:force:record",
      "cmdt:insert:record:force",
      "force:insert:cmdt:record",
      "insert:force:cmdt:record",
      "insert:cmdt:force:record",
      "insert:cmdt:record:force",
      "force:insert:record:cmdt",
      "insert:force:record:cmdt",
      "insert:record:force:cmdt",
      "insert:record:cmdt:force",
      "cmdt:record:insert",
      "record:cmdt:insert",
      "record:insert:cmdt",
      "cmdt:insert:record",
      "insert:cmdt:record",
      "insert:record:cmdt"
    ],
    "permutations": [
      "cmdt:generate:records",
      "generate:cmdt:records",
      "generate:records:cmdt",
      "cmdt:records:generate",
      "records:cmdt:generate",
      "records:generate:cmdt"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@3.27.0",
    "SF_ENV": "SF_ENV",
    "summary": "Display the current state of configuration for Code Analyzer.",
    "description": "Code Analyzer gives you the ability to configure settings that modify Code Analyzer's behavior, to override the tags and severity levels of rules, and to configure the engine specific settings.  Use this command to see the current state of this configuration. You can also save this state to a YAML-formatted file that you can modify for your needs.\n\nTo apply a custom configuration with Code Analyzer, either keep your custom configuration settings in a `code-analyzer.yml` file located in the current folder from which you are executing commands, or specify the location of your custom configuration file to the Code Analyzer commands with the --config-file flag.\n\nWe're continually improving Salesforce Code Analyzer. Tell us what you think! Give feedback at http://sfdc.co/CodeAnalyzerFeedback.",
    "examples": [
      "Display the current state of the Code Analyzer configuration using the default behavior: display top level configuration, display the engine and rule override settings associated with all the rules that have a \"Recommended\" tag; and automatically apply any existing custom configuration settings found in a `code-analyzer.yml` or `code-analyzer.yaml` file in the current folder:\n<%= config.bin %> <%= command.id %>",
      "This example is identical to the previous one, assuming that `./code-analyzer.yml` exists in your current folder.\n<%= config.bin %> <%= command.id %> --config-file ./code-analyzer.yml --rule-selector Recommended",
      "Write the current state of configuration to the file `code-analyzer.yml`, including any configuration from an existing `code-analyzer.yml` file. The command preserves all values from the original config, but overwrites any comments:\n<%= config.bin %> <%= command.id %> --config-file ./code-analyzer.yml --output-file code-analyzer.yml",
      "Display the configuration state for all rules, instead of just the recommended ones:\n<%= config.bin %> <%= command.id %> --rule-selector all",
      "Display the configuration state associated with recommended rules that are applicable to your workspace folder, `./src`:\n<%= config.bin %> <%= command.id %> --workspace ./src",
      "Display any relevant configuration settings associated with the rule name 'no-undef' from the 'eslint' engine:\n<%= config.bin %> <%= command.id %> --rule-selection eslint:no-undef",
      "Load an existing configuration file called `existing-config.yml`, and then write the configuration to a new file called `new-config.yml`, the configuration state that is applicable to all rules that are relevant to the workspace located in the current folder:\n<%= config.bin %> <%= command.id %> --config-file ./existing-config.yml --rule-selection all --workspace . --output-file ./subfolder-config.yml"
    ],
    "state": "Beta",
    "flags": {
      "workspace": {
        "char": "w",
        "description": "Use the --workspace flag to display only the configuration associated with the rules that apply to the files that make up your workspace. Typically, a workspace is a single project folder that contains all your files. But it can also consist of one or more folders, one or more files, and use glob patterns (wildcards). If you specify this flag multiple times, then your workspace is the sum of the files and folders.\n\nThis command uses the type of file in the workspace, such as JavaScript or Typescript, to determine the rules to include in the configuration state. For example, if your workspace contains only JavaScript files, the command doesn't include TypeScript rules. The command uses a file's extension to determine what kind of file it is, such as \".ts\" for TypeScript.\n\nSome engines may be configured to add additional rules based on what it finds in your workspace.  For example, if you set the \"engines.eslint.auto_discover_eslint_config\" value of your `code-analyzer.yml` file to true, then supplying your workspace allows the \"eslint\" engine to examine your files in order to find ESLint configuration files that could potentially add in additional rules.",
        "name": "workspace",
        "summary": "Set of files you want to include in the code analysis.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "rule-selector": {
        "char": "r",
        "description": "Use the --rule-selector flag to display only the configuration associated with the rules based on specific criteria. You can select by engine, such as the rules associated with the \"retire-js\" or \"eslint\" engine. Or select by the severity of the rules, such as high or moderate. You can also select rules using tag values or rule names.\n\nYou can combine different criteria using colons to further filter the list; the colon works as an intersection.  For example, \"--rule-selector eslint:Security\" reduces the output to only contain the configuration state associated with the rules from the \"eslint\" engine that have the \"Security\" tag. To add multiple rule selectors together (a union), specify the --rule-selector flag multiple times, such as \"--rule-selector eslint:Recommended --rule-selector retire-js:3\".\n\nIf you don't specify this flag, then the command uses the \"Recommended\" tag rule selector.\n\nRun `<%= config.bin %> <%= command.id %>  --rule-selector all` to display the configuration state associated with all possible rules available, and not just the recommended ones.",
        "name": "rule-selector",
        "summary": "Selection of rules, based on engine name, severity level, rule name, tag, or a combination of criteria separated by colons.",
        "default": [
          "Recommended"
        ],
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "config-file": {
        "char": "c",
        "description": "Use this flag to apply the customizations from a custom Code Analyzer configuration file to be displayed alongside the current Code Analyzer configuration state.\n\nIf you don't specify this flag, then the command looks for and applies a file named `code-analyzer.yml` or `code-analyzer.yaml` in your current folder.",
        "name": "config-file",
        "summary": "Path to the existing configuration file used to customize the engines and rules.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "output-file": {
        "char": "f",
        "description": "Use this flag to write the final config to a file, in addition to the terminal.",
        "name": "output-file",
        "summary": "Output file to write the configuration state to. The file is written in YAML format.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "code-analyzer:config",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "code-analyzer",
      "config.js"
    ],
    "pluginAlias": "@salesforce/plugin-code-analyzer",
    "pluginName": "@salesforce/plugin-code-analyzer",
    "pluginType": "user",
    "aliasPermutations": [],
    "permutations": [
      "code-analyzer:config",
      "config:code-analyzer"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@3.27.0",
    "SF_ENV": "SF_ENV",
    "summary": "List the rules that are available to analyze your code.",
    "description": "You can also view details about the rules, such as the engine it's associated with, tags, and description.\n\nUse this command to determine the exact set of rules to analyze your code. The `code-analyzer run` command has similar flags as this command, so once you've determined the flag values for this command that list the rules you want to run, you specify the same values to the `code-analyzer run` command.\n\nWe're continually improving Salesforce Code Analyzer. Tell us what you think! Give feedback at http://sfdc.co/CodeAnalyzerFeedback.",
    "examples": [
      "List rules using the default behavior: include rules from all engines that have a \"Recommended\" tag; display the rules using concise table format; and automatically apply rule or engine overrides if a \"code-analyzer.yml\" or \"code-analyzer.yaml\" file exists in the current folder:\n<%= config.bin %> <%= command.id %>",
      "The previous example is equivalent to this example:\n<%= config.bin %> <%= command.id %> --rule-selector Recommended --view table --config-file ./code-analyzer.yml",
      "List the recommended rules for the \"eslint\" engine:\n<%= config.bin %> <%= command.id %>  --rule-selector eslint:Recommended",
      "List all the rules for the \"eslint\" engine:\n<%= config.bin %> <%= command.id %>  --rule-selector eslint",
      "The previous example is equivalent to this example:\n<%= config.bin %> <%= command.id %>  --rule-selector eslint:all",
      "List all rules for all engines:\n<%= config.bin %> <%= command.id %>  --rule-selector all",
      "Get a more accurate list of the rules that apply specifically to your workspace (all the files in the current folder):\n<%= config.bin %> <%= command.id %>  --rule-selector all --workspace .",
      "List the recommended rules associated with a workspace that includes all the files in the folder \"./other-source\" and only the Apex class files (extension .cls) under the folder \"./force-app\":\n<%= config.bin %> <%= command.id %>  --rule-selector Recommended --workspace ./other-source --workspace ./force-app/**/*.cls",
      "List all the \"eslint\" engine rules that have a moderate severity (3) and the recommended \"retire-js\" engine rules with any severity:\n<%= config.bin %> <%= command.id %> --rule-selector eslint:3 --rule-selector retire-js:Recommended",
      "Similar to the previous example, but apply the rule overrides and engine settings from the configuration file called \"code-analyzer2.yml\" in the current folder. If, for example, you changed the severity of an \"eslint\" rule from moderate (3) to high (2) in the configuration file, then that rule won't be listed:\n<%= config.bin %> <%= command.id %> --rule-selector eslint:3 --rule-selector retire-js:Recommended --config-file ./code-analyzer2.yml",
      "List the details of the \"getter-return\" rule of the \"eslint\" engine and the rules named \"no-inner-declarations\" in any engine:\n<%= config.bin %> <%= command.id %> --rule-selector eslint:getter-return --rule-selector no-inner-declarations --view detail",
      "List the details of the recommended \"eslint\" engine rules that have the tag \"problem\" and high severity level (2) that apply to your workspace folder \"./force-app\":\n<%= config.bin %> <%= command.id %> --rule-selector eslint:Recommended:problem:2 --view detail --workspace ./force-app"
    ],
    "state": "Beta",
    "flags": {
      "workspace": {
        "char": "w",
        "description": "If you specify this flag, the command returns a more accurate list of the rules that apply to the files that make up your workspace. Typically, a workspace is a single project folder that contains all your files. But it can also consist of one or more folders, one or more files, and use glob patterns (wildcards). If you specify this flag multiple times, then your workspace is the sum of the files and folders. \n\nThis command uses the type of file in the workspace, such as JavaScript or Typescript, to determine the rules to list. For example, if your workspace contains only JavaScript files, the command doesn't list TypeScript rules. The command uses a file's extension to determine what kind of file it is, such as \".ts\" for TypeScript.\n\nSome engines may be configured to add additional rules based on what it finds in your workspace.  For example, if you set the engines.eslint.auto_discover_eslint_config value of your code-analyzer.yml file to true, then supplying your workspace allows the \"eslint\" engine to examine your files in order to find ESLint configuration files that could potentially add in additional rules.",
        "name": "workspace",
        "summary": "Set of files you want to include in the code analysis.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "rule-selector": {
        "char": "r",
        "description": "Use the --rule-selector flag to select the list of rules based on specific criteria.  For example, you can select by engine, such as the rules associated with the \"retire-js\" or \"eslint\" engine. Or select by the severity of the rules, such as high or moderate. You can also select rules using tag values or rule names. Every rule has a name, which is unique within the scope of an engine. Most rules have tags, although it's not required. An example of a tag is \"Recommended\". \n\nYou can combine different criteria using colons to further filter the list; the colon works as an intersection.  For example, \"--rule-selector eslint:Security\" lists rules associated only with the \"eslint\" engine that have the Security tag.  The flag \"--rule-selector eslint:Security:3\" flag lists the \"eslint\" rules that have the Security tag and moderate severity (3). To add multiple rule selectors together (a union), specify the --rule-selector flag multiple times, such as \"--rule-selector eslint:Recommended --rule-selector retire-js:3\".\n\nRun `<%= config.bin %> <%= command.id %>  --rule-selector all` to list see the possible values for engine name, rule name, tags, and severity levels that you can use with this flag.",
        "name": "rule-selector",
        "summary": "Selection of rules, based on engine name, severity level, rule name, tag, or a combination of criteria separated by colons.",
        "default": [
          "Recommended"
        ],
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "config-file": {
        "char": "c",
        "description": "Code Analyzer has an internal default configuration for its rule and engine properties. If you want to override these defaults, you can create a Code Analyzer configuration file.\n\nWe recommend that you name your Code Analyzer configuration file \"code-analyzer.yml\" or \"code-analyzer.yaml\" and put it at the root of your workspace. You then don't need to use this flag when you run the `<%= command.id %>` command from the root of your workspace, because it automatically looks for either file in the current folder, and if found, applies its rule overrides and engine settings. If you want to name the file something else, or put it in an alternative folder, then you must specify this flag.\n\nTo help you get started, use the `code-analyzer config` command to create your first Code Analyzer configuration file. With it, you can change the severity of an existing rule, change a rule's tags, and so on. Then use this flag to specify the file so that the command takes your customizations into account.",
        "name": "config-file",
        "summary": "Path to the configuration file used to customize the engines and rules.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "view": {
        "char": "v",
        "description": "The format `table` is concise and shows minimal output, the format `detail` shows all available information.",
        "name": "view",
        "summary": "Format to display the rules in the terminal.",
        "default": "table",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "detail",
          "table"
        ],
        "type": "option"
      }
    },
    "id": "code-analyzer:rules",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "code-analyzer",
      "rules.js"
    ],
    "pluginAlias": "@salesforce/plugin-code-analyzer",
    "pluginName": "@salesforce/plugin-code-analyzer",
    "pluginType": "user",
    "aliasPermutations": [],
    "permutations": [
      "code-analyzer:rules",
      "rules:code-analyzer"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@3.27.0",
    "SF_ENV": "SF_ENV",
    "summary": "Analyze your code with a selection of rules to ensure good coding practices.",
    "description": "You can scan your codebase with the recommended rules. Or use flags to filter the rules based on engines (such as \"retire-js\" or \"eslint\"), rule names, tags, and more. \n\nIf you want to preview the list of rules before you actually run them, use the `code-analyzer rules` command, which also has the \"--rules-selector\", \"--workspace\", and \"--config-file\" flags that together define the list of rules to be run.\n\nWe're continually improving Salesforce Code Analyzer. Tell us what you think! Give feedback at http://sfdc.co/CodeAnalyzerFeedback.",
    "examples": [
      "Analyze code using the default behavior: analyze the files in the current folder (default workspace) using the Recommended rules; display the output in the terminal with the concise table view; and automatically apply rule or engine overrides if a \"code-analyzer.yml\" or \"code-analyzer.yaml\" file exists in the current folder:\n<%= config.bin %> <%= command.id %>",
      "The previous example is equivalent to this example:\n<%= config.bin %> <%= command.id %> --rule-selector Recommended --workspace . --view table --config-file ./code-analyzer.yml",
      "Analyze the files using the recommended \"eslint\" rules and show details of the violations:\n<%= config.bin %> <%= command.id %> --rule-selector eslint:Recommended --view detail",
      "Analyze the files using all the \"eslint\" rules:\n<%= config.bin %> <%= command.id %> --rule-selector eslint",
      "The previous example is equivalent to this example:\n<%= config.bin %> <%= command.id %>  --rule-selector eslint:all",
      "Analyze the files using all rules for all engines:\n<%= config.bin %> <%= command.id %> --rule-selector all",
      "Analyze files using the recommended \"retire-js\" rules analyze in a workspace that consists of all files in the folder \"./other-source\" and only the Apex class files (extension .cls) in the folder \"./force-app\":\n<%= config.bin %> <%= command.id %> --rule-selector retire-js:Recommended --workspace ./other-source --workspace ./force-app/**/*.cls",
      "Specify a custom configuration file and output the results to the \"results.csv\" file in CSV format; the commands fails if it finds a violation that exceeds the moderate severity level (3):\n<%= config.bin %> <%= command.id %> --config-file ./code-analyzer2.yml --output-file results.csv --severity-threshold 3",
      "Analyze the files using all the \"eslint\" engine rules that have a moderate severity (3) and the recommended \"retire-js\" engine rules with any severity:\n<%= config.bin %> <%= command.id %> --rule-selector eslint:3 --rule-selector retire-js:Recommended",
      "Analyze the files using only the \"getter-return\" rule of the \"eslint\" engine and any rule named \"no-inner-declarations\" from any engine:\n<%= config.bin %> <%= command.id %> --rule-selector eslint:getter-return --rule-selector no-inner-declarations"
    ],
    "state": "Beta",
    "flags": {
      "workspace": {
        "char": "w",
        "description": "Typically, a workspace is a single project folder that contains all your files. But it can also consist of one or more folders, one or more files, and use glob patterns (wildcards). If you specify this flag multiple times, then your workspace is the sum of the files and folders.",
        "name": "workspace",
        "summary": "Set of files you want to include in the code analysis.",
        "default": [
          "."
        ],
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "path-start": {
        "char": "s",
        "description": "If you don't specify this flag, then any path-based analysis rules automatically discover and use all starting points found in your workspace. Use this flag to restrict the starting points to only those you want in your code analysis. \n\nThis flag only applies to path-based analysis rules, which are of type DataFlow and Flow. These types of rules are only available from some engines, like the Salesforce Graph Engine, \"sfge\" for example.\n\nIf you specify a file or a folder as your starting point, then the analysis uses only the methods that have public or global accessibility. \n\nTo specify individual methods as a starting point, use the syntax \"<file>#methodName\" to select a single method or \"<file>#methodName1;methodName2\" to select multiple methods. For example, \"SomeClass.cls#method1\" (single method) or \"SomeClass.cls#method1;method2\" (multiple methods).\n\nYou can use glob patterns (wildcards) only when specifying files and folders; you can't use glob patterns when specifying individual methods.",
        "hidden": true,
        "name": "path-start",
        "summary": "Starting points within your workspace to restrict any path-based analysis rules to.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "rule-selector": {
        "char": "r",
        "description": "Use the --rule-selector flag to select the list of rules to run based on specific criteria.  For example, you can select by engine, such as the rules associated with the \"retire-js\" or \"eslint\" engine. Or select by the severity of the rules, such as high or moderate. You can also select rules using tag values or rule names. Every rule has a name, which is unique within the scope of an engine. Most rules have tags, although it's not required. An example of a tag is \"Recommended\".\n\nYou can combine different criteria using colons to further filter the list; the colon works as an intersection.  For example, \"--rule-selector eslint:Security\" runs rules associated only with the \"eslint\" engine that have the Security tag.  The flag \"--rule-selector eslint:Security:3\" flag runs the \"eslint\" rules that have the Security tag and moderate severity (3). To add multiple rule selectors together (a union), specify the --rule-selector flag multiple times, such as \"--rule-selector eslint:Recommended --rule-selector retire-js:3\".\n\nRun `<%= config.bin %> code-analyzer rules --rule-selector all` to see the possible values for engine name, rule name, tags, and severity levels that you can use with this flag.",
        "name": "rule-selector",
        "summary": "Selection of rules, based on engine name, severity level, rule name, tag, or a combination of criteria separated by colons.",
        "default": [
          "Recommended"
        ],
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "severity-threshold": {
        "char": "t",
        "description": "You can specify either a number (2) or its equivalent string (\"High\").",
        "name": "severity-threshold",
        "summary": "Severity level of a found violation that must be met or exceeded to cause this command to fail with a non-zero exit code.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "view": {
        "char": "v",
        "description": "The format `table` is concise and shows minimal output, the format `detail` shows all available information.\n\nIf you specify neither --view nor --output-file, then the default table view is shown. If you specify --output-file but not --view, only summary information is shown.",
        "name": "view",
        "summary": "Format to display the command results in the terminal.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "detail",
          "table"
        ],
        "type": "option"
      },
      "output-file": {
        "char": "f",
        "description": "If you don't specify this flag, the command outputs the results in the terminal. Use this flag to print the results to a file; the format of the results depends on the extension you provide. For example, \"--output-file results.csv\" creates a comma-separated values file. You can specify one of these extensions:\n\n- .csv\n- .html or .htm\n- .json\n- .sarif or .sarif.json\n- .xml\n\nTo output the results to multiple files, specify this flag multiple times.  For example: \"--output-file ./out/results.json --output-file ./out/report.html\" creates a JSON results file and an HTML file in the \"./out\" folder.",
        "name": "output-file",
        "summary": "Output file that contains the analysis results. The file format depends on the extension you specify, such as .csv, .html, .xml, and so on.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "config-file": {
        "char": "c",
        "description": "Code Analyzer has an internal default configuration for its rule and engine properties. If you want to override these defaults, you can create a Code Analyzer configuration file.\n\nWe recommend that you name your Code Analyzer configuration file \"code-analyzer.yml\" or \"code-analyzer.yaml\" and put it at the root of your workspace. You then don't need to use this flag when you run the `<%= command.id %>` command from the root of your workspace, because it automatically looks for either file in the current folder, and if found, applies its rule overrides and engine settings. If you want to name the file something else, or put it in an alternative folder, then you must specify this flag.\n\nTo help you get started, use the `code-analyzer config` command to create your first Code Analyzer configuration file. With it, you can change the severity of an existing rule, change a rule's tags, and so on. Then use this flag to specify the file so that the command takes your customizations into account.",
        "name": "config-file",
        "summary": "Path to the configuration file used to customize the engines and rules.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "code-analyzer:run",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "code-analyzer",
      "run.js"
    ],
    "pluginAlias": "@salesforce/plugin-code-analyzer",
    "pluginName": "@salesforce/plugin-code-analyzer",
    "pluginType": "user",
    "aliasPermutations": [],
    "permutations": [
      "code-analyzer:run",
      "run:code-analyzer"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "description": "List all sf commands.",
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "columns": {
        "char": "c",
        "description": "Only show provided columns (comma-separated).",
        "exclusive": [
          "tree"
        ],
        "name": "columns",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "options": [
          "id",
          "plugin",
          "summary",
          "type"
        ],
        "type": "option"
      },
      "deprecated": {
        "description": "Show deprecated commands.",
        "name": "deprecated",
        "allowNo": false,
        "type": "boolean"
      },
      "extended": {
        "char": "x",
        "description": "Show extra columns.",
        "exclusive": [
          "tree"
        ],
        "name": "extended",
        "allowNo": false,
        "type": "boolean"
      },
      "hidden": {
        "description": "Show hidden commands.",
        "name": "hidden",
        "allowNo": false,
        "type": "boolean"
      },
      "no-truncate": {
        "description": "Do not truncate output.",
        "exclusive": [
          "tree"
        ],
        "name": "no-truncate",
        "allowNo": false,
        "type": "boolean"
      },
      "sort": {
        "description": "Property to sort by.",
        "exclusive": [
          "tree"
        ],
        "name": "sort",
        "default": "id",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "id",
          "plugin",
          "summary",
          "type"
        ],
        "type": "option"
      },
      "tree": {
        "description": "Show tree of commands.",
        "name": "tree",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "commands",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "commands.js"
    ],
    "pluginAlias": "@oclif/plugin-commands",
    "pluginName": "@oclif/plugin-commands",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "commands"
    ]
  },
  {
    "aliases": [
      "force:community:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": false,
    "_base": "@oclif/core@4.0.34",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "deprecateAliases": true,
    "summary": "Create an Experience Cloud site using a template.",
    "description": "Run the \"community list template\" command to see the templates available in your org. See 'Which Experience Cloud Template Should I Use?' in Salesforce Help for more information about the different template types available. (https://help.salesforce.com/s/articleView?id=sf.siteforce_commtemp_intro.htm&type=5)\n\nWhen you create a site with the Build Your Own (LWR) template, you must also specify the AuthenticationType value using the format templateParams.AuthenticationType=value, where value is AUTHENTICATED or AUTHENTICATED_WITH_PUBLIC_ACCESS_ENABLED. Name and values are case-sensitive. See 'DigitalExperienceBundle' in the Metadata API Developer Guide for more information. (https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_digitalexperiencebundle.htm)\n\nThe site creation process is an async job that generates a jobId. To check the site creation status, query the BackgroundOperation object and enter the jobId as the Id. See ‘BackgroundOperation’ in the Object Reference for the Salesforce Platform for more information. (https://developer.salesforce.com/docs/atlas.en-us.object_reference.meta/object_reference/sforce_api_objects_backgroundoperation.htm)\n\nIf the job doesn’t complete within 10 minutes, it times out. You receive an error message and must restart the site creation process. Completed jobs expire after 24 hours and are removed from the database.\n\nWhen you run this command, it creates the site in preview status, which means that the site isn't yet live. After you finish building your site, you can make it live.\n\nIf you have an Experience Builder site, publish the site using the \"community publish\" command to make it live.\n\nIf you have a Salesforce Tabs + Visualforce site, to activate the site and make it live, update the status field of the Network type in Metadata API. (https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_network.htm) Alternatively, in Experience Workspaces, go to Administration | Settings, and click Activate.\n\nFor Experience Builder sites, activating the site sends a welcome email to site members.",
    "examples": [
      "Create an Experience Cloud site using template 'Customer Service' and URL path prefix 'customers':\n<%= config.bin %> <%= command.id %> --name 'My Customer Site' --template-name 'Customer Service' --url-path-prefix customers --description 'My customer site'",
      "Create a site using 'Partner Central' template:\n<%= config.bin %> <%= command.id %> --name partnercentral --template-name 'Partner Central' --url-path-prefix partners",
      "Create a site using the 'Build Your Own (LWR)' template with authentication type of UNAUTHENTICATED:\n<%= config.bin %> <%= command.id %> --name lwrsite --template-name 'Build Your Own (LWR)' --url-path-prefix lwrsite templateParams.AuthenticationType=UNAUTHENTICATED"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "char": "n",
        "name": "name",
        "required": true,
        "summary": "Name of the site to create.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "template-name": {
        "aliases": [
          "templatename"
        ],
        "char": "t",
        "deprecateAliases": true,
        "description": "An example of a template is Customer Service. Run the \"community template list\" command to see which templates are available in your org.",
        "name": "template-name",
        "required": true,
        "summary": "Template to use to create a site.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "url-path-prefix": {
        "aliases": [
          "urlpathprefix"
        ],
        "char": "p",
        "deprecateAliases": true,
        "description": "For example, if your domain name is https://MyDomainName.my.site.com and you create a customer site, enter 'customers' to create the unique URL https://MyDomainName.my.site.com/customers.",
        "name": "url-path-prefix",
        "summary": "URL to append to the domain created when Digital Experiences was enabled for this org.",
        "default": "",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "description": {
        "char": "d",
        "description": "The description displays in Digital Experiences - All Sites in Setup and helps with site identification.",
        "name": "description",
        "summary": "Description of the site.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "community:create",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "community",
      "create.js"
    ],
    "pluginAlias": "@salesforce/plugin-community",
    "pluginName": "@salesforce/plugin-community",
    "pluginType": "user",
    "aliasPermutations": [
      "force:community:create",
      "community:force:create",
      "community:create:force",
      "force:create:community",
      "create:force:community",
      "create:community:force"
    ],
    "permutations": [
      "community:create",
      "create:community"
    ]
  },
  {
    "aliases": [
      "force:community:template:list"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.34",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "deprecateAliases": true,
    "summary": "Retrieve the list of templates available in your org.",
    "description": "See 'Which Experience Cloud Template Should I Use?' (https://help.salesforce.com/s/articleView?id=sf.siteforce_commtemp_intro.htm&type=5) in Salesforce Help for more information about the different template types available for Experience Cloud.",
    "examples": [
      "Retrieve the template list from an org with alias my-scratch-org:\n<%= config.bin %> <%= command.id %> --target-org my-scratch-org"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "community:list:template",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "community",
      "list",
      "template.js"
    ],
    "pluginAlias": "@salesforce/plugin-community",
    "pluginName": "@salesforce/plugin-community",
    "pluginType": "user",
    "aliasPermutations": [
      "force:community:template:list",
      "community:force:template:list",
      "community:template:force:list",
      "community:template:list:force",
      "force:template:community:list",
      "template:force:community:list",
      "template:community:force:list",
      "template:community:list:force",
      "force:template:list:community",
      "template:force:list:community",
      "template:list:force:community",
      "template:list:community:force",
      "force:community:list:template",
      "community:force:list:template",
      "community:list:force:template",
      "community:list:template:force",
      "force:list:community:template",
      "list:force:community:template",
      "list:community:force:template",
      "list:community:template:force",
      "force:list:template:community",
      "list:force:template:community",
      "list:template:force:community",
      "list:template:community:force"
    ],
    "permutations": [
      "community:list:template",
      "list:community:template",
      "list:template:community",
      "community:template:list",
      "template:community:list",
      "template:list:community"
    ]
  },
  {
    "aliases": [
      "force:community:publish"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.34",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "deprecateAliases": true,
    "summary": "Publish an Experience Builder site to make it live.",
    "description": "Each time you publish a site, you update the live site with the most recent updates. When you publish an Experience Builder site for the first time, you make the site's URL live and enable login access for site members.\n\nIn addition to publishing, you must activate a site to send a welcome email to all site members. Activation is also required to set up SEO for Experience Builder sites. To activate a site, update the status field of the Network type in Metadata API. (https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_network.htm) Alternatively, in Experience Workspaces, go to Administration | Settings, and click Activate.\n\nAn email notification informs you when your changes are live on the published site. The site publish process is an async job that generates a jobId. To check the site publish status manually, query the BackgroundOperation object and enter the jobId as the Id. See ‘BackgroundOperation’ in the Object Reference for the Salesforce Platform for more information. (https://developer.salesforce.com/docs/atlas.en-us.object_reference.meta/object_reference/sforce_api_objects_backgroundoperation.htm)\n\nIf the job doesn’t complete within 15 minutes, it times out. You receive an error message and must restart the site publish process. Completed jobs expire after 24 hours and are removed from the database.",
    "examples": [
      "Publish the Experience Builder site with name \"My Customer Site':\n<%= config.bin %> <%= command.id %> --name 'My Customer Site'"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "char": "n",
        "name": "name",
        "required": true,
        "summary": "Name of the Experience Builder site to publish.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "community:publish",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "community",
      "publish.js"
    ],
    "pluginAlias": "@salesforce/plugin-community",
    "pluginName": "@salesforce/plugin-community",
    "pluginType": "user",
    "aliasPermutations": [
      "force:community:publish",
      "community:force:publish",
      "community:publish:force",
      "force:publish:community",
      "publish:force:community",
      "publish:community:force"
    ],
    "permutations": [
      "community:publish",
      "publish:community"
    ]
  },
  {
    "aliases": [
      "force:config:get"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": false,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "description": "Run \"sf config list\" to see the configuration variables you've already set and their level (local or global).\n\nRun \"sf config set\" to set a configuration variable. For the full list of available configuration variables, see https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_dev_cli_config_values.htm.",
    "summary": "Get the value of a configuration variable.",
    "examples": [
      "Get the value of the \"target-org\" configuration variable.\n<%= config.bin %> <%= command.id %> target-org",
      "Get multiple configuration variables and display whether they're set locally or globally:\n<%= config.bin %> <%= command.id %> target-org api-version --verbose"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Display whether the configuration variables are set locally or globally.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "configurationVariablesSection": {
      "header": "CONFIGURATION VARIABLES",
      "body": [
        {
          "name": "org-instance-url",
          "description": "URL of the Salesforce instance hosting your org. Default: https://login.salesforce.com."
        },
        {
          "name": "org-api-version",
          "description": "API version of your project. Default: API version of your Dev Hub org."
        },
        {
          "name": "target-dev-hub",
          "description": "Username or alias of your default Dev Hub org. (sf only)"
        },
        {
          "name": "target-org",
          "description": "Username or alias of the org that all commands run against by default. (sf only)"
        },
        {
          "name": "org-isv-debugger-sid",
          "description": "ISV debugger SID."
        },
        {
          "name": "org-isv-debugger-url",
          "description": "ISV debugger URL."
        },
        {
          "name": "org-custom-metadata-templates",
          "description": "A valid repository URL or directory for the custom org metadata templates."
        },
        {
          "name": "org-max-query-limit",
          "description": "Maximum number of Salesforce records returned by a CLI command. Default: 10,000."
        },
        {
          "name": "org-capitalize-record-types",
          "description": "Whether record types are capitalized on scratch org creation."
        }
      ]
    },
    "id": "config:get",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "config",
      "get.js"
    ],
    "pluginAlias": "@salesforce/plugin-settings",
    "pluginName": "@salesforce/plugin-settings",
    "pluginType": "core",
    "aliasPermutations": [
      "force:config:get",
      "config:force:get",
      "config:get:force",
      "force:get:config",
      "get:force:config",
      "get:config:force"
    ],
    "permutations": [
      "config:get",
      "get:config"
    ]
  },
  {
    "aliases": [
      "force:config:list"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "description": "A config variable can be global or local, depending on whether you used the --global flag when you set it. Local config variables apply only to the current project and override global config variables, which apply to all projects.  You can set all config variables as environment variables. Environment variables override their equivalent local and global config variables.\n\nThe output of this command takes into account your current context. For example, let's say you run this command from a Salesforce DX project in which you've locally set the \"target-org\" config variable. The command displays the local value, even if you've also set \"target-org\" globally. If you haven't set the config variable locally, then the global value is displayed, if set. If you set the SF_TARGET_ORG environment variable, it's displayed as such and overrides any locally or globally set \"target-org\" config variable. \n\nFor the full list of available configuration variables, see https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_dev_cli_config_values.htm.",
    "summary": "List the configuration variables that you've previously set.",
    "examples": [
      "List the global and local configuration variables that apply to your current context:\n$ <%= config.bin %> <%= command.id %>"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "config:list",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "config",
      "list.js"
    ],
    "pluginAlias": "@salesforce/plugin-settings",
    "pluginName": "@salesforce/plugin-settings",
    "pluginType": "core",
    "aliasPermutations": [
      "force:config:list",
      "config:force:list",
      "config:list:force",
      "force:list:config",
      "list:force:config",
      "list:config:force"
    ],
    "permutations": [
      "config:list",
      "list:config"
    ]
  },
  {
    "aliases": [
      "force:config:set"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": false,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "description": "Use configuration variables to set CLI defaults, such as your default org or the API version you want the CLI to use. For example, if you set the \"target-org\" configuration variable, you don't need to specify it as a \"sf deploy metadata\" flag if you're deploying to your default org.\n\nLocal configuration variables apply only to your current project. Global variables, specified with the --global flag, apply in any Salesforce DX project.\n\nThe resolution order if you've set a flag value in multiple ways is as follows:\n\n    1. Flag value specified at the command line.\n    2. Local (project-level) configuration variable.\n    3. Global configuration variable.\n\nRun \"sf config list\" to see the configuration variables you've already set and their level (local or global).\n\nIf you're setting a single config variable, you don't need to use an equal sign between the variable and value. But you must use the equal sign if setting multiple config variables.\n\nFor the full list of available configuration variables, see https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_dev_cli_config_values.htm.",
    "summary": "Set one or more configuration variables, such as your default org.",
    "examples": [
      "Set the local target-org configuration variable to an org username:\n<%= config.bin %> <%= command.id %> target-org me@my.org",
      "Set the local target-org configuration variable to an alias:\n<%= config.bin %> <%= command.id %> target-org my-scratch-org",
      "Set the global target-org and target-dev-hub configuration variables using aliases:\n<%= config.bin %> <%= command.id %> --global target-org=my-scratch-org target-dev-hub=my-dev-hub"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "global": {
        "char": "g",
        "name": "global",
        "summary": "Set the configuration variables globally, so they can be used from any Salesforce DX project.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "configurationVariablesSection": {
      "header": "CONFIGURATION VARIABLES",
      "body": [
        {
          "name": "org-instance-url",
          "description": "URL of the Salesforce instance hosting your org. Default: https://login.salesforce.com."
        },
        {
          "name": "org-api-version",
          "description": "API version of your project. Default: API version of your Dev Hub org."
        },
        {
          "name": "target-dev-hub",
          "description": "Username or alias of your default Dev Hub org. (sf only)"
        },
        {
          "name": "target-org",
          "description": "Username or alias of the org that all commands run against by default. (sf only)"
        },
        {
          "name": "org-isv-debugger-sid",
          "description": "ISV debugger SID."
        },
        {
          "name": "org-isv-debugger-url",
          "description": "ISV debugger URL."
        },
        {
          "name": "org-custom-metadata-templates",
          "description": "A valid repository URL or directory for the custom org metadata templates."
        },
        {
          "name": "org-max-query-limit",
          "description": "Maximum number of Salesforce records returned by a CLI command. Default: 10,000."
        },
        {
          "name": "org-capitalize-record-types",
          "description": "Whether record types are capitalized on scratch org creation."
        }
      ]
    },
    "id": "config:set",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "config",
      "set.js"
    ],
    "pluginAlias": "@salesforce/plugin-settings",
    "pluginName": "@salesforce/plugin-settings",
    "pluginType": "core",
    "aliasPermutations": [
      "force:config:set",
      "config:force:set",
      "config:set:force",
      "force:set:config",
      "set:force:config",
      "set:config:force"
    ],
    "permutations": [
      "config:set",
      "set:config"
    ]
  },
  {
    "aliases": [
      "force:config:unset"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": false,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "description": "Local configuration variables apply only to your current project. Global configuration variables apply in any Salesforce DX project.\n\nFor the full list of available configuration variables, see https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_dev_cli_config_values.htm.",
    "summary": "Unset local or global configuration variables.",
    "examples": [
      "Unset the local \"target-org\" configuration variable:\n<%= config.bin %> <%= command.id %> target-org",
      "Unset multiple configuration variables globally:\n<%= config.bin %> <%= command.id %> target-org api-version --global"
    ],
    "deprecateAliases": true,
    "configurationVariablesSection": {
      "header": "CONFIGURATION VARIABLES",
      "body": [
        {
          "name": "org-instance-url",
          "description": "URL of the Salesforce instance hosting your org. Default: https://login.salesforce.com."
        },
        {
          "name": "org-api-version",
          "description": "API version of your project. Default: API version of your Dev Hub org."
        },
        {
          "name": "target-dev-hub",
          "description": "Username or alias of your default Dev Hub org. (sf only)"
        },
        {
          "name": "target-org",
          "description": "Username or alias of the org that all commands run against by default. (sf only)"
        },
        {
          "name": "org-isv-debugger-sid",
          "description": "ISV debugger SID."
        },
        {
          "name": "org-isv-debugger-url",
          "description": "ISV debugger URL."
        },
        {
          "name": "org-custom-metadata-templates",
          "description": "A valid repository URL or directory for the custom org metadata templates."
        },
        {
          "name": "org-max-query-limit",
          "description": "Maximum number of Salesforce records returned by a CLI command. Default: 10,000."
        },
        {
          "name": "org-capitalize-record-types",
          "description": "Whether record types are capitalized on scratch org creation."
        }
      ]
    },
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "global": {
        "char": "g",
        "name": "global",
        "summary": "Unset the configuration variables globally.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "config:unset",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "config",
      "unset.js"
    ],
    "pluginAlias": "@salesforce/plugin-settings",
    "pluginName": "@salesforce/plugin-settings",
    "pluginType": "core",
    "aliasPermutations": [
      "force:config:unset",
      "config:force:unset",
      "config:unset:force",
      "force:unset:config",
      "unset:force:config",
      "unset:config:force"
    ],
    "permutations": [
      "config:unset",
      "unset:config"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Get the results of a bulk ingest job that you previously ran.",
    "description": "Use this command to get the complete results after running one of the CLI commands that uses Bulk API 2.0 to ingest (import, update, upsert, or delete) large datasets to your org, such as \"data import bulk\". The previously-run bulk command must have completed; if it's still processing, run the corresponding resume command first, such as \"data import resume.\" Make note of the job ID of the previous bulk command because you use it to run this command. \n\nYou can also use this command to get results from running a bulk ingest job with a different tool, such as Data Loader, as long as you have the job ID. For information on Data Loader, see https://developer.salesforce.com/docs/atlas.en-us.dataLoader.meta/dataLoader/data_loader_intro.htm. \n\nThis command first displays the status of the previous bulk job, the operation that was executed in the org (such as insert or hard delete), and the updated Salesforce object. The command then displays how many records were processed in total, and how many were successful or failed. Finally, the output displays the names of the generated CSV-formatted files that contain the specific results for each ingested record. Depending on the success or failure of the bulk command, the results files can include the IDs of inserted records or the specific errors. When possible, if the ingest job failed or was aborted, you also get a CSV file with the unprocessed results.",
    "examples": [
      "Get results from a bulk ingest job; use the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --job-id 7507i000fake341G --target-org my-scratch"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "job-id": {
        "char": "i",
        "name": "job-id",
        "required": true,
        "summary": "Job ID of the bulk job.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "data:bulk:results",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "bulk",
      "results.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "data:bulk:results",
      "bulk:data:results",
      "bulk:results:data",
      "data:results:bulk",
      "results:data:bulk",
      "results:bulk:data"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Upload a local file to an org.",
    "description": "This command always creates a new file in the org; you can't update an existing file. After a successful upload, the command displays the ID of the new ContentDocument record which represents the uploaded file.\n\nBy default, the uploaded file isn't attached to a record; in the Salesforce UI the file shows up in the Files tab. You can optionally attach the file to an existing record, such as an account, as long as you know its record ID.\n\nYou can also give the file a new name after it's been uploaded; by default its name in the org is the same as the local file name.",
    "examples": [
      "Upload the local file \"resources/astro.png\" to your default org:\n<%= config.bin %> <%= command.id %> --file resources/astro.png",
      "Give the file a different filename after it's uploaded to the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --file resources/astro.png --title AstroOnABoat.png --target-org my-scratch",
      "Attach the file to a record in the org:\n<%= config.bin %> <%= command.id %> --file path/to/astro.png --parent-id a03fakeLoJWPIA3"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "title": {
        "char": "t",
        "name": "title",
        "required": false,
        "summary": "New title given to the file (ContentDocument) after it's uploaded.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "file": {
        "char": "f",
        "name": "file",
        "required": true,
        "summary": "Path of file to upload.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "parent-id": {
        "char": "i",
        "name": "parent-id",
        "summary": "ID of the record to attach the file to.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "data:create:file",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "create",
      "file.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "data:create:file",
      "create:data:file",
      "create:file:data",
      "data:file:create",
      "file:data:create",
      "file:create:data"
    ]
  },
  {
    "aliases": [
      "force:data:record:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Create and insert a record into a Salesforce or Tooling API object.",
    "description": "You must specify a value for all required fields of the object.\n\nWhen specifying fields, use the format <fieldName>=<value>. Enclose all field-value pairs in one set of double quotation marks, delimited by spaces. Enclose values that contain spaces in single quotes.\n\nThis command inserts a record into Salesforce objects by default. Use the --use-tooling-api flag to insert into a Tooling API object.",
    "examples": [
      "Insert a record into the Account object of your default org; only the required Name field has a value:\n<%= config.bin %> <%= command.id %> --sobject Account --values \"Name=Acme\"",
      "Insert an Account record with values for two fields, one value contains a space; the command uses the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --sobject Account --values \"Name='Universal Containers' Website=www.example.com\" --target-org my-scratch",
      "Insert a record into the Tooling API object TraceFlag:\n<%= config.bin %> <%= command.id %> --use-tooling-api --sobject TraceFlag --values \"DebugLevelId=7dl170000008U36AAE StartDate=2022-12-15T00:26:04.000+0000 ExpirationDate=2022-12-15T00:56:04.000+0000 LogType=CLASS_TRACING TracedEntityId=01p17000000R6bLAAS\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sobject": {
        "aliases": [
          "sobjecttype"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "sobject",
        "required": true,
        "summary": "API name of the Salesforce or Tooling API object that you're inserting a record into.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "values": {
        "char": "v",
        "name": "values",
        "required": true,
        "summary": "Values for the flags in the form <fieldName>=<value>, separate multiple pairs with spaces.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-tooling-api": {
        "aliases": [
          "usetoolingapi"
        ],
        "char": "t",
        "deprecateAliases": true,
        "name": "use-tooling-api",
        "summary": "Use Tooling API so you can insert a record in a Tooling API object.",
        "allowNo": false,
        "type": "boolean"
      },
      "perflog": {
        "deprecated": {
          "version": "57"
        },
        "description": "Gets data on API performance metrics from the server. The data is stored in $HOME/.sfdx/apiPerformanceLog.json.",
        "hidden": true,
        "name": "perflog",
        "summary": "Get API performance data.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "data:create:record",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "create",
      "record.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [
      "force:data:record:create",
      "data:force:record:create",
      "data:record:force:create",
      "data:record:create:force",
      "force:record:data:create",
      "record:force:data:create",
      "record:data:force:create",
      "record:data:create:force",
      "force:record:create:data",
      "record:force:create:data",
      "record:create:force:data",
      "record:create:data:force",
      "force:data:create:record",
      "data:force:create:record",
      "data:create:force:record",
      "data:create:record:force",
      "force:create:data:record",
      "create:force:data:record",
      "create:data:force:record",
      "create:data:record:force",
      "force:create:record:data",
      "create:force:record:data",
      "create:record:force:data",
      "create:record:data:force"
    ],
    "permutations": [
      "data:create:record",
      "create:data:record",
      "create:record:data",
      "data:record:create",
      "record:data:create",
      "record:create:data"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "examples": [
      "Bulk delete Account records from your default org using the list of IDs in the \"files/delete.csv\" file:\n<%= config.bin %> <%= command.id %> --sobject Account --file files/delete.csv",
      "Bulk delete records from a custom object in an org with alias my-scratch and wait 5 minutes for the command to complete:\n<%= config.bin %> <%= command.id %> --sobject MyObject__c --file files/delete.csv --wait 5 --target-org my-scratch"
    ],
    "summary": "Bulk delete records from an org using a CSV file. Uses Bulk API 2.0.",
    "description": "The CSV file must have only one column (\"Id\") and then the list of record IDs you want to delete, one ID per line.\n\nWhen you execute this command, it starts a job, displays the ID, and then immediately returns control of the terminal to you by default. If you prefer to wait, set the --wait flag to the number of minutes; if it times out, the command outputs the IDs. Use the job ID to check the status of the job with the \"sf data delete resume\" command.",
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "file": {
        "aliases": [
          "csvfile"
        ],
        "char": "f",
        "deprecateAliases": true,
        "name": "file",
        "required": true,
        "summary": "CSV file that contains the IDs of the records to update or delete.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sobject": {
        "aliases": [
          "sobjecttype"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "sobject",
        "required": true,
        "summary": "API name of the Salesforce object, either standard or custom, that you want to update or delete records from.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "exclusive": [
          "async"
        ],
        "name": "wait",
        "summary": "Number of minutes to wait for the command to complete before displaying the results.",
        "default": "0 minutes",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "async": {
        "char": "a",
        "exclusive": [
          "wait"
        ],
        "name": "async",
        "summary": "Run the command asynchronously.",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "deprecated": {
          "message": "The --verbose flag is deprecated and will be removed after March 2025, use \"sf data bulk results\" to get job results instead."
        },
        "name": "verbose",
        "summary": "Print verbose output of failed records if result is available.",
        "allowNo": false,
        "type": "boolean"
      },
      "line-ending": {
        "dependsOn": [
          "file"
        ],
        "name": "line-ending",
        "summary": "Line ending used in the CSV file. Default value on Windows is `CRLF`; on macOS and Linux it's `LF`.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "CRLF",
          "LF"
        ],
        "type": "option"
      },
      "hard-delete": {
        "description": "You must have the \"Bulk API Hard Delete\" system permission to use this flag. The permission is disabled by default and can be enabled only by a system administrator.",
        "name": "hard-delete",
        "summary": "Mark the records as immediately eligible for deletion by your org. If you don't specify this flag, the deleted records go into the Recycle Bin.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "data:delete:bulk",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "delete",
      "bulk.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "data:delete:bulk",
      "delete:data:bulk",
      "delete:bulk:data",
      "data:bulk:delete",
      "bulk:data:delete",
      "bulk:delete:data"
    ]
  },
  {
    "aliases": [
      "force:data:record:delete"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Deletes a single record from a Salesforce or Tooling API object.",
    "description": "Specify the record you want to delete with either its ID or with a list of field-value pairs that identify the record. If your list of fields identifies more than one record, the delete fails; the error displays how many records were found.\n\nWhen specifying field-value pairs, use the format <fieldName>=<value>. Enclose all field-value pairs in one set of double quotation marks, delimited by spaces. Enclose values that contain spaces in single quotes.\n\nThis command deletes a record from Salesforce objects by default. Use the --use-tooling-api flag to delete from a Tooling API object.",
    "examples": [
      "Delete a record from Account with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --sobject Account --record-id 00180XX",
      "Delete a record from Account whose name equals \"Acme\":\n<%= config.bin %> <%= command.id %> --sobject Account --where \"Name=Acme\"",
      "Delete a record from Account identified with two field values, one that contains a space; the command uses the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --sobject Account --where \"Name='Universal Containers' Phone='(123) 456-7890'\" --target-org myscratch",
      "Delete a record from the Tooling API object TraceFlag with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --use-tooling-api --sobject TraceFlag --record-id 7tf8c"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sobject": {
        "aliases": [
          "sobjecttype"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "sobject",
        "required": true,
        "summary": "API name of the Salesforce or Tooling API object that you're deleting a record from.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "record-id": {
        "aliases": [
          "sobjectid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "record-id",
        "summary": "ID of the record you’re deleting.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "where": {
        "char": "w",
        "name": "where",
        "summary": "List of <fieldName>=<value> pairs that identify the record you want to delete.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-tooling-api": {
        "aliases": [
          "usetoolingapi"
        ],
        "char": "t",
        "deprecateAliases": true,
        "name": "use-tooling-api",
        "summary": "Use Tooling API so you can delete a record from a Tooling API object.",
        "allowNo": false,
        "type": "boolean"
      },
      "perflog": {
        "deprecated": {
          "version": "57"
        },
        "description": "Gets data on API performance metrics from the server. The data is stored in $HOME/.sfdx/apiPerformanceLog.json.",
        "hidden": true,
        "name": "perflog",
        "summary": "Get API performance data.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "data:delete:record",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "delete",
      "record.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [
      "force:data:record:delete",
      "data:force:record:delete",
      "data:record:force:delete",
      "data:record:delete:force",
      "force:record:data:delete",
      "record:force:data:delete",
      "record:data:force:delete",
      "record:data:delete:force",
      "force:record:delete:data",
      "record:force:delete:data",
      "record:delete:force:data",
      "record:delete:data:force",
      "force:data:delete:record",
      "data:force:delete:record",
      "data:delete:force:record",
      "data:delete:record:force",
      "force:delete:data:record",
      "delete:force:data:record",
      "delete:data:force:record",
      "delete:data:record:force",
      "force:delete:record:data",
      "delete:force:record:data",
      "delete:record:force:data",
      "delete:record:data:force"
    ],
    "permutations": [
      "data:delete:record",
      "delete:data:record",
      "delete:record:data",
      "data:record:delete",
      "record:data:delete",
      "record:delete:data"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Resume a bulk delete job that you previously started. Uses Bulk API 2.0.",
    "description": "The command uses the job ID returned by the \"sf data delete bulk\" command or the most recently-run bulk delete job.",
    "examples": [
      "Resume a bulk delete job from your default org using an ID:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA",
      "Resume the most recently run bulk delete job for an org with alias my-scratch:\n<%= config.bin %> <%= command.id %> --use-most-recent --target-org my-scratch"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "summary": "Username or alias of the target org. Not required if the \"target-org\" configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "job-id": {
        "aliases": [
          "jobid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "job-id",
        "summary": "ID of the job you want to resume.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-most-recent": {
        "exclusive": [
          "job-id"
        ],
        "name": "use-most-recent",
        "summary": "Use the ID of the most recently-run bulk job.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "name": "wait",
        "summary": "Number of minutes to wait for the command to complete before displaying the results.",
        "default": "5 minutes",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "data:delete:resume",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "delete",
      "resume.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "data:delete:resume",
      "delete:data:resume",
      "delete:resume:data",
      "data:resume:delete",
      "resume:data:delete",
      "resume:delete:data"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Bulk export records from an org into a file using a SOQL query. Uses Bulk API 2.0.",
    "description": "You can use this command to export millions of records from an org, either to migrate data or to back it up.\n\nUse a SOQL query to specify the fields of a standard or custom object that you want to export. Specify the SOQL query either at the command line with the --query flag or read it from a file with the --query-file flag; you can't specify both flags. The --output-file flag is required, which means you can only write the records to a file, in either CSV or JSON format. \n\nBulk exports can take a while, depending on how many records are returned by the SOQL query. If the command times out, or you specified the --async flag, the command displays the job ID. To see the status and get the results of the job, run \"sf data export resume\" and pass the job ID to the --job-id flag.\n\nIMPORTANT: This command uses Bulk API 2.0, which limits the type of SOQL queries you can run. For example, you can't use aggregate functions such as count(). For the complete list of limitations, see the \"SOQL Considerations\" section in the \"Bulk API 2.0 and Bulk API Developer Guide\" (https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/queries.htm).",
    "examples": [
      "Export the Id, Name, and Account.Name fields of the Contact object into a CSV-formatted file; if the export doesn't complete in 10 minutes, the command ends and displays a job ID. Use the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --query \"SELECT Id, Name, Account.Name FROM Contact\" --output-file export-accounts.csv --wait 10 --target-org my-scratch",
      "Similar to previous example, but use the default org, export the records into a JSON-formatted file, and include records that have been soft deleted:\n<%= config.bin %> <%= command.id %> --query \"SELECT Id, Name, Account.Name FROM Contact\" --output-file export-accounts.json --result-format json --wait 10 --all-rows",
      "Export asynchronously; the command immediately returns a job ID that you then pass to the \"sf data export resume\" command:\n<%= config.bin %> <%= command.id %> --query \"SELECT Id, Name, Account.Name FROM Contact\" --output-file export-accounts.json --result-format json --async"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "exclusive": [
          "async"
        ],
        "name": "wait",
        "summary": "Time to wait for the command to finish, in minutes.",
        "hasDynamicHelp": true,
        "helpValue": "<minutes>",
        "multiple": false,
        "type": "option"
      },
      "async": {
        "exclusive": [
          "wait"
        ],
        "name": "async",
        "summary": "Don't wait for the job to complete.",
        "allowNo": false,
        "type": "boolean"
      },
      "query": {
        "char": "q",
        "exclusive": [
          "query-file"
        ],
        "name": "query",
        "summary": "SOQL query to execute.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "query-file": {
        "exclusive": [
          "query"
        ],
        "name": "query-file",
        "summary": "File that contains the SOQL query.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "all-rows": {
        "name": "all-rows",
        "summary": "Include records that have been soft-deleted due to a merge or delete. By default, deleted records are not returned.",
        "allowNo": false,
        "type": "boolean"
      },
      "output-file": {
        "name": "output-file",
        "required": true,
        "summary": "File where records are written.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "result-format": {
        "char": "r",
        "name": "result-format",
        "required": true,
        "summary": "Format to write the results.",
        "default": "csv",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "csv",
          "json"
        ],
        "type": "option"
      },
      "column-delimiter": {
        "name": "column-delimiter",
        "relationships": [
          {
            "type": "some",
            "flags": [
              {
                "name": "result-format"
              }
            ]
          }
        ],
        "summary": "Column delimiter to be used when writing CSV output. Default is COMMA.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "BACKQUOTE",
          "CARET",
          "COMMA",
          "PIPE",
          "SEMICOLON",
          "TAB"
        ],
        "type": "option"
      },
      "line-ending": {
        "name": "line-ending",
        "relationships": [
          {
            "type": "some",
            "flags": [
              {
                "name": "result-format"
              }
            ]
          }
        ],
        "summary": "Line ending to be used when writing CSV output. Default value on Windows is is `CRLF`; on macOS and Linux it's `LR`.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "LF",
          "CRLF"
        ],
        "type": "option"
      }
    },
    "id": "data:export:bulk",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "export",
      "bulk.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "data:export:bulk",
      "export:data:bulk",
      "export:bulk:data",
      "data:bulk:export",
      "bulk:data:export",
      "bulk:export:data"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Resume a bulk export job that you previously started. Uses Bulk API 2.0.",
    "description": "When the original \"data export bulk\" command either times out or is run with the --async flag, it displays a job ID. To see the status and get the results of the bulk export, run this command by either passing it the job ID or using the --use-most-recent flag to specify the most recent bulk export job.",
    "examples": [
      "Resume a bulk export job run on your default org by specifying a job ID:\nsf <%= command.id %> --job-id 750xx000000005sAAA",
      "Resume the most recently-run bulk export job for an org with alias my-scratch:\nsf data export resume --use-most-recent --target-org my-scratch"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "job-id": {
        "char": "i",
        "name": "job-id",
        "summary": "Job ID of the bulk export.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-most-recent": {
        "name": "use-most-recent",
        "summary": "Use the job ID of the bulk export job that was most recently run.",
        "allowNo": false,
        "type": "boolean"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "data:export:resume",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "export",
      "resume.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "data:export:resume",
      "export:data:resume",
      "export:resume:data",
      "data:resume:export",
      "resume:data:export",
      "resume:export:data"
    ]
  },
  {
    "aliases": [
      "force:data:tree:export"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Export data from an org into one or more JSON files.",
    "description": "Specify a SOQL query, either directly at the command line or read from a file, to retrieve the data you want to export. The exported data is written to JSON files in sObject tree format, which is a collection of nested, parent-child records with a single root record. Use these JSON files to import data into an org with the \"sf data import tree\" command.\n\nIf your SOQL query references multiple objects, the command generates a single JSON file by default. You can specify the --plan flag to generate separate JSON files for each object and a plan definition file that aggregates them. You then specify just this plan definition file when you import the data into an org.\n\nThe SOQL query can return a maximum of 2,000 records. For more information, see the REST API Developer Guide. (https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_composite_sobject_tree.htm).",
    "examples": [
      "Export records retrieved with the specified SOQL query into a single JSON file in the current directory; the command uses your default org:\n<%= config.bin %> <%= command.id %> --query \"SELECT Id, Name, (SELECT Name, Address__c FROM Properties__r) FROM Broker__c\"",
      "Export data using a SOQL query in the \"query.txt\" file and generate JSON files for each object and a plan that aggregates them:\n<%= config.bin %> <%= command.id %> --query query.txt --plan",
      "Prepend \"export-demo\" before each generated file and generate the files in the \"export-out\" directory; run the command on the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --query query.txt --plan --prefix export-demo --output-dir export-out --target-org my-scratch"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "query": {
        "char": "q",
        "name": "query",
        "required": true,
        "summary": "SOQL query, or filepath of a file that contains the query, to retrieve records.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "plan": {
        "char": "p",
        "name": "plan",
        "summary": "Generate multiple sObject tree files and a plan definition file for aggregated import.",
        "allowNo": false,
        "type": "boolean"
      },
      "prefix": {
        "char": "x",
        "name": "prefix",
        "summary": "Prefix of generated files.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir"
        ],
        "char": "d",
        "deprecateAliases": true,
        "name": "output-dir",
        "summary": "Directory in which to generate the JSON files; default is current directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "data:export:tree",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "export",
      "tree.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [
      "force:data:tree:export",
      "data:force:tree:export",
      "data:tree:force:export",
      "data:tree:export:force",
      "force:tree:data:export",
      "tree:force:data:export",
      "tree:data:force:export",
      "tree:data:export:force",
      "force:tree:export:data",
      "tree:force:export:data",
      "tree:export:force:data",
      "tree:export:data:force",
      "force:data:export:tree",
      "data:force:export:tree",
      "data:export:force:tree",
      "data:export:tree:force",
      "force:export:data:tree",
      "export:force:data:tree",
      "export:data:force:tree",
      "export:data:tree:force",
      "force:export:tree:data",
      "export:force:tree:data",
      "export:tree:force:data",
      "export:tree:data:force"
    ],
    "permutations": [
      "data:export:tree",
      "export:data:tree",
      "export:tree:data",
      "data:tree:export",
      "tree:data:export",
      "tree:export:data"
    ]
  },
  {
    "aliases": [
      "force:data:record:get"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Retrieve and display a single record of a Salesforce or Tooling API object.",
    "description": "Specify the record you want to retrieve with either its ID or with a list of field-value pairs that identify the record. If your list of fields identifies more than one record, the command fails; the error displays how many records were found.\n\nWhen specifying field-value pairs, use the format <fieldName>=<value>. Enclose all field-value pairs in one set of double quotation marks, delimited by spaces. Enclose values that contain spaces in single quotes.\n\nThe command displays all the record's fields and their values, one field per terminal line. Fields with no values are displayed as \"null\".\n\nThis command retrieves a record from Salesforce objects by default. Use the --use-tooling-api flag to retrieve from a Tooling API object.",
    "examples": [
      "Retrieve and display a record from Account with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --sobject Account --record-id 00180XX",
      "Retrieve a record from Account whose name equals \"Acme\":\n<%= config.bin %> <%= command.id %> --sobject Account --where \"Name=Acme\"",
      "Retrieve a record from Account identified with two field values, one that contains a space; the command uses the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --sobject Account --where \"Name='Universal Containers' Phone='(123) 456-7890'\" --target-org myscratch",
      "Retrieve a record from the Tooling API object TraceFlag with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --use-tooling-api --sobject TraceFlag --record-id 7tf8c"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sobject": {
        "aliases": [
          "sobjecttype"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "sobject",
        "required": true,
        "summary": "API name of the Salesforce or Tooling API object that you're retrieving a record from.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "record-id": {
        "aliases": [
          "sobjectid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "record-id",
        "summary": "ID of the record you’re retrieving.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "where": {
        "char": "w",
        "name": "where",
        "summary": "List of <fieldName>=<value> pairs that identify the record you want to display.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-tooling-api": {
        "aliases": [
          "usetoolingapi"
        ],
        "char": "t",
        "deprecateAliases": true,
        "name": "use-tooling-api",
        "summary": "Use Tooling API so you can retrieve a record from a Tooling API object.",
        "allowNo": false,
        "type": "boolean"
      },
      "perflog": {
        "deprecated": {
          "version": "57"
        },
        "description": "Gets data on API performance metrics from the server. The data is stored in $HOME/.sfdx/apiPerformanceLog.json.",
        "hidden": true,
        "name": "perflog",
        "summary": "Get API performance data.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "data:get:record",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "get",
      "record.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [
      "force:data:record:get",
      "data:force:record:get",
      "data:record:force:get",
      "data:record:get:force",
      "force:record:data:get",
      "record:force:data:get",
      "record:data:force:get",
      "record:data:get:force",
      "force:record:get:data",
      "record:force:get:data",
      "record:get:force:data",
      "record:get:data:force",
      "force:data:get:record",
      "data:force:get:record",
      "data:get:force:record",
      "data:get:record:force",
      "force:get:data:record",
      "get:force:data:record",
      "get:data:force:record",
      "get:data:record:force",
      "force:get:record:data",
      "get:force:record:data",
      "get:record:force:data",
      "get:record:data:force"
    ],
    "permutations": [
      "data:get:record",
      "get:data:record",
      "get:record:data",
      "data:record:get",
      "record:data:get",
      "record:get:data"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Bulk import records into a Salesforce object from a CSV file. Uses Bulk API 2.0.",
    "description": "You can use this command to import millions of records into the object from a file in comma-separated values (CSV) format.\n\nAll the records in the CSV file must be for the same Salesforce object. Specify the object with the `--sobject` flag.\n\nBulk imports can take a while, depending on how many records are in the CSV file. If the command times out, or you specified the --async flag, the command displays the job ID. To see the status and get the results of the job, run \"sf data import resume\" and pass the job ID to the --job-id flag.\n\nFor information and examples about how to prepare your CSV files, see \"Prepare Data to Ingest\" in the \"Bulk API 2.0 and Bulk API Developer Guide\" (https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/datafiles_prepare_data.htm).",
    "examples": [
      "Import Account records from a CSV-formatted file into an org with alias \"my-scratch\"; if the import doesn't complete in 10 minutes, the command ends and displays a job ID:\n<%= config.bin %> <%= command.id %> --file accounts.csv --sobject Account --wait 10 --target-org my-scratch",
      "Import asynchronously and use the default org; the command immediately returns a job ID that you then pass to the \"sf data import resume\" command:\n<%= config.bin %> <%= command.id %> --file accounts.csv --sobject Account --async"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "async": {
        "char": "a",
        "exclusive": [
          "wait"
        ],
        "name": "async",
        "summary": "Don't wait for the command to complete.",
        "allowNo": false,
        "type": "boolean"
      },
      "file": {
        "char": "f",
        "name": "file",
        "required": true,
        "summary": "CSV file that contains the Salesforce object records you want to import.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sobject": {
        "char": "s",
        "name": "sobject",
        "required": true,
        "summary": "API name of the Salesforce object, either standard or custom, into which you're importing records.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "exclusive": [
          "async"
        ],
        "name": "wait",
        "summary": "Time to wait for the command to finish, in minutes.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "line-ending": {
        "dependsOn": [
          "file"
        ],
        "name": "line-ending",
        "summary": "Line ending used in the CSV file. Default value on Windows is `CRLF`; on macOS and Linux it's `LF`.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "CRLF",
          "LF"
        ],
        "type": "option"
      },
      "column-delimiter": {
        "name": "column-delimiter",
        "summary": "Column delimiter used in the CSV file.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "BACKQUOTE",
          "CARET",
          "COMMA",
          "PIPE",
          "SEMICOLON",
          "TAB"
        ],
        "type": "option"
      }
    },
    "id": "data:import:bulk",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "import",
      "bulk.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "data:import:bulk",
      "import:data:bulk",
      "import:bulk:data",
      "data:bulk:import",
      "bulk:data:import",
      "bulk:import:data"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Resume a bulk import job that you previously started. Uses Bulk API 2.0.",
    "description": "When the original \"sf data import bulk\" command either times out or is run with the --async flag, it displays a job ID. To see the status and get the results of the bulk import, run this command by either passing it the job ID or using the --use-most-recent flag to specify the most recent bulk import job.",
    "examples": [
      "Resume a bulk import job to your default org using an ID:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA",
      "Resume the most recently run bulk import job for an org with alias my-scratch:\n<%= config.bin %> <%= command.id %> --use-most-recent --target-org my-scratch"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-most-recent": {
        "name": "use-most-recent",
        "summary": "Use the job ID of the bulk import job that was most recently run.",
        "allowNo": false,
        "type": "boolean"
      },
      "job-id": {
        "char": "i",
        "name": "job-id",
        "summary": "Job ID of the bulk import.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "name": "wait",
        "summary": "Time to wait for the command to finish, in minutes.",
        "default": "5 minutes",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "data:import:resume",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "import",
      "resume.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "data:import:resume",
      "import:data:resume",
      "import:resume:data",
      "data:resume:import",
      "resume:data:import",
      "resume:import:data"
    ]
  },
  {
    "aliases": [
      "force:data:tree:import"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Import data from one or more JSON files into an org.",
    "description": "The JSON files that contain the data are in sObject tree format, which is a collection of nested, parent-child records with a single root record. Use the \"sf data export tree\" command to generate these JSON files.\n\nIf you used the --plan flag when exporting the data to generate a plan definition file, use the --plan flag to reference the file when you import. If you're not using a plan, use the --files flag to list the files. If you specify multiple JSON files that depend on each other in a parent-child relationship, be sure you list them in the correct order.",
    "examples": [
      "Import the records contained in two JSON files into the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --files Contact.json,Account.json --target-org my-scratch",
      "Import records using a plan definition file into your default org:\n<%= config.bin %> <%= command.id %> --plan Account-Contact-plan.json"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "files": {
        "aliases": [
          "sobjecttreefiles"
        ],
        "char": "f",
        "deprecateAliases": true,
        "name": "files",
        "summary": "Comma-separated and in-order JSON files that contain the records, in sObject tree format, that you want to insert.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "plan": {
        "char": "p",
        "description": "Unlike when you use the `--files` flag, the files listed in the plan definition file **can** contain more then 200 records. When the CLI executes the import, it automatically batches the records to comply with the 200 record limit set by the API.\n\nThe order in which you list the files in the plan definition file matters. Specifically, records with lookups to records in another file should be listed AFTER that file. For example, let's say you're loading Account and Contact records, and the contacts have references to those accounts. Be sure you list the Accounts file before the Contacts file.\n\nThe plan definition file has the following schema:\n\n- items(object) - SObject Type: Definition of records to be insert per SObject Type\n  - sobject(string) - Name of SObject: Child file references must have SObject roots of this type\n  - files(array) - Files: An array of files paths to load",
        "name": "plan",
        "summary": "Plan definition file to insert multiple data files.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "data:import:tree",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "import",
      "tree.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [
      "force:data:tree:import",
      "data:force:tree:import",
      "data:tree:force:import",
      "data:tree:import:force",
      "force:tree:data:import",
      "tree:force:data:import",
      "tree:data:force:import",
      "tree:data:import:force",
      "force:tree:import:data",
      "tree:force:import:data",
      "tree:import:force:data",
      "tree:import:data:force",
      "force:data:import:tree",
      "data:force:import:tree",
      "data:import:force:tree",
      "data:import:tree:force",
      "force:import:data:tree",
      "import:force:data:tree",
      "import:data:force:tree",
      "import:data:tree:force",
      "force:import:tree:data",
      "import:force:tree:data",
      "import:tree:force:data",
      "import:tree:data:force"
    ],
    "permutations": [
      "data:import:tree",
      "import:data:tree",
      "import:tree:data",
      "data:tree:import",
      "tree:data:import",
      "tree:import:data"
    ]
  },
  {
    "aliases": [
      "force:data:soql:query"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Execute a SOQL query.",
    "description": "Specify the SOQL query at the command line with the --query flag or read the query from a file with the --file flag.\n\nIf your query returns more than 10,000 records, specify the --bulk flag. The command then runs the query using Bulk API 2.0, which has higher limits than the default API used by the command.\n\nWhen using --bulk, the command waits 3 minutes by default for the query to complete. Use the --wait parameter to specify a different number of minutes to wait, or set --wait to 0 to immediately return control to the terminal. If you set --wait to 0, or you use the --async flag, or the command simply times out, the command displays an ID. Pass this ID to the the \"data query resume\" command using the --bulk-query-id flag to get the results; pass the ID to the \"data resume\" command to get the job status.",
    "examples": [
      "Specify a SOQL query at the command line; the command uses your default org:\n<%= config.bin %> <%= command.id %> --query \"SELECT Id, Name, Account.Name FROM Contact\"",
      "Read the SOQL query from a file called \"query.txt\" and write the CSV-formatted output to a file; the command uses the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --file query.txt --output-file output.csv --result-format csv --target-org my-scratch",
      "Use Tooling API to run a query on the ApexTrigger Tooling API object:\n<%= config.bin %> <%= command.id %> --query \"SELECT Name FROM ApexTrigger\" --use-tooling-api",
      "Use Bulk API 2.0 to run a query that returns many rows, and return control to the terminal immediately:\n<%= config.bin %> <%= command.id %> --query \"SELECT Id FROM Contact\" --bulk --wait 0"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "query": {
        "char": "q",
        "name": "query",
        "summary": "SOQL query to execute.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "file": {
        "aliases": [
          "soqlqueryfile"
        ],
        "char": "f",
        "deprecateAliases": true,
        "name": "file",
        "summary": "File that contains the SOQL query.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-tooling-api": {
        "aliases": [
          "usetoolingapi"
        ],
        "char": "t",
        "deprecateAliases": true,
        "exclusive": [
          "bulk"
        ],
        "name": "use-tooling-api",
        "summary": "Use Tooling API so you can run queries on Tooling API objects.",
        "allowNo": false,
        "type": "boolean"
      },
      "bulk": {
        "char": "b",
        "exclusive": [
          "use-tooling-api"
        ],
        "name": "bulk",
        "summary": "Use Bulk API 2.0 to run the query.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "char": "w",
        "dependsOn": [
          "bulk"
        ],
        "exclusive": [
          "async"
        ],
        "name": "wait",
        "summary": "Time to wait for the command to finish, in minutes.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "async": {
        "dependsOn": [
          "bulk"
        ],
        "exclusive": [
          "wait"
        ],
        "name": "async",
        "summary": "Use Bulk API 2.0, but don't wait for the job to complete.",
        "allowNo": false,
        "type": "boolean"
      },
      "all-rows": {
        "name": "all-rows",
        "summary": "Include deleted records. By default, deleted records are not returned.",
        "allowNo": false,
        "type": "boolean"
      },
      "result-format": {
        "aliases": [
          "resultformat"
        ],
        "char": "r",
        "deprecateAliases": true,
        "name": "result-format",
        "summary": "Format to display the results; the --json flag overrides this flag.",
        "default": "human",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "human",
          "csv",
          "json"
        ],
        "type": "option"
      },
      "perflog": {
        "deprecated": {
          "version": "57"
        },
        "description": "Gets data on API performance metrics from the server. The data is stored in $HOME/.sfdx/apiPerformanceLog.json.",
        "hidden": true,
        "name": "perflog",
        "summary": "Get API performance data.",
        "allowNo": false,
        "type": "boolean"
      },
      "output-file": {
        "name": "output-file",
        "relationships": [
          {
            "type": "some",
            "flags": [
              {
                "name": "result-format"
              }
            ]
          }
        ],
        "summary": "File where records are written; only CSV and JSON output formats are supported.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "data:query",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "query.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [
      "force:data:soql:query",
      "data:force:soql:query",
      "data:soql:force:query",
      "data:soql:query:force",
      "force:soql:data:query",
      "soql:force:data:query",
      "soql:data:force:query",
      "soql:data:query:force",
      "force:soql:query:data",
      "soql:force:query:data",
      "soql:query:force:data",
      "soql:query:data:force",
      "force:data:query:soql",
      "data:force:query:soql",
      "data:query:force:soql",
      "data:query:soql:force",
      "force:query:data:soql",
      "query:force:data:soql",
      "query:data:force:soql",
      "query:data:soql:force",
      "force:query:soql:data",
      "query:force:soql:data",
      "query:soql:force:data",
      "query:soql:data:force"
    ],
    "permutations": [
      "data:query",
      "query:data"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "View the status of a bulk data load job or batch.",
    "description": "Run this command using the job ID or batch ID returned from the \"sf data delete bulk\" or \"sf data upsert bulk\" commands.",
    "examples": [
      "View the status of a bulk load job:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA",
      "View the status of a bulk load job and a specific batches:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA --batch-id 751xx000000005nAAA"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "batch-id": {
        "aliases": [
          "batchid"
        ],
        "char": "b",
        "deprecateAliases": true,
        "name": "batch-id",
        "summary": "ID of the batch whose status you want to view; you must also specify the job ID.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "job-id": {
        "aliases": [
          "jobid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "job-id",
        "required": true,
        "summary": "ID of the job whose status you want to view.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "data:resume",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "resume.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "data:resume",
      "resume:data"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Execute a SOSL text-based search query.",
    "description": "Specify the SOSL query at the command line with the --query flag or read the query from a file with the --file flag.\n\nBy default, the results are written to the terminal in human-readable format. If you specify `--result-format csv`, the output is written to one or more CSV (comma-separated values) files. The file names correspond to the Salesforce objects in the results, such as Account.csv. Both `--result-format human` and `--result-format json` display only to the terminal.",
    "examples": [
      "Specify a SOSL query at the command line; the command uses your default org:\n<%= config.bin %> <%= command.id %> --query \"FIND {Anna Jones} IN Name Fields RETURNING Contact (Name, Phone)\"",
      "Read the SOSL query from a file called \"query.txt\"; the command uses the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --file query.txt --target-org my-scratch",
      "Similar to the previous example, but write the results to one or more CSV files, depending on the Salesforce objects in the results:\n<%= config.bin %> <%= command.id %> --file query.txt --target-org my-scratch --result-format csv"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "query": {
        "char": "q",
        "name": "query",
        "summary": "SOSL query to execute.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "file": {
        "char": "f",
        "name": "file",
        "summary": "File that contains the SOSL query.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "result-format": {
        "char": "r",
        "exclusive": [
          "json"
        ],
        "name": "result-format",
        "summary": "Format to display the results, or to write to disk if you specify \"csv\".",
        "default": "human",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "human",
          "csv",
          "json"
        ],
        "type": "option"
      }
    },
    "id": "data:search",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "search.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "data:search",
      "search:data"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Bulk update records to an org from a CSV file. Uses Bulk API 2.0.",
    "description": "You can use this command to update millions of Salesforce object records based on a file in comma-separated values (CSV) format.\n\nAll the records in the CSV file must be for the same Salesforce object. Specify the object with the `--sobject` flag. The first column of every line in the CSV file must be an ID of the record you want to update. The CSV file can contain only existing records; if a record in the file doesn't currently exist in the Salesforce object, the command fails. Consider using \"sf data upsert bulk\" if you also want to insert new records.\n\nBulk updates can take a while, depending on how many records are in the CSV file. If the command times out, or you specified the --async flag, the command displays the job ID. To see the status and get the results of the job, run \"sf data update resume\" and pass the job ID to the --job-id flag.\n\nFor information and examples about how to prepare your CSV files, see \"Prepare Data to Ingest\" in the \"Bulk API 2.0 and Bulk API Developer Guide\" (https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/datafiles_prepare_data.htm).",
    "examples": [
      "Update Account records from a CSV-formatted file into an org with alias \"my-scratch\"; if the update doesn't complete in 10 minutes, the command ends and displays a job ID:\n<%= config.bin %> <%= command.id %> --file accounts.csv --sobject Account --wait 10 --target-org my-scratch",
      "Update asynchronously and use the default org; the command immediately returns a job ID that you then pass to the \"sf data update resume\" command:\n<%= config.bin %> <%= command.id %> --file accounts.csv --sobject Account --async"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "async": {
        "char": "a",
        "name": "async",
        "summary": "Don't wait for the command to complete.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "char": "w",
        "name": "wait",
        "summary": "Time to wait for the command to finish, in minutes.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "file": {
        "char": "f",
        "name": "file",
        "required": true,
        "summary": "CSV file that contains the Salesforce object records you want to update.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sobject": {
        "char": "s",
        "name": "sobject",
        "required": true,
        "summary": "API name of the Salesforce object, either standard or custom, which you are updating.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "line-ending": {
        "dependsOn": [
          "file"
        ],
        "name": "line-ending",
        "summary": "Line ending used in the CSV file. Default value on Windows is `CRLF`; on macOS and Linux it's `LF`.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "CRLF",
          "LF"
        ],
        "type": "option"
      },
      "column-delimiter": {
        "name": "column-delimiter",
        "summary": "Column delimiter used in the CSV file.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "BACKQUOTE",
          "CARET",
          "COMMA",
          "PIPE",
          "SEMICOLON",
          "TAB"
        ],
        "type": "option"
      }
    },
    "id": "data:update:bulk",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "update",
      "bulk.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "data:update:bulk",
      "update:data:bulk",
      "update:bulk:data",
      "data:bulk:update",
      "bulk:data:update",
      "bulk:update:data"
    ]
  },
  {
    "aliases": [
      "force:data:record:update"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Updates a single record of a Salesforce or Tooling API object.",
    "description": "Specify the record you want to update with either its ID or with a list of field-value pairs that identify the record. If your list of fields identifies more than one record, the update fails; the error displays how many records were found.\n\nWhen using field-value pairs for both identifying the record and specifiyng the new field values, use the format <fieldName>=<value>. Enclose all field-value pairs in one set of double quotation marks, delimited by spaces. Enclose values that contain spaces in single quotes.\n\nThis command updates a record in Salesforce objects by default. Use the --use-tooling-api flag to update a Tooling API object.",
    "examples": [
      "Update the Name field of an Account record with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --sobject Account --record-id 001D0 --values \"Name=NewAcme\"",
      "Update the Name field of an Account record whose current name is 'Old Acme':\n<%= config.bin %> <%= command.id %> --sobject Account --where \"Name='Old Acme'\" --values \"Name='New Acme'\"",
      "Update the Name and Website fields of an Account record with the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> --sobject Account --record-id 001D0 --values \"Name='Acme III' Website=www.example.com\"",
      "Update the ExpirationDate field of a record of the Tooling API object TraceFlag using the specified (truncated) ID:\n<%= config.bin %> <%= command.id %> -t --sobject TraceFlag --record-id 7tf170000009cUBAAY --values \"ExpirationDate=2017-12-01T00:58:04.000+0000\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sobject": {
        "aliases": [
          "sobjecttype"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "sobject",
        "required": true,
        "summary": "API name of the Salesforce or Tooling API object that contains the record you're updating.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "record-id": {
        "aliases": [
          "sobjectid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "record-id",
        "summary": "ID of the record you’re updating.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "where": {
        "char": "w",
        "name": "where",
        "summary": "List of <fieldName>=<value> pairs that identify the record you want to update.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "values": {
        "char": "v",
        "name": "values",
        "required": true,
        "summary": "Fields that you're updating, in the format of <fieldName>=<value> pairs.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-tooling-api": {
        "aliases": [
          "usetoolingapi"
        ],
        "char": "t",
        "deprecateAliases": true,
        "name": "use-tooling-api",
        "summary": "Use Tooling API so you can update a record in a Tooling API object.",
        "allowNo": false,
        "type": "boolean"
      },
      "perflog": {
        "deprecated": {
          "version": "57"
        },
        "hidden": true,
        "name": "perflog",
        "summary": "Get API performance data.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "data:update:record",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "update",
      "record.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [
      "force:data:record:update",
      "data:force:record:update",
      "data:record:force:update",
      "data:record:update:force",
      "force:record:data:update",
      "record:force:data:update",
      "record:data:force:update",
      "record:data:update:force",
      "force:record:update:data",
      "record:force:update:data",
      "record:update:force:data",
      "record:update:data:force",
      "force:data:update:record",
      "data:force:update:record",
      "data:update:force:record",
      "data:update:record:force",
      "force:update:data:record",
      "update:force:data:record",
      "update:data:force:record",
      "update:data:record:force",
      "force:update:record:data",
      "update:force:record:data",
      "update:record:force:data",
      "update:record:data:force"
    ],
    "permutations": [
      "data:update:record",
      "update:data:record",
      "update:record:data",
      "data:record:update",
      "record:data:update",
      "record:update:data"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Resume a bulk update job that you previously started. Uses Bulk API 2.0.",
    "description": "When the original \"sf data update bulk\" command either times out or is run with the --async flag, it displays a job ID. To see the status and get the results of the bulk update, run this command by either passing it the job ID or using the --use-most-recent flag to specify the most recent bulk update job.",
    "examples": [
      "Resume a bulk update job of your default org using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA",
      "Resume the most recently run bulk update job for an org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --use-most-recent --target-org my-scratch"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-most-recent": {
        "name": "use-most-recent",
        "summary": "Use the job ID of the bulk update job that was most recently run.",
        "allowNo": false,
        "type": "boolean"
      },
      "job-id": {
        "char": "i",
        "name": "job-id",
        "summary": "Job ID of the bulk update.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "name": "wait",
        "summary": "Time to wait for the command to finish, in minutes.",
        "default": "5 minutes",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "data:update:resume",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "update",
      "resume.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "data:update:resume",
      "update:data:resume",
      "update:resume:data",
      "data:resume:update",
      "resume:data:update",
      "resume:update:data"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Bulk upsert records to an org from a CSV file. Uses Bulk API 2.0.",
    "description": "An upsert refers to inserting a record into a Salesforce object if the record doesn't already exist, or updating it if it does exist.\n\nWhen you execute this command, it starts a job, displays the ID, and then immediately returns control of the terminal to you by default. If you prefer to wait, set the --wait flag to the number of minutes; if it times out, the command outputs the IDs. Use the job and batch IDs to check the status of the job with the \"sf data upsert resume\" command.\n\nSee \"Prepare CSV Files\" in the Bulk API Developer Guide for details on formatting your CSV file. (https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/datafiles_prepare_csv.htm)",
    "examples": [
      "Bulk upsert records to the Contact object in your default org:\n<%= config.bin %> <%= command.id %> --sobject Contact --file files/contacts.csv --external-id Id",
      "Bulk upsert records to a custom object in an org with alias my-scratch and wait 5 minutes for the command to complete:\n<%= config.bin %> <%= command.id %> --sobject MyObject__c --file files/file.csv --external-id MyField__c --wait 5 --target-org my-scratch"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "file": {
        "aliases": [
          "csvfile"
        ],
        "char": "f",
        "deprecateAliases": true,
        "name": "file",
        "required": true,
        "summary": "CSV file that contains the IDs of the records to update or delete.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sobject": {
        "aliases": [
          "sobjecttype"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "sobject",
        "required": true,
        "summary": "API name of the Salesforce object, either standard or custom, that you want to update or delete records from.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "exclusive": [
          "async"
        ],
        "name": "wait",
        "summary": "Number of minutes to wait for the command to complete before displaying the results.",
        "default": "0 minutes",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "async": {
        "char": "a",
        "exclusive": [
          "wait"
        ],
        "name": "async",
        "summary": "Run the command asynchronously.",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "deprecated": {
          "message": "The --verbose flag is deprecated and will be removed after March 2025, use \"sf data bulk results\" to get job results instead."
        },
        "name": "verbose",
        "summary": "Print verbose output of failed records if result is available.",
        "allowNo": false,
        "type": "boolean"
      },
      "line-ending": {
        "dependsOn": [
          "file"
        ],
        "name": "line-ending",
        "summary": "Line ending used in the CSV file. Default value on Windows is `CRLF`; on macOS and Linux it's `LF`.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "CRLF",
          "LF"
        ],
        "type": "option"
      },
      "column-delimiter": {
        "name": "column-delimiter",
        "summary": "Column delimiter used in the CSV file.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "BACKQUOTE",
          "CARET",
          "COMMA",
          "PIPE",
          "SEMICOLON",
          "TAB"
        ],
        "type": "option"
      },
      "external-id": {
        "aliases": [
          "externalid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "external-id",
        "required": true,
        "summary": "Name of the external ID field, or the Id field.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "data:upsert:bulk",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "upsert",
      "bulk.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "data:upsert:bulk",
      "upsert:data:bulk",
      "upsert:bulk:data",
      "data:bulk:upsert",
      "bulk:data:upsert",
      "bulk:upsert:data"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Resume a bulk upsert job that you previously started. Uses Bulk API 2.0.",
    "description": "The command uses the job ID returned from the \"sf data upsert bulk\" command or the most recently-run bulk upsert job.",
    "examples": [
      "Resume a bulk upsert job from your default org using an ID:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA",
      "Resume the most recently run bulk upsert job for an org with alias my-scratch:\n<%= config.bin %> <%= command.id %> --use-most-recent --target-org my-scratch"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "summary": "Username or alias of the target org. Not required if the \"target-org\" configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "job-id": {
        "aliases": [
          "jobid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "job-id",
        "summary": "ID of the job you want to resume.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-most-recent": {
        "exclusive": [
          "job-id"
        ],
        "name": "use-most-recent",
        "summary": "Use the ID of the most recently-run bulk job.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "name": "wait",
        "summary": "Number of minutes to wait for the command to complete before displaying the results.",
        "default": "5 minutes",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "data:upsert:resume",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "data",
      "upsert",
      "resume.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "data:upsert:resume",
      "upsert:data:resume",
      "upsert:resume:data",
      "data:resume:upsert",
      "resume:data:upsert",
      "resume:upsert:data"
    ]
  },
  {
    "id": "deploy:functions",
    "summary": "Deploy a Salesforce Function to an org from your local project.",
    "description": "You must run this command from within a git repository. Only committed changes to Functions are deployed. The active branch is deployed unless specified otherwise with `--branch`.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Deploy a Salesforce Function:\n<%= config.bin %> <%= command.id %> --connected-org org-alias",
      "Deploy to 'deploy-branch':\n<%= config.bin %> <%= command.id %> --connected-org org-alias --branch deploy-branch",
      "Overwrite the remote repository:\n<%= config.bin %> <%= command.id %> --connected-org org-alias --force"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "connected-org": {
        "name": "connected-org",
        "type": "option",
        "char": "o",
        "description": "Username or alias for the org that the compute environment should be connected to.",
        "required": true,
        "multiple": false
      },
      "branch": {
        "name": "branch",
        "type": "option",
        "char": "b",
        "description": "Deploy the latest commit from a branch different from the currently active branch.",
        "multiple": false
      },
      "force": {
        "name": "force",
        "type": "boolean",
        "description": "Ignore warnings and overwrite remote repository (not allowed in production).",
        "allowNo": false
      },
      "quiet": {
        "name": "quiet",
        "type": "boolean",
        "char": "q",
        "description": "Limit the amount of output displayed from the deploy process.",
        "allowNo": false
      }
    },
    "args": {}
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.30",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Audit messages in a plugin's messages directory to locate unused messages and missing messages that have references in source code.",
    "examples": [
      "Audit messages using default directories:\n<%= config.bin %> <%= command.id %>",
      "Audit messages in the \"messages\" directory in the current working directory; the plugin's source directory is in \"src\":\n<%= config.bin %> <%= command.id %> --messages-dir ./messages --source-dir ./src"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "project-dir": {
        "aliases": [
          "projectdir"
        ],
        "char": "p",
        "name": "project-dir",
        "summary": "Location of the project where messages are to be audited.",
        "default": ".",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "messages-dir": {
        "aliases": [
          "messagesdir"
        ],
        "char": "m",
        "description": "The default is the \"messages\" directory in the current working directory.",
        "name": "messages-dir",
        "summary": "Directory that contains the plugin's message files.",
        "default": "messages",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "source-dir": {
        "aliases": [
          "sourcedir"
        ],
        "char": "s",
        "description": "The default is the \"src\" directory in the current working directory.",
        "name": "source-dir",
        "summary": "Directory that contains the plugin's source code.",
        "default": "src",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "dev:audit:messages",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "dev",
      "audit",
      "messages.js"
    ],
    "pluginAlias": "@salesforce/plugin-dev",
    "pluginName": "@salesforce/plugin-dev",
    "pluginType": "user",
    "aliasPermutations": [],
    "permutations": [
      "dev:audit:messages",
      "audit:dev:messages",
      "audit:messages:dev",
      "dev:messages:audit",
      "messages:dev:audit",
      "messages:audit:dev"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.30",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Convert a .json messages file into Markdown.",
    "description": "Preserves the filename and the original messages file, then creates a new file with the Markdown extension and standard headers for the command and flag summaries, descriptions, and so on. After you review the new Markdown file, delete the old .json file.",
    "examples": [
      "Convert the my-command.json message file into my-command.md with the standard messages headers:\n<%= config.bin %> <%= command.id %> --filename my-command.json",
      "Similar to previous example, but specify the plugin project directory:",
      "<%= config.bin %> <%= command.id %> --project-dir ./path/to/plugin --filename my-command.json"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "project-dir": {
        "aliases": [
          "projectdir"
        ],
        "char": "p",
        "name": "project-dir",
        "summary": "Location of the project whose messages are to be converted.",
        "default": ".",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "file-name": {
        "aliases": [
          "filename"
        ],
        "char": "f",
        "name": "file-name",
        "required": true,
        "summary": "Filename to convert.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      }
    },
    "id": "dev:convert:messages",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "dev",
      "convert",
      "messages.js"
    ],
    "pluginAlias": "@salesforce/plugin-dev",
    "pluginName": "@salesforce/plugin-dev",
    "pluginType": "user",
    "aliasPermutations": [],
    "permutations": [
      "dev:convert:messages",
      "convert:dev:messages",
      "convert:messages:dev",
      "dev:messages:convert",
      "messages:dev:convert",
      "messages:convert:dev"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.30",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Convert a script file that contains deprecated sfdx-style commands to use the new sf-style commands instead.",
    "description": "Important: Use this command only to get started on the sfdx->sf script migration. We don't guarantee that the new sf-style command replacements work correctly or as you expect. You must test, and probably update, the new script before putting it into production. We also don't guarantee that the JSON results are the same as before. \n\nThis command can convert a large part of your script, but possibly not all. There are some sfdx-style commands that don't have an obvious sf-style equivalent. In this case, this command doesn't replace the sfdx-style command but instead adds a comment to remind you that you must convert it manually. See the Salesforce CLI Command Reference for migration information about each deprecated sfdx-style command: https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference.htm.\n\nThis command is interactive; as it scans your script, it prompts you when it finds an sfdx-style command or flag and asks if you want to convert it to the displayed suggestion. The command doesn't update the script file directly; rather, it creates a new file whose name is the original name but with \"-converted\" appended to it. The script replaces all instances of \"sfdx\" with \"sf\". For each prompt you answer \"y\" to, the command replaces the sfdx-style names with their equivalent sf-style ones. For example, \"sfdx force:apex:execute --targetusername myscratch\" is replaced with \"sf apex run --target-org myscratch\".",
    "examples": [
      "Convert the YAML file called \"myScript.yml\" located in the current directory; the new file that contains the replacements is called \"myScript-converted.yml\":\n<%= config.bin %> <%= command.id %> --script ./myScript.yml"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "script": {
        "char": "s",
        "name": "script",
        "required": true,
        "summary": "Filepath to the script you want to convert.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "hidden": true,
        "name": "no-prompt",
        "summary": "Don't prompt for suggested replacements.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "dev:convert:script",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "dev",
      "convert",
      "script.js"
    ],
    "pluginAlias": "@salesforce/plugin-dev",
    "pluginName": "@salesforce/plugin-dev",
    "pluginType": "user",
    "aliasPermutations": [],
    "permutations": [
      "dev:convert:script",
      "convert:dev:script",
      "convert:script:dev",
      "dev:script:convert",
      "script:dev:convert",
      "script:convert:dev"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.30",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a new sf command.",
    "description": "You must run this command from within a plugin directory, such as the directory created with the \"sf dev generate plugin\" command.\n\nThe command generates basic source files, messages (\\*.md), and test files for your new command. The Typescript files contain import statements for the minimum required Salesforce libraries, and scaffold some basic code. The new type names come from the value you passed to the --name flag.\n\nThe command updates the package.json file, so if it detects conflicts with the existing file, you're prompted whether you want to overwrite the file. There are a number of package.json updates required for a new command, so we recommend you answer \"y\" so the command takes care of them all. If you answer \"n\", you must update the package.json file manually.",
    "examples": [
      "Generate the files for a new \"sf my exciting command\":\n<%= config.bin %> <%= command.id %> --name my:exciting:command"
    ],
    "flags": {
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "char": "n",
        "name": "name",
        "required": true,
        "summary": "Name of the new command. Use colons to separate the topic and command names.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "force": {
        "name": "force",
        "summary": "Overwrite existing files.",
        "allowNo": false,
        "type": "boolean"
      },
      "dry-run": {
        "name": "dry-run",
        "summary": "Display the changes that would be made without writing them to disk.",
        "allowNo": false,
        "type": "boolean"
      },
      "nuts": {
        "name": "nuts",
        "summary": "Generate a NUT test file for the command.",
        "allowNo": true,
        "type": "boolean"
      },
      "unit": {
        "name": "unit",
        "summary": "Generate a unit test file for the command.",
        "allowNo": true,
        "type": "boolean"
      }
    },
    "id": "dev:generate:command",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "dev",
      "generate",
      "command.js"
    ],
    "pluginAlias": "@salesforce/plugin-dev",
    "pluginName": "@salesforce/plugin-dev",
    "pluginType": "user",
    "aliasPermutations": [],
    "permutations": [
      "dev:generate:command",
      "generate:dev:command",
      "generate:command:dev",
      "dev:command:generate",
      "command:dev:generate",
      "command:generate:dev"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.30",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a flag for an existing command.",
    "description": "You must run this command from within a plugin directory, such as the directory created with the \"sf dev generate plugin\" command.\n\nThis command is interactive. It first discovers all the commands currently implemented in the plugin, and asks you which you want to create a new flag for. It then prompts for other flag properties, such as its long name, optional short name, type, whether it's required, and so on. Long flag names must be kebab-case and not camelCase. The command doesn't let you use an existing long or short flag name. When the command completes, the Typescript file for the command is updated with the code for the new flag.\n\nUse the --dry-run flag to review new code for the command file without actually updating it.",
    "examples": [
      "Generate a new flag and update the command file:\n<%= config.bin %> <%= command.id %>",
      "Don't actually update the command file, just view the generated code:\n<%= config.bin %> <%= command.id %> --dry-run"
    ],
    "flags": {
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "dry-run": {
        "aliases": [
          "dryrun"
        ],
        "char": "d",
        "name": "dry-run",
        "summary": "Print new flag code instead of adding it to the command file.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "dev:generate:flag",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "dev",
      "generate",
      "flag.js"
    ],
    "pluginAlias": "@salesforce/plugin-dev",
    "pluginName": "@salesforce/plugin-dev",
    "pluginType": "user",
    "aliasPermutations": [],
    "permutations": [
      "dev:generate:flag",
      "generate:dev:flag",
      "generate:flag:dev",
      "dev:flag:generate",
      "flag:dev:generate",
      "flag:generate:dev"
    ]
  },
  {
    "aliases": [
      "plugins:generate"
    ],
    "args": {},
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.30",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a new sf plugin.",
    "description": "This command is interactive. You're prompted for information to populate your new plugin, such as its name, description, author, and percentage of code coverage you want. The command clones the 'salesforcecli/plugin-template-sf' GitHub repository, installs the plug-in's npm package dependencies using yarn install, and updates the package properties.\n\nWhen the command completes, your new plugin contains the source, message, and test files for a sample \"sf hello world\" command.",
    "examples": [
      "<%= config.bin %> <%= command.id %>"
    ],
    "deprecateAliases": true,
    "flags": {
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "dry-run": {
        "name": "dry-run",
        "summary": "Display the changes that would be made without writing them to disk.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "dev:generate:plugin",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "dev",
      "generate",
      "plugin.js"
    ],
    "pluginAlias": "@salesforce/plugin-dev",
    "pluginName": "@salesforce/plugin-dev",
    "pluginType": "user",
    "aliasPermutations": [
      "plugins:generate",
      "generate:plugins"
    ],
    "permutations": [
      "dev:generate:plugin",
      "generate:dev:plugin",
      "generate:plugin:dev",
      "dev:plugin:generate",
      "plugin:dev:generate",
      "plugin:generate:dev"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Gather CLI configuration data and run diagnostic tests to discover and report potential problems in your environment.",
    "description": "When you run the doctor command without parameters, it first displays a diagnostic overview of your environment. It then writes a detailed diagnosis to a JSON file in the current directory. Use the --outputdir to specify a different directory. To run diagnostic tests on a specific plugin, use the --plugin parameter. If the plugin isn't listening to the doctor, then you get a warning.\n\nUse the --command parameter to run a specific command in debug mode; the doctor writes both stdout and stderr to \\*.log files that you can provide to Salesforce Customer Support or attach to a GitHub issue.\n\nPlugin providers can also implement their own doctor diagnostic tests by listening to the \"sf-doctor\" event and running plugin specific tests that are then included in the doctor diagnostics log.",
    "examples": [
      "Run CLI doctor diagnostics:\n<%= config.bin %> doctor",
      "Run CLI doctor diagnostics and the specified command, and write the debug output to a file:\n<%= config.bin %> doctor --command \"force:org:list --all\"",
      "Run CLI doctor diagnostics for a specific plugin:\n<%= config.bin %> doctor --plugin @salesforce/plugin-source"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "command": {
        "char": "c",
        "name": "command",
        "summary": "Command to run in debug mode; results are written to a log file.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "plugin": {
        "char": "p",
        "name": "plugin",
        "summary": "Specific plugin on which to run diagnostics.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir",
          "o"
        ],
        "char": "d",
        "name": "output-dir",
        "summary": "Directory to save all created files rather than the current working directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "create-issue": {
        "aliases": [
          "createissue"
        ],
        "char": "i",
        "name": "create-issue",
        "summary": "Create a new issue on our GitHub repo and attach all diagnostic results.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "doctor",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "doctor.js"
    ],
    "pluginAlias": "@salesforce/plugin-info",
    "pluginName": "@salesforce/plugin-info",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "doctor"
    ]
  },
  {
    "id": "env:compute:collaborator:add",
    "summary": "Add a Heroku user as a collaborator on this Functions account, allowing them to attach Heroku add-ons to compute environments.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Add a Heroku user as a collaborator on this Functions account.\n<%= config.bin %> <%= command.id %> --heroku-user example@heroku.com"
    ],
    "flags": {
      "heroku-user": {
        "name": "heroku-user",
        "type": "option",
        "char": "h",
        "description": "Email address of the Heroku user you're adding as a collaborator.",
        "required": true,
        "multiple": false
      }
    },
    "args": {}
  },
  {
    "id": "env:create:compute",
    "summary": "Create a compute environment for use with Salesforce Functions.",
    "description": "Compute environments must be connected to a Salesforce org. By default the command uses your local environment's connected org. Use the '--connected-org' flag to specify a specific org. Run 'sf env list' to see a list of environments.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Create a compute environment to run Salesforce Functions:\n<%= config.bin %> <%= command.id %>",
      "Connect the environment to a specific org:\n<%= config.bin %> <%= command.id %> --connected-org=org-alias",
      "Create an alias for the compute environment:\n<%= config.bin %> <%= command.id %> --alias environment-alias"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "connected-org": {
        "name": "connected-org",
        "type": "option",
        "char": "o",
        "description": "Username or alias for the org that the compute environment should be connected to.",
        "required": false,
        "multiple": false
      },
      "alias": {
        "name": "alias",
        "type": "option",
        "char": "a",
        "description": "Alias for the created environment.",
        "multiple": false
      }
    },
    "args": {}
  },
  {
    "id": "env:delete",
    "summary": "Delete an environment.",
    "description": "You must include the name of the environment to delete using '--target-compute'. Run 'sf env list' to see a list of environments.\n\nRunning this command will prompt a confirmation. If you want to skip this confirmation, use the '--confirm' flag and the environment alias to skip confirmation.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Delete a compute environment:\n<%= config.bin %> <%= command.id %> --target-compute environment-alias",
      "Delete without a confirmation step:\n<%= config.bin %> <%= command.id %> --target-compute environment-alias --confirm environment-alias"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-compute": {
        "name": "target-compute",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "required": false,
        "multiple": false,
        "exclusive": [
          "environment"
        ]
      },
      "environment": {
        "name": "environment",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "exclusive": [
          "target-compute"
        ]
      },
      "confirm": {
        "name": "confirm",
        "type": "option",
        "description": "Confirmation name.",
        "helpValue": "name",
        "multiple": true
      }
    },
    "args": {}
  },
  {
    "aliases": [],
    "args": {},
    "description": "Specify an environment with either the username you used when you logged into the environment with \"sf login\", or the alias you gave the environment when you created it. Run \"sf env list\" to view all your environments and their aliases.\n\nOutput depends on the type of environment.",
    "examples": [
      "Display details about the \"myEnv\" environment:\n<%- config.bin %> <%- command.id %> --target-env myEnv"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "target-env": {
        "char": "e",
        "name": "target-env",
        "summary": "Environment alias or login user.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "id": "env:display",
    "pluginAlias": "@salesforce/cli",
    "pluginName": "@salesforce/plugin-env",
    "pluginType": "jit",
    "strict": true,
    "summary": "Display details about an environment.",
    "enableJsonFlag": true,
    "SF_ENV": "SF_ENV",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "env",
      "display.js"
    ],
    "aliasPermutations": [],
    "permutations": [
      "env:display",
      "display:env"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "description": "By default, the command displays active environments.\n\nOutput is displayed in multiple tables, one for each environment type.\n\nThe compute environment table shows the alias, information about the connected orgs, the project name, and more.\n\nUse the table manipulation flags, such as --filter and --sort, to change how the data is displayed.\n\nRun \"sf env display\" to view details about a specific environment.",
    "examples": [
      "List all active environments:\n<%= config.bin %> <%= command.id %>",
      "List both active and inactive environments:\n<%= config.bin %> <%= command.id %> --all",
      "Don't truncate the displayed output and instead wrap text that's wider than your terminal:\n<%= config.bin %> <%= command.id %> --no-truncate",
      "Display only the table data, not the headers, in comma-separated value (csv) format:\n<%= config.bin %> <%= command.id %> --csv --no-header"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "all": {
        "char": "a",
        "name": "all",
        "summary": "Show all environments, even inactive ones.",
        "allowNo": false,
        "type": "boolean"
      },
      "columns": {
        "name": "columns",
        "summary": "List of columns to display.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "csv": {
        "name": "csv",
        "summary": "Output in csv format [alias: --output=csv]",
        "allowNo": false,
        "type": "boolean"
      },
      "filter": {
        "name": "filter",
        "summary": "Filter property by partial string matching.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "no-header": {
        "name": "no-header",
        "summary": "Hide table header from output.",
        "allowNo": false,
        "type": "boolean"
      },
      "no-truncate": {
        "name": "no-truncate",
        "summary": "Don't truncate output to fit screen.",
        "allowNo": false,
        "type": "boolean"
      },
      "output": {
        "name": "output",
        "summary": "Format in which to display the output.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "csv",
          "json",
          "yaml"
        ],
        "type": "option"
      },
      "sort": {
        "name": "sort",
        "summary": "Column to sort by (prepend '-' for descending).",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "id": "env:list",
    "pluginAlias": "@salesforce/cli",
    "pluginName": "@salesforce/plugin-env",
    "pluginType": "jit",
    "strict": true,
    "summary": "List the environments you’ve created or logged into.",
    "enableJsonFlag": true,
    "SF_ENV": "SF_ENV",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "env",
      "list.js"
    ],
    "aliasPermutations": [],
    "permutations": [
      "env:list",
      "list:env"
    ]
  },
  {
    "id": "env:log",
    "summary": "Stream log output for an environment.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "state": "beta",
    "aliases": [],
    "examples": [
      "Stream log output:\n<%= config.bin %> <%= command.id %> --target-compute environment-alias"
    ],
    "flags": {
      "target-compute": {
        "name": "target-compute",
        "type": "option",
        "char": "e",
        "description": "Compute environment name to retrieve logs.",
        "required": false,
        "multiple": false,
        "exclusive": [
          "environment"
        ]
      },
      "environment": {
        "name": "environment",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "exclusive": [
          "target-compute"
        ]
      },
      "num": {
        "name": "num",
        "type": "option",
        "char": "n",
        "description": "Number of lines to display.",
        "multiple": false
      }
    },
    "args": {}
  },
  {
    "id": "env:log:tail",
    "summary": "Stream log output for an environment.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Stream log output:\n<%= config.bin %> <%= command.id %> --target-compute environment-alias"
    ],
    "flags": {
      "target-compute": {
        "name": "target-compute",
        "type": "option",
        "char": "e",
        "description": "Compute environment name to retrieve logs.",
        "required": false,
        "multiple": false,
        "exclusive": [
          "environment"
        ]
      },
      "environment": {
        "name": "environment",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "exclusive": [
          "target-compute"
        ]
      }
    },
    "args": {}
  },
  {
    "id": "env:logdrain:add",
    "summary": "Add log drain to a specified environment.",
    "description": "Both '--target-compute' and '--url' are required flags. '--url' should be a HTTP or HTTPS URL that can receive the log drain messages.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Add a log drain:\n<%= config.bin %> <%= command.id %> --target-compute environment-name --url https://path/to/logdrain"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-compute": {
        "name": "target-compute",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "required": false,
        "multiple": false,
        "exclusive": [
          "environment"
        ]
      },
      "environment": {
        "name": "environment",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "exclusive": [
          "target-compute"
        ]
      },
      "drain-url": {
        "name": "drain-url",
        "type": "option",
        "char": "l",
        "description": "Endpoint that will receive sent logs.",
        "multiple": false,
        "exclusive": [
          "url"
        ]
      },
      "url": {
        "name": "url",
        "type": "option",
        "char": "u",
        "description": "Endpoint that will receive sent logs.",
        "hidden": true,
        "multiple": false,
        "exclusive": [
          "drain-url"
        ]
      }
    },
    "args": {}
  },
  {
    "id": "env:logdrain:list",
    "summary": "List log drains connected to a specified environment.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "List log drains:\n<%= config.bin %> <%= command.id %> --target-compute environment-alias",
      "List log drains as json:\n<%= config.bin %> <%= command.id %> --target-compute environment-alias --json"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-compute": {
        "name": "target-compute",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "required": false,
        "multiple": false,
        "exclusive": [
          "environment"
        ]
      },
      "environment": {
        "name": "environment",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "exclusive": [
          "target-compute"
        ]
      }
    },
    "args": {}
  },
  {
    "id": "env:logdrain:remove",
    "summary": "Remove log drain from a specified environment.",
    "description": "Both '--target-compute' and '--drain-url' are required flags.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Remove a logdrain:\n<%= config.bin %> <%= command.id %> --target-compute environment-alias --url https://path/to/logdrain"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-compute": {
        "name": "target-compute",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "required": false,
        "multiple": false,
        "exclusive": [
          "environment"
        ]
      },
      "environment": {
        "name": "environment",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "exclusive": [
          "target-compute"
        ]
      },
      "drain-url": {
        "name": "drain-url",
        "type": "option",
        "char": "l",
        "description": "Log drain url to remove.",
        "multiple": false,
        "exclusive": [
          "url"
        ]
      },
      "url": {
        "name": "url",
        "type": "option",
        "char": "u",
        "description": "Log drain url to remove.",
        "hidden": true,
        "multiple": false,
        "exclusive": [
          "drain-url"
        ]
      }
    },
    "args": {}
  },
  {
    "aliases": [],
    "args": {},
    "description": "Each of your environments is associated with an instance URL, such as https://login.salesforce.com. To open a specific web page, specify the portion of the URL after \"<URL>/\" with the --path flag.",
    "examples": [
      "Open the compute environment with alias \"test-compute\":\n<%= config.bin %> <%= command.id %> --target-env test-compute",
      "View the URL but don't launch it in a browser:\n<%= config.bin %> <%= command.id %> --target-env test-compute --url-only",
      "Open the environment in the Google Chrome browser:\n<%= config.bin %> <%= command.id %> --target-env test-compute --url-only --browser chrome"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "path": {
        "char": "p",
        "name": "path",
        "summary": "Path to append to the end of the login URL.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "url-only": {
        "char": "r",
        "name": "url-only",
        "summary": "Display the URL, but don’t launch it in a browser.",
        "allowNo": false,
        "type": "boolean"
      },
      "target-env": {
        "char": "e",
        "name": "target-env",
        "summary": "Login user or alias of the environment to open.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "browser": {
        "description": "You can specify that the environment open in one of the following browsers: Firefox, Safari, Google Chrome, or Windows Edge. If you don’t specify --browser, the environment opens in your default browser. The exact names of the browser applications differ depending on the operating system you're on; check your documentation for details.",
        "name": "browser",
        "summary": "Browser in which to open the environment.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "id": "env:open",
    "pluginAlias": "@salesforce/cli",
    "pluginName": "@salesforce/plugin-env",
    "pluginType": "jit",
    "strict": true,
    "summary": "Open an environment in a web browser.",
    "enableJsonFlag": true,
    "SF_ENV": "SF_ENV",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "env",
      "open.js"
    ],
    "aliasPermutations": [],
    "permutations": [
      "env:open",
      "open:env"
    ]
  },
  {
    "id": "env:var:get",
    "summary": "Display a single config variable for an environment.",
    "description": "You must provide the '--target-compute' flag and the key to retrieve.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Get a config variable:\n<%= config.bin %> <%= command.id %> [KEY] --target-compute environment-alias"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-compute": {
        "name": "target-compute",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "required": false,
        "multiple": false,
        "exclusive": [
          "environment"
        ]
      },
      "environment": {
        "name": "environment",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "exclusive": [
          "target-compute"
        ]
      }
    },
    "args": {
      "key": {
        "name": "key",
        "required": true
      }
    }
  },
  {
    "id": "env:var:list",
    "summary": "List your environment's config vars in a table.",
    "description": "Use the '--json' flag to return config vars in JSON format.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "List config vars:\n<%= config.bin %> <%= command.id %> --target-compute environment-alias",
      "List in JSON format:\n<%= config.bin %> <%= command.id %> --target-compute environment-alias --json"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-compute": {
        "name": "target-compute",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "required": false,
        "multiple": false,
        "exclusive": [
          "environment"
        ]
      },
      "environment": {
        "name": "environment",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "exclusive": [
          "target-compute"
        ]
      }
    },
    "args": {}
  },
  {
    "id": "env:var:set",
    "summary": "Set a single config value for an environment.",
    "strict": false,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Set a config value:\n<%= config.bin %> <%= command.id %> [KEY]=[VALUE] --target-compute environment-alias"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-compute": {
        "name": "target-compute",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "required": false,
        "multiple": false,
        "exclusive": [
          "environment"
        ]
      },
      "environment": {
        "name": "environment",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "exclusive": [
          "target-compute"
        ]
      }
    },
    "args": {}
  },
  {
    "id": "env:var:unset",
    "summary": "Unset a single config value for an environment.",
    "description": "Run 'sf env var list' to see a list of config values that can be unset.",
    "strict": false,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Unset a value:\n<%= config.bin %> <%= command.id %> --target-compute environment-alias"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "target-compute": {
        "name": "target-compute",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "required": false,
        "multiple": false,
        "exclusive": [
          "environment"
        ]
      },
      "environment": {
        "name": "environment",
        "type": "option",
        "char": "e",
        "description": "Environment name.",
        "hidden": true,
        "required": false,
        "multiple": false,
        "exclusive": [
          "target-compute"
        ]
      }
    },
    "args": {}
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.31",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Import ContentVersion records into Salesforce, in bulk.",
    "description": "The command uses composite api and concurrent batches to speed up the upload process. The input csv file should contain the following columns: `Title`, `PathOnClient`, `VersionData`. The `VersionData` column should contain the path to the file to be imported. Any additional columns should exactly match the field api name of a standard or custom field on the ContentVersion object.",
    "examples": [
      "<%= config.bin %> <%= command.id %>"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "file": {
        "char": "f",
        "description": "The csv file should atleast have `Title`, `PathOnClient`, `VersionData` columns. VersionData should be the path to the file to be imported. Any additional columns should exactly match the field api name of a standard or custom field on the ContentVersion object.",
        "name": "file",
        "required": true,
        "summary": "The file containing ContentVersion data to be imported.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "batch-size": {
        "char": "b",
        "description": "The default value is 30MB. Reduce this value if you have a large number of small files to import to avoid hitting the limit of 200 records per subrequest.",
        "name": "batch-size",
        "summary": "The total size of files (in MB) to import in a single batch. (a single composite api call)",
        "default": 30,
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "concurrency": {
        "char": "c",
        "name": "concurrency",
        "summary": "Number of parallel batches",
        "default": 3,
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      }
    },
    "requiresUsername": true,
    "id": "file:import",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "file",
      "import.js"
    ],
    "pluginAlias": "@neatflow/fileops",
    "pluginName": "@neatflow/fileops",
    "pluginType": "link",
    "aliasPermutations": [],
    "permutations": [
      "file:import",
      "import:file"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "examples": [
      "Bulk delete Account records from your default org using the list of IDs in the \"files/delete.csv\" file:\n<%= config.bin %> <%= command.id %> --sobject Account --file files/delete.csv",
      "Bulk delete records from a custom object in an org with alias my-scratch and wait 5 minutes for the command to complete:\n<%= config.bin %> <%= command.id %> --sobject MyObject__c --file files/delete.csv --wait 5 --target-org my-scratch"
    ],
    "summary": "Bulk delete records from an org using a CSV file. Uses Bulk API 1.0.",
    "description": "The CSV file must have only one column (\"Id\") and then the list of record IDs you want to delete, one ID per line.\n\nWhen you execute this command, it starts a job and one or more batches, displays their IDs, and then immediately returns control of the terminal to you by default. If you prefer to wait, set the --wait flag to the number of minutes; if it times out, the command outputs the IDs. Use the job and batch IDs to check the status of the job with the \"sf force data bulk status\" command. A single job can contain many batches, depending on the length of the CSV file.",
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "file": {
        "aliases": [
          "csvfile"
        ],
        "char": "f",
        "deprecateAliases": true,
        "name": "file",
        "required": true,
        "summary": "CSV file that contains the IDs of the records to delete.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sobject": {
        "aliases": [
          "sobjecttype"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "sobject",
        "required": true,
        "summary": "API name of the Salesforce object, either standard or custom, that you want to delete records from.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "name": "wait",
        "summary": "Number of minutes to wait for the command to complete before displaying the results.",
        "default": "0 minutes",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "force:data:bulk:delete",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "force",
      "data",
      "bulk",
      "delete.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "force:data:bulk:delete",
      "data:force:bulk:delete",
      "data:bulk:force:delete",
      "data:bulk:delete:force",
      "force:bulk:data:delete",
      "bulk:force:data:delete",
      "bulk:data:force:delete",
      "bulk:data:delete:force",
      "force:bulk:delete:data",
      "bulk:force:delete:data",
      "bulk:delete:force:data",
      "bulk:delete:data:force",
      "force:data:delete:bulk",
      "data:force:delete:bulk",
      "data:delete:force:bulk",
      "data:delete:bulk:force",
      "force:delete:data:bulk",
      "delete:force:data:bulk",
      "delete:data:force:bulk",
      "delete:data:bulk:force",
      "force:delete:bulk:data",
      "delete:force:bulk:data",
      "delete:bulk:force:data",
      "delete:bulk:data:force"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "View the status of a bulk data load job or batch. Uses Bulk API 1.0.",
    "description": "Run this command using the job ID or batch ID returned from the \"sf force data bulk delete\" or \"sf force data bulk upsert\" commands.",
    "examples": [
      "View the status of a bulk load job in your default org:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA",
      "View the status of a bulk load job and a specific batches in an org with alias my-scratch:\n<%= config.bin %> <%= command.id %> --job-id 750xx000000005sAAA --batch-id 751xx000000005nAAA --target-org my-scratch"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "batch-id": {
        "aliases": [
          "batchid"
        ],
        "char": "b",
        "deprecateAliases": true,
        "name": "batch-id",
        "summary": "ID of the batch whose status you want to view; you must also specify the job ID.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "job-id": {
        "aliases": [
          "jobid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "job-id",
        "required": true,
        "summary": "ID of the job whose status you want to view.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "force:data:bulk:status",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "force",
      "data",
      "bulk",
      "status.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "force:data:bulk:status",
      "data:force:bulk:status",
      "data:bulk:force:status",
      "data:bulk:status:force",
      "force:bulk:data:status",
      "bulk:force:data:status",
      "bulk:data:force:status",
      "bulk:data:status:force",
      "force:bulk:status:data",
      "bulk:force:status:data",
      "bulk:status:force:data",
      "bulk:status:data:force",
      "force:data:status:bulk",
      "data:force:status:bulk",
      "data:status:force:bulk",
      "data:status:bulk:force",
      "force:status:data:bulk",
      "status:force:data:bulk",
      "status:data:force:bulk",
      "status:data:bulk:force",
      "force:status:bulk:data",
      "status:force:bulk:data",
      "status:bulk:force:data",
      "status:bulk:data:force"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Bulk upsert records to an org from a CSV file. Uses Bulk API 1.0.",
    "description": "An upsert refers to inserting a record into a Salesforce object if the record doesn't already exist, or updating it if it does exist.\n\nWhen you execute this command, it starts a job and one or more batches, displays their IDs, and then immediately returns control of the terminal to you by default. If you prefer to wait, set the --wait flag to the number of minutes; if it times out, the command outputs the IDs. Use the job and batch IDs to check the status of the job with the \"sf force data bulk status\" command. A single job can contain many batches, depending on the length of the CSV file.\n\nSee \"Prepare CSV Files\" in the Bulk API Developer Guide for details on formatting your CSV file. (https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/datafiles_csv_preparing.htm)\n\nBy default, the job runs the batches in parallel, which we recommend. You can run jobs serially by specifying the --serial flag. But don't process data in serial mode unless you know this would otherwise result in lock timeouts and you can't reorganize your batches to avoid the locks.",
    "examples": [
      "Bulk upsert records to the Contact object in your default org:\n<%= config.bin %> --sobject Contact --file files/contacts.csv --external-id Id",
      "Bulk upsert records to a custom object in an org with alias my-scratch and wait 5 minutes for the command to complete:\n<%= config.bin %> <%= command.id %> --sobject MyObject__c --file files/file.csv --external-id MyField__c --wait 5 --target-org my-scratch"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "external-id": {
        "aliases": [
          "externalid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "external-id",
        "required": true,
        "summary": "Name of the external ID field, or the Id field.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "file": {
        "aliases": [
          "csvfile"
        ],
        "char": "f",
        "deprecateAliases": true,
        "name": "file",
        "required": true,
        "summary": "CSV file that contains the records to upsert.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sobject": {
        "aliases": [
          "sobjecttype"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "sobject",
        "required": true,
        "summary": "API name of the Salesforce object, either standard or custom, that you want to upsert records to.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "name": "wait",
        "summary": "Number of minutes to wait for the command to complete before displaying the results.",
        "default": "0 minutes",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "serial": {
        "char": "r",
        "name": "serial",
        "summary": "Run batches in serial mode.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "force:data:bulk:upsert",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "force",
      "data",
      "bulk",
      "upsert.js"
    ],
    "pluginAlias": "@salesforce/plugin-data",
    "pluginName": "@salesforce/plugin-data",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "force:data:bulk:upsert",
      "data:force:bulk:upsert",
      "data:bulk:force:upsert",
      "data:bulk:upsert:force",
      "force:bulk:data:upsert",
      "bulk:force:data:upsert",
      "bulk:data:force:upsert",
      "bulk:data:upsert:force",
      "force:bulk:upsert:data",
      "bulk:force:upsert:data",
      "bulk:upsert:force:data",
      "bulk:upsert:data:force",
      "force:data:upsert:bulk",
      "data:force:upsert:bulk",
      "data:upsert:force:bulk",
      "data:upsert:bulk:force",
      "force:upsert:data:bulk",
      "upsert:force:data:bulk",
      "upsert:data:force:bulk",
      "upsert:data:bulk:force",
      "force:upsert:bulk:data",
      "upsert:force:bulk:data",
      "upsert:bulk:force:data",
      "upsert:bulk:data:force"
    ]
  },
  {
    "id": "force:lightning:lwc:test:create",
    "description": "creates a Lightning web component test file with boilerplate code inside a __tests__ directory.",
    "strict": true,
    "usage": "force:lightning:lwc:test:create -f <string> [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/sfdx-plugin-lwc-test",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "$ sfdx force:lightning:lwc:test:create -f force-app/main/default/lwc/myButton/myButton.js"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "filepath": {
        "name": "filepath",
        "type": "option",
        "char": "f",
        "description": "path to Lightning web component .js file to create a test for",
        "required": true,
        "multiple": false
      }
    },
    "args": {},
    "longDescription": "Creates a __tests__ directory in the specified directory. Creates a yourComponentName.test.js file with boilerplate code in the __tests__ directory.",
    "requiresProject": true,
    "flagsConfig": {
      "filepath": {
        "kind": "string",
        "char": "f",
        "description": "path to Lightning web component .js file to create a test for",
        "longDescription": "Path to Lightning web component .js file to create a test for.",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    }
  },
  {
    "id": "force:lightning:lwc:test:run",
    "description": "invokes Lightning Web Components Jest unit tests.",
    "strict": true,
    "usage": "force:lightning:lwc:test:run [-d | --watch] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/sfdx-plugin-lwc-test",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "$ sfdx force:lightning:lwc:test:run",
      "$ sfdx force:lightning:lwc:test:run -w"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "debug": {
        "name": "debug",
        "type": "boolean",
        "char": "d",
        "description": "run tests in debug mode",
        "allowNo": false,
        "exclusive": [
          "watch"
        ]
      },
      "watch": {
        "name": "watch",
        "type": "boolean",
        "description": "run tests in watch mode",
        "allowNo": false,
        "exclusive": [
          "debug"
        ]
      }
    },
    "args": {
      "passthrough": {
        "name": "passthrough"
      }
    },
    "longDescription": "Invokes Lightning Web Components Jest unit tests.",
    "requiresProject": true,
    "flagsConfig": {
      "debug": {
        "kind": "boolean",
        "char": "d",
        "description": "run tests in debug mode",
        "longDescription": "Runs tests in a Node process that an external debugger can connect to. The run pauses until the debugger is connected. For more information, see: https://jestjs.io/docs/en/troubleshooting",
        "exclusive": [
          "watch"
        ],
        "allowNo": false,
        "type": "boolean"
      },
      "watch": {
        "kind": "boolean",
        "description": "run tests in watch mode",
        "longDescription": "Runs tests when a watched file changes. Watched files include the component under test and any files it references.",
        "exclusive": [
          "debug"
        ],
        "allowNo": false,
        "type": "boolean"
      }
    }
  },
  {
    "id": "force:lightning:lwc:test:setup",
    "description": "install Jest unit testing tools for Lightning Web Components.",
    "strict": true,
    "usage": "force:lightning:lwc:test:setup [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "@salesforce/sfdx-plugin-lwc-test",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "$ sfdx force:lightning:lwc:test:setup"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "multiple": false,
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      }
    },
    "args": {},
    "longDescription": "Installs Jest unit testing tools for Lightning Web Components. For more information, see the Lightning Web Components Dev Guide: https://developer.salesforce.com/docs/component-library/documentation/lwc/lwc.testing",
    "requiresProject": true
  },
  {
    "id": "generate:function",
    "summary": "Create a Salesforce Function with basic scaffolding specific to a given language.",
    "description": "Both '--language' and '--name' are required flags. Function names must start with a capital letter.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Create a JavaScript function:\n<%= config.bin %> <%= command.id %> --function-name myfunction --language javascript"
    ],
    "flags": {
      "function-name": {
        "name": "function-name",
        "type": "option",
        "char": "n",
        "description": "Function name. Must start with a capital letter.",
        "multiple": false,
        "exclusive": [
          "name"
        ]
      },
      "name": {
        "name": "name",
        "type": "option",
        "char": "n",
        "description": "Function name. Must start with a capital letter.",
        "hidden": true,
        "multiple": false,
        "exclusive": [
          "function-name"
        ]
      },
      "language": {
        "name": "language",
        "type": "option",
        "char": "l",
        "description": "The language in which the function is written.",
        "required": true,
        "multiple": false,
        "options": [
          "java",
          "javascript",
          "typescript"
        ]
      }
    },
    "args": {}
  },
  {
    "aliases": [],
    "args": {
      "command": {
        "description": "Command to show help for.",
        "name": "command",
        "required": false
      }
    },
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": false,
    "_base": "@oclif/core@4.2.4",
    "description": "Display help for sf.",
    "flags": {
      "nested-commands": {
        "char": "n",
        "description": "Include all nested commands in the output.",
        "name": "nested-commands",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "help",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "help.js"
    ],
    "pluginAlias": "@oclif/plugin-help",
    "pluginName": "@oclif/plugin-help",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "help"
    ]
  },
  {
    "aliases": [
      "whatsnew"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Display Salesforce CLI release notes on the command line.",
    "description": "By default, this command displays release notes for the currently installed CLI version on your computer. Use the --version flag to view release notes for a different release.",
    "examples": [
      "Display release notes for the currently installed CLI version:\n<%= config.bin %> <%= command.id %>",
      "Display release notes for CLI version 7.120.0:\n<%= config.bin %> <%= command.id %> --version 7.120.0",
      "Display release notes for the CLI version that corresponds to a tag (stable, stable-rc, latest, latest-rc, rc):\n<%= config.bin %> <%= command.id %> --version latest"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "version": {
        "char": "v",
        "name": "version",
        "summary": "CLI version or tag for which to display release notes.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "hook": {
        "hidden": true,
        "name": "hook",
        "summary": "This hidden parameter is used in post install or update hooks.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "info:releasenotes:display",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "info",
      "releasenotes",
      "display.js"
    ],
    "pluginAlias": "@salesforce/plugin-info",
    "pluginName": "@salesforce/plugin-info",
    "pluginType": "core",
    "aliasPermutations": [
      "whatsnew"
    ],
    "permutations": [
      "info:releasenotes:display",
      "releasenotes:info:display",
      "releasenotes:display:info",
      "info:display:releasenotes",
      "display:info:releasenotes",
      "display:releasenotes:info"
    ]
  },
  {
    "aliases": [
      "force:lightning:app:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a Lightning App.",
    "description": "Generates a Lightning App bundle in the specified directory or the current working directory. The bundle consists of multiple files in a folder with the designated name.",
    "examples": [
      "Generate the metadata files for a Lightning app bundle called \"myapp\" in the current directory:\n<%= config.bin %> <%= command.id %> --name myapp",
      "Similar to the previous example, but generate the files in the \"force-app/main/default/aura\" directory:\n<%= config.bin %> <%= command.id %> --name myapp --output-dir force-app/main/default/aura"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "appname"
        ],
        "char": "n",
        "deprecateAliases": true,
        "description": "The name can be up to 40 characters and must start with a letter.",
        "name": "name",
        "required": true,
        "summary": "Name of the generated Lightning App.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "template": {
        "char": "t",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "name": "template",
        "summary": "Template to use for file creation.",
        "default": "DefaultLightningApp",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "DefaultLightningApp"
        ],
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir"
        ],
        "char": "d",
        "deprecateAliases": true,
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "name": "output-dir",
        "summary": "Directory for saving the created files.",
        "default": ".",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "internal": {
        "char": "i",
        "hidden": true,
        "name": "internal",
        "summary": "Generate lightning bundles without creating a -meta.xml file.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "lightning:generate:app",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "lightning",
      "generate",
      "app.js"
    ],
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginName": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliasPermutations": [
      "force:lightning:app:create",
      "lightning:force:app:create",
      "lightning:app:force:create",
      "lightning:app:create:force",
      "force:app:lightning:create",
      "app:force:lightning:create",
      "app:lightning:force:create",
      "app:lightning:create:force",
      "force:app:create:lightning",
      "app:force:create:lightning",
      "app:create:force:lightning",
      "app:create:lightning:force",
      "force:lightning:create:app",
      "lightning:force:create:app",
      "lightning:create:force:app",
      "lightning:create:app:force",
      "force:create:lightning:app",
      "create:force:lightning:app",
      "create:lightning:force:app",
      "create:lightning:app:force",
      "force:create:app:lightning",
      "create:force:app:lightning",
      "create:app:force:lightning",
      "create:app:lightning:force"
    ],
    "permutations": [
      "lightning:generate:app",
      "generate:lightning:app",
      "generate:app:lightning",
      "lightning:app:generate",
      "app:lightning:generate",
      "app:generate:lightning"
    ]
  },
  {
    "aliases": [
      "force:lightning:component:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a bundle for an Aura component or a Lightning web component.",
    "description": "Generates the bundle in the specified directory or the current working directory. The bundle consists of multiple files in a directory with the designated name. Lightning web components are contained in the directory with name \"lwc\", Aura components in \"aura\".\n\nTo generate a Lightning web component, pass \"--type lwc\" to the command. If you don’t specify --type, Salesforce CLI generates an Aura component by default.",
    "examples": [
      "Generate the metadata files for an Aura component bundle in the current directory:\n<%= config.bin %> <%= command.id %> --name mycomponent",
      "Generate a Lightning web component bundle in the current directory:\n<%= config.bin %> <%= command.id %> --name mycomponent --type lwc",
      "Generate an Aura component bundle in the \"force-app/main/default/aura\" directory:\n<%= config.bin %> <%= command.id %> --name mycomponent --output-dir force-app/main/default/aura",
      "Generate a Lightning web component bundle in the \"force-app/main/default/lwc\" directory:\n<%= config.bin %> <%= command.id %> --name mycomponent --type lwc --output-dir force-app/main/default/lwc"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "componentname"
        ],
        "char": "n",
        "deprecateAliases": true,
        "description": "The name can be up to 40 characters and must start with a letter.",
        "name": "name",
        "required": true,
        "summary": "Name of the generated Lightning Component.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "template": {
        "char": "t",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "name": "template",
        "summary": "Template to use for file creation.",
        "default": "default",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "default",
          "analyticsDashboard",
          "analyticsDashboardWithStep"
        ],
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir"
        ],
        "char": "d",
        "deprecateAliases": true,
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "name": "output-dir",
        "summary": "Directory for saving the created files.",
        "default": ".",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "type": {
        "name": "type",
        "summary": "Type of the component bundle.",
        "default": "aura",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "aura",
          "lwc"
        ],
        "type": "option"
      },
      "internal": {
        "char": "i",
        "hidden": true,
        "name": "internal",
        "summary": "Generate lightning bundles without creating a -meta.xml file.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "lightning:generate:component",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "lightning",
      "generate",
      "component.js"
    ],
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginName": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliasPermutations": [
      "force:lightning:component:create",
      "lightning:force:component:create",
      "lightning:component:force:create",
      "lightning:component:create:force",
      "force:component:lightning:create",
      "component:force:lightning:create",
      "component:lightning:force:create",
      "component:lightning:create:force",
      "force:component:create:lightning",
      "component:force:create:lightning",
      "component:create:force:lightning",
      "component:create:lightning:force",
      "force:lightning:create:component",
      "lightning:force:create:component",
      "lightning:create:force:component",
      "lightning:create:component:force",
      "force:create:lightning:component",
      "create:force:lightning:component",
      "create:lightning:force:component",
      "create:lightning:component:force",
      "force:create:component:lightning",
      "create:force:component:lightning",
      "create:component:force:lightning",
      "create:component:lightning:force"
    ],
    "permutations": [
      "lightning:generate:component",
      "generate:lightning:component",
      "generate:component:lightning",
      "lightning:component:generate",
      "component:lightning:generate",
      "component:generate:lightning"
    ]
  },
  {
    "aliases": [
      "force:lightning:event:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a Lightning Event.",
    "description": "Generates a Lightning Event bundle in the specified directory or the current working directory. The bundle consists of multiple files in a folder with the designated name.",
    "examples": [
      "Generate the metadata files for a Lightning event bundle called \"myevent\" in the current directory:\n<%= config.bin %> <%= command.id %> --name myevent",
      "Similar to previous example, but generate the files in the \"force-app/main/default/aura\" directory:\n<%= config.bin %> <%= command.id %> --name myevent --output-dir force-app/main/default/aura"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "eventname"
        ],
        "char": "n",
        "deprecateAliases": true,
        "description": "The name can be up to 40 characters and must start with a letter.",
        "name": "name",
        "required": true,
        "summary": "Name of the generated Lightning Event.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "template": {
        "char": "t",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "name": "template",
        "summary": "Template to use for file creation.",
        "default": "DefaultLightningEvt",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "DefaultLightningEvt"
        ],
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir"
        ],
        "char": "d",
        "deprecateAliases": true,
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "name": "output-dir",
        "summary": "Directory for saving the created files.",
        "default": ".",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "internal": {
        "char": "i",
        "hidden": true,
        "name": "internal",
        "summary": "Generate lightning bundles without creating a -meta.xml file.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "lightning:generate:event",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "lightning",
      "generate",
      "event.js"
    ],
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginName": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliasPermutations": [
      "force:lightning:event:create",
      "lightning:force:event:create",
      "lightning:event:force:create",
      "lightning:event:create:force",
      "force:event:lightning:create",
      "event:force:lightning:create",
      "event:lightning:force:create",
      "event:lightning:create:force",
      "force:event:create:lightning",
      "event:force:create:lightning",
      "event:create:force:lightning",
      "event:create:lightning:force",
      "force:lightning:create:event",
      "lightning:force:create:event",
      "lightning:create:force:event",
      "lightning:create:event:force",
      "force:create:lightning:event",
      "create:force:lightning:event",
      "create:lightning:force:event",
      "create:lightning:event:force",
      "force:create:event:lightning",
      "create:force:event:lightning",
      "create:event:force:lightning",
      "create:event:lightning:force"
    ],
    "permutations": [
      "lightning:generate:event",
      "generate:lightning:event",
      "generate:event:lightning",
      "lightning:event:generate",
      "event:lightning:generate",
      "event:generate:lightning"
    ]
  },
  {
    "aliases": [
      "force:lightning:interface:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a Lightning Interface.",
    "description": "Generates a Lightning Interface bundle in the specified directory or the current working directory. The bundle consists of multiple files in a folder with the designated name.",
    "examples": [
      "Generate the metadata files for a Lightning interface bundle called \"myinterface\" in the current directory:\n<%= config.bin %> <%= command.id %> --name myinterface",
      "Similar to the previous example but generate the files in the \"force-app/main/default/aura\" directory:\n<%= config.bin %> <%= command.id %> --name myinterface --output-dir force-app/main/default/aura"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "interfacename"
        ],
        "char": "n",
        "deprecateAliases": true,
        "description": "The name can be up to 40 characters and must start with a letter.",
        "name": "name",
        "required": true,
        "summary": "Name of the generated Lightning Interface.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "template": {
        "char": "t",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "name": "template",
        "summary": "Template to use for file creation.",
        "default": "DefaultLightningIntf",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "DefaultLightningIntf"
        ],
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir"
        ],
        "char": "d",
        "deprecateAliases": true,
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "name": "output-dir",
        "summary": "Directory for saving the created files.",
        "default": ".",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "internal": {
        "char": "i",
        "hidden": true,
        "name": "internal",
        "summary": "Generate lightning bundles without creating a -meta.xml file.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "lightning:generate:interface",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "lightning",
      "generate",
      "interface.js"
    ],
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginName": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliasPermutations": [
      "force:lightning:interface:create",
      "lightning:force:interface:create",
      "lightning:interface:force:create",
      "lightning:interface:create:force",
      "force:interface:lightning:create",
      "interface:force:lightning:create",
      "interface:lightning:force:create",
      "interface:lightning:create:force",
      "force:interface:create:lightning",
      "interface:force:create:lightning",
      "interface:create:force:lightning",
      "interface:create:lightning:force",
      "force:lightning:create:interface",
      "lightning:force:create:interface",
      "lightning:create:force:interface",
      "lightning:create:interface:force",
      "force:create:lightning:interface",
      "create:force:lightning:interface",
      "create:lightning:force:interface",
      "create:lightning:interface:force",
      "force:create:interface:lightning",
      "create:force:interface:lightning",
      "create:interface:force:lightning",
      "create:interface:lightning:force"
    ],
    "permutations": [
      "lightning:generate:interface",
      "generate:lightning:interface",
      "generate:interface:lightning",
      "lightning:interface:generate",
      "interface:lightning:generate",
      "interface:generate:lightning"
    ]
  },
  {
    "aliases": [
      "force:lightning:test:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a Lightning test.",
    "description": "Generates the test in the specified directory or the current working directory. The .resource file and associated metadata file are generated.",
    "examples": [
      "Generate the metadata files for the Lightning test called MyLightningTest in the current directory:\n<%= config.bin %> <%= command.id %> --name MyLightningTest",
      "Similar to the previous example but generate the files in the \"force-app/main/default/lightningTests\" directory:\n<%= config.bin %> <%= command.id %> --name MyLightningTest --output-dir force-app/main/default/lightningTests"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "testname"
        ],
        "char": "n",
        "deprecateAliases": true,
        "description": "Name of the new Lightning test; can be up to 40 characters and must start with a letter.",
        "name": "name",
        "required": true,
        "summary": "Name of the generated Lightning Test.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "template": {
        "char": "t",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "name": "template",
        "summary": "Template to use for file creation.",
        "default": "DefaultLightningTest",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "DefaultLightningTest"
        ],
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir"
        ],
        "char": "d",
        "deprecateAliases": true,
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "name": "output-dir",
        "summary": "Directory for saving the created files.",
        "default": ".",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "internal": {
        "char": "i",
        "hidden": true,
        "name": "internal",
        "summary": "Generate lightning bundles without creating a -meta.xml file.",
        "allowNo": false,
        "type": "boolean"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "lightning:generate:test",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "lightning",
      "generate",
      "test.js"
    ],
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginName": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliasPermutations": [
      "force:lightning:test:create",
      "lightning:force:test:create",
      "lightning:test:force:create",
      "lightning:test:create:force",
      "force:test:lightning:create",
      "test:force:lightning:create",
      "test:lightning:force:create",
      "test:lightning:create:force",
      "force:test:create:lightning",
      "test:force:create:lightning",
      "test:create:force:lightning",
      "test:create:lightning:force",
      "force:lightning:create:test",
      "lightning:force:create:test",
      "lightning:create:force:test",
      "lightning:create:test:force",
      "force:create:lightning:test",
      "create:force:lightning:test",
      "create:lightning:force:test",
      "create:lightning:test:force",
      "force:create:test:lightning",
      "create:force:test:lightning",
      "create:test:force:lightning",
      "create:test:lightning:force"
    ],
    "permutations": [
      "lightning:generate:test",
      "generate:lightning:test",
      "generate:test:lightning",
      "lightning:test:generate",
      "test:lightning:generate",
      "test:generate:lightning"
    ]
  },
  {
    "id": "login:functions",
    "summary": "Log in to Salesforce Functions.",
    "description": "This step is required to develop or deploy Salesforce Functions.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Log in to Salesforce Functions:\n<%= config.bin %> <%= command.id %>"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      }
    },
    "args": {}
  },
  {
    "id": "login:functions:jwt",
    "summary": "Login using JWT instead of default web-based flow. This will authenticate you with both sf and Salesforce Functions.",
    "description": "Use this command when executing from a script.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Log in using JWT:\n<%= config.bin %> <%= command.id %> --username example@username.org --keyfile file.key --clientid 123456",
      "Log in and specify the org alias and URL, set as default org and default Dev Hub, and format output as JSON:\n<%= config.bin %> <%= command.id %> --username example@username.org --keyfile file.key --clientid 123456 --alias org-alias --set-default --set-default-dev-hub --instance-url https://path/to/instance --json"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "username": {
        "name": "username",
        "type": "option",
        "char": "u",
        "description": "Authentication username.",
        "required": true,
        "multiple": false
      },
      "keyfile": {
        "name": "keyfile",
        "type": "option",
        "char": "f",
        "description": "Path to JWT keyfile.",
        "required": true,
        "multiple": false
      },
      "clientid": {
        "name": "clientid",
        "type": "option",
        "char": "i",
        "description": "OAuth client ID.",
        "required": true,
        "multiple": false
      },
      "instance-url": {
        "name": "instance-url",
        "type": "option",
        "char": "l",
        "description": "The login URL of the instance the org lives on.",
        "multiple": false,
        "exclusive": [
          "instanceurl"
        ]
      },
      "instanceurl": {
        "name": "instanceurl",
        "type": "option",
        "char": "l",
        "description": "The login URL of the instance the org lives on.",
        "hidden": true,
        "multiple": false,
        "exclusive": [
          "instance-url"
        ]
      },
      "alias": {
        "name": "alias",
        "type": "option",
        "char": "a",
        "description": "Alias for the org.",
        "multiple": false
      },
      "set-default": {
        "name": "set-default",
        "type": "boolean",
        "char": "d",
        "description": "Set the org as the default that all org-related commands run against.",
        "allowNo": false
      },
      "set-default-dev-hub": {
        "name": "set-default-dev-hub",
        "type": "boolean",
        "char": "v",
        "description": "Set the org as the default Dev Hub for scratch org creation.",
        "allowNo": false
      }
    },
    "args": {}
  },
  {
    "id": "logout:functions",
    "summary": "Log out of your Salesforce Functions account.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Log out:\n<%= config.bin %> <%= command.id %>"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      }
    },
    "args": {}
  },
  {
    "summary": "Assign a permission set to one or more users of a scratch org.",
    "description": "To specify an alias for the --target-org or --on-behalf-of flags, use the CLI username alias, such as the one you set with the \"alias set\" command. Don't use the value of the Alias field of the User Salesforce object for the org user.\n\nTo assign multiple permission sets, either set multiple --name flags or a single --name flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --on-behalf-of.",
    "examples": [
      "Assign two permission sets called DreamHouse and CloudHouse to original admin user of your default scratch org:\n<%= config.bin %> <%= command.id %> --name DreamHouse --name CloudHouse",
      "Assign the Dreamhouse permission set to the original admin user of the scratch org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --name DreamHouse --target-org my-scratch",
      "Assign the Dreamhouse permission set to the specified list of users of your default scratch org:\n<%= config.bin %> <%= command.id %> --name DreamHouse --on-behalf-of user1@my.org --on-behalf-of user2 --on-behalf-of user"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "permsetname"
        ],
        "char": "n",
        "deprecateAliases": true,
        "name": "name",
        "required": true,
        "summary": "Permission set to assign.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "on-behalf-of": {
        "aliases": [
          "onbehalfof"
        ],
        "char": "b",
        "deprecateAliases": true,
        "name": "on-behalf-of",
        "summary": "Username or alias to assign the permission set to.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Scratch org alias or login user.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:assign:permset",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "assign",
      "permset.js"
    ],
    "aliases": [],
    "args": {},
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "pluginAlias": "@salesforce/plugin-user",
    "pluginName": "@salesforce/plugin-user",
    "pluginType": "core",
    "strict": true,
    "aliasPermutations": [],
    "permutations": [
      "org:assign:permset",
      "assign:org:permset",
      "assign:permset:org",
      "org:permset:assign",
      "permset:org:assign",
      "permset:assign:org"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Assign a permission set license to one or more users of a scratch org.",
    "description": "To specify an alias for the --target-org or --on-behalf-of flags, use the CLI username alias, such as the one you set with the \"alias set\" command. Don't use the value of the Alias field of the User Salesforce object for the org user.\n\nTo assign multiple permission sets, either set multiple --name flags or a single --name flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --on-behalf-of.",
    "examples": [
      "Assign the DreamHouse permission set license to original admin user of your default scratch org:\n<%= config.bin %> <%= command.id %> --name DreamHouse",
      "Assign two permission set licenses to the original admin user of the scratch org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --name DreamHouse --name CloudHouse --target-org my-scratch",
      "Assign the Dreamhouse permission set license to the specified list of users of your default scratch org:\n<%= config.bin %> <%= command.id %> --name DreamHouse --on-behalf-of user1@my.org --on-behalf-of user2 --on-behalf-of user3"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "perm-set-license",
          "psl"
        ],
        "char": "n",
        "name": "name",
        "required": true,
        "summary": "Name of the permission set license to assign.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "on-behalf-of": {
        "aliases": [
          "onbehalfof"
        ],
        "char": "b",
        "deprecateAliases": true,
        "name": "on-behalf-of",
        "summary": "Usernames or alias to assign the permission set license to.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Scratch org alias or login user.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:assign:permsetlicense",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "assign",
      "permsetlicense.js"
    ],
    "pluginAlias": "@salesforce/plugin-user",
    "pluginName": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "org:assign:permsetlicense",
      "assign:org:permsetlicense",
      "assign:permsetlicense:org",
      "org:permsetlicense:assign",
      "permsetlicense:org:assign",
      "permsetlicense:assign:org"
    ]
  },
  {
    "summary": "Create a sandbox org.",
    "description": "There are two ways to create a sandbox org: specify a definition file that contains the sandbox options or use the --name and --license-type flags to specify the two required options. If you want to set an option other than name or license type, such as apexClassId, you must use a definition file.\n\nYou can also use this command to clone an existing sandbox. Use the --source-sandbox-name flag to specify the existing sandbox name and the --name flag to the name of the new sandbox.",
    "examples": [
      "Create a sandbox org using a definition file and give it the alias \"MyDevSandbox\". The production org that contains the sandbox license has the alias \"prodOrg\".\n<%= config.bin %> <%= command.id %> --definition-file config/dev-sandbox-def.json --alias MyDevSandbox --target-org prodOrg",
      "Create a sandbox org by directly specifying its name and type of license (Developer) instead of using a definition file. Set the sandbox org as your default.\n<%= config.bin %> <%= command.id %> --name mysandbox --license-type Developer --alias MyDevSandbox --target-org prodOrg --set-default",
      "Clone the existing sandbox with name \"ExistingSandbox\" and name the new sandbox \"NewClonedSandbox\". Set the new sandbox as your default org. Wait for 30 minutes for the sandbox creation to complete.\n<%= config.bin %> <%= command.id %> --source-sandbox-name ExistingSandbox --name NewClonedSandbox --target-org prodOrg --alias MyDevSandbox --set-default --wait 30"
    ],
    "aliases": [
      "env:create:sandbox"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "definition-file": {
        "char": "f",
        "description": "The sandbox definition file is a blueprint for the sandbox. You can create different definition files for each sandbox type that you use in the development process. See <https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_sandbox_definition.htm> for all the options you can specify in the definition file.",
        "name": "definition-file",
        "summary": "Path to a sandbox definition file.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "set-default": {
        "char": "s",
        "name": "set-default",
        "summary": "Set the sandbox org as your default org.",
        "allowNo": false,
        "type": "boolean"
      },
      "alias": {
        "char": "a",
        "description": "When you create a sandbox, the generated usernames are based on the usernames present in the production org. To ensure uniqueness, the new usernames are appended with the name of the sandbox. For example, the username \"user@example.com\" in the production org results in the username \"user@example.com.mysandbox\" in a sandbox named \"mysandbox\". When you set an alias for a sandbox org, it's assigned to the resulting username of the user running this command.",
        "name": "alias",
        "summary": "Alias for the sandbox org.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal to you and displays the \"<%= config.bin %> org resume sandbox\" command you run to check the status of the create. The displayed command includes the job ID for the running sandbox creation.",
        "exclusive": [
          "async"
        ],
        "name": "wait",
        "summary": "Number of minutes to wait for the sandbox org to be ready.",
        "hasDynamicHelp": true,
        "helpValue": "<minutes>",
        "multiple": false,
        "type": "option"
      },
      "poll-interval": {
        "char": "i",
        "exclusive": [
          "async"
        ],
        "name": "poll-interval",
        "summary": "Number of seconds to wait between retries.",
        "hasDynamicHelp": true,
        "helpValue": "<seconds>",
        "multiple": false,
        "type": "option"
      },
      "async": {
        "description": "The command immediately displays the job ID and returns control of the terminal to you. This way, you can continue to use the CLI. To check the status of the sandbox creation, run \"<%= config.bin %> org resume sandbox\".",
        "exclusive": [
          "wait",
          "poll-interval"
        ],
        "name": "async",
        "summary": "Request the sandbox creation, but don't wait for it to complete.",
        "allowNo": false,
        "type": "boolean"
      },
      "name": {
        "char": "n",
        "description": "The name must be a unique alphanumeric string (10 or fewer characters) to identify the sandbox. You can’t reuse a name while a sandbox is in the process of being deleted.",
        "name": "name",
        "summary": "Name of the sandbox org.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "source-sandbox-name": {
        "aliases": [
          "clone",
          "c"
        ],
        "deprecateAliases": true,
        "description": "The value of --source-sandbox-name must be an existing sandbox. The existing sandbox, and the new sandbox specified with the --name flag, must both be associated with the production org (--target-org) that contains the sandbox licenses.\n\nYou can specify either --source-sandbox-name or --source-id when cloning an existing sandbox, but not both.",
        "exclusive": [
          "license-type",
          "source-id"
        ],
        "name": "source-sandbox-name",
        "summary": "Name of the sandbox org to clone.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "source-id": {
        "description": "The value of --source-id must be an existing sandbox. The existing sandbox, and the new sandbox specified with the --name flag, must both be associated with the production org (--target-org) that contains the sandbox licenses.\n\nYou can specify either --source-sandbox-name or --source-id when cloning an existing sandbox, but not both.",
        "exclusive": [
          "license-type"
        ],
        "name": "source-id",
        "summary": "ID of the sandbox org to clone.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "license-type": {
        "char": "l",
        "exclusive": [
          "source-sandbox-name",
          "source-id"
        ],
        "name": "license-type",
        "summary": "Type of sandbox license.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "Developer",
          "Developer_Pro",
          "Partial",
          "Full"
        ],
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "description": "When it creates the sandbox org, Salesforce copies the metadata, and optionally data, from your production org to the new sandbox org.",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the production org that contains the sandbox license.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "name": "no-prompt",
        "summary": "Don't prompt for confirmation about the sandbox configuration.",
        "allowNo": false,
        "type": "boolean"
      },
      "no-track-source": {
        "description": "We recommend you enable source tracking in Developer and Developer Pro sandbox, which is why it's the default behavior. Source tracking allows you to track the changes you make to your metadata, both in your local project and in the sandbox, and to detect any conflicts between the two.\n\nTo disable source tracking in the new sandbox, specify the --no-track-source flag. The main reason to disable source tracking is for performance. For example, while you probably want to deploy metadata and run Apex tests in your CI/CD jobs, you probably don't want to incur the costs of source tracking (checking for conflicts, polling the SourceMember object, various file system operations.) This is a good use case for disabling source tracking in the sandbox.",
        "name": "no-track-source",
        "summary": "Do not use source tracking for this sandbox.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "org:create:sandbox",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "create",
      "sandbox.js"
    ],
    "args": {},
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "pluginAlias": "@salesforce/plugin-org",
    "pluginName": "@salesforce/plugin-org",
    "pluginType": "core",
    "strict": true,
    "aliasPermutations": [
      "env:create:sandbox",
      "create:env:sandbox",
      "create:sandbox:env",
      "env:sandbox:create",
      "sandbox:env:create",
      "sandbox:create:env"
    ],
    "permutations": [
      "org:create:sandbox",
      "create:org:sandbox",
      "create:sandbox:org",
      "org:sandbox:create",
      "sandbox:org:create",
      "sandbox:create:org"
    ]
  },
  {
    "aliases": [
      "env:create:scratch"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Create a scratch org.",
    "description": "There are two ways to create a scratch org: either specify a definition file that contains the options or use the --edition flag to specify the one required option.\n\nFor either method, you can also use these flags; if you use them with --definition-file, they override their equivalent option in the scratch org definition file:\n\n    * --description\n    * --name  (equivalent to the \"orgName\" option)\n    * --username\n    * --release\n    * --edition\n    * --admin-email (equivalent to the \"adminEmail\" option)\n    * --source-org (equivalent to the \"sourceOrg\" option)\n\nIf you want to set options other than the preceding ones, such as org features or settings, you must use a definition file.\n\nYou must specify a Dev Hub to create a scratch org, either with the --target-dev-hub flag or by setting your default Dev Hub with the target-dev-hub configuration variable.",
    "examples": [
      "Create a Developer edition scratch org using your default Dev Hub and give the scratch org an alias:\n<%= config.bin %> <%= command.id %> --edition developer --alias my-scratch-org",
      "Create a scratch org with a definition file. Specify the Dev Hub using its alias, set the scratch org as your default, and specify that it expires in 3 days:\n<%= config.bin %> <%= command.id %> --target-dev-hub MyHub --definition-file config/project-scratch-def.json --set-default --duration-days 3",
      "Create a preview Enterprise edition scratch org; for use only during Salesforce release transition periods:\n<%= config.bin %> <%= command.id %> --edition enterprise --alias my-scratch-org --target-dev-hub MyHub --release preview"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "alias": {
        "char": "a",
        "description": "New scratch orgs include one administrator by default. The admin user's username is auto-generated and looks something like test-wvkpnfm5z113@example.com. When you set an alias for a new scratch org, it's assigned this username.",
        "name": "alias",
        "summary": "Alias for the scratch org.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "async": {
        "description": "The command immediately displays the job ID and returns control of the terminal to you. This way, you can continue to use the CLI. To resume the scratch org creation, run \"<%= config.bin %> org resume scratch\".",
        "name": "async",
        "summary": "Request the org, but don't wait for it to complete.",
        "allowNo": false,
        "type": "boolean"
      },
      "set-default": {
        "char": "d",
        "name": "set-default",
        "summary": "Set the scratch org as your default org",
        "allowNo": false,
        "type": "boolean"
      },
      "definition-file": {
        "char": "f",
        "description": "The scratch org definition file is a blueprint for the scratch org. It mimics the shape of an org that you use in the development life cycle, such as acceptance testing, packaging, or production. See <https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_def_file.htm> for all the option you can specify in the definition file.",
        "name": "definition-file",
        "summary": "Path to a scratch org definition file.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "char": "v",
        "description": "Overrides the value of the target-dev-hub configuration variable, if set.",
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "no-ancestors": {
        "char": "c",
        "helpGroup": "Packaging",
        "name": "no-ancestors",
        "summary": "Don't include second-generation managed package (2GP) ancestors in the scratch org.",
        "allowNo": false,
        "type": "boolean"
      },
      "edition": {
        "char": "e",
        "description": "The editions that begin with \"partner-\" are available only if the Dev Hub org is a Partner Business Org.",
        "helpGroup": "Definition File Override",
        "name": "edition",
        "summary": "Salesforce edition of the scratch org. Overrides the value of the \"edition\" option in the definition file, if set.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "developer",
          "enterprise",
          "group",
          "professional",
          "partner-developer",
          "partner-enterprise",
          "partner-group",
          "partner-professional"
        ],
        "type": "option"
      },
      "no-namespace": {
        "char": "m",
        "helpGroup": "Packaging",
        "name": "no-namespace",
        "summary": "Create the scratch org with no namespace, even if the Dev Hub has a namespace.",
        "allowNo": false,
        "type": "boolean"
      },
      "duration-days": {
        "char": "y",
        "name": "duration-days",
        "summary": "Number of days before the org expires.",
        "hasDynamicHelp": true,
        "helpValue": "<days>",
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal to you and displays the job ID. To resume the scratch org creation, run the org resume scratch command and pass it the job ID.",
        "name": "wait",
        "summary": "Number of minutes to wait for the scratch org to be ready.",
        "hasDynamicHelp": true,
        "helpValue": "<minutes>",
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "client-id": {
        "char": "i",
        "name": "client-id",
        "summary": "Consumer key of the Dev Hub connected app.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "track-source": {
        "char": "t",
        "description": "We recommend you enable source tracking in scratch orgs, which is why it's the default behavior. Source tracking allows you to track the changes you make to your metadata, both in your local project and in the scratch org, and to detect any conflicts between the two.\n\nTo disable source tracking in the new scratch org, specify the --no-track-source flag. The main reason to disable source tracking is for performance. For example, while you probably want to deploy metadata and run Apex tests in your CI/CD jobs, you probably don't want to incur the costs of source tracking (checking for conflicts, polling the SourceMember object, various file system operations.) This is a good use case for disabling source tracking in the scratch org.",
        "name": "track-source",
        "summary": "Use source tracking for this scratch org. Set --no-track-source to disable source tracking.",
        "allowNo": true,
        "type": "boolean"
      },
      "username": {
        "description": "The username must be unique within the entire scratch org and sandbox universe. You must add your own logic to ensure uniqueness.\n\nOmit this flag to have Salesforce generate a unique username for your org.",
        "helpGroup": "Definition File Override",
        "name": "username",
        "summary": "Username of the scratch org admin user. Overrides the value of the \"username\" option in the definition file, if set.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "description": {
        "helpGroup": "Definition File Override",
        "name": "description",
        "summary": "Description of the scratch org in the Dev Hub. Overrides the value of the \"description\" option in the definition file, if set.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "helpGroup": "Definition File Override",
        "name": "name",
        "summary": "Name of the org, such as \"Acme Company\". Overrides the value of the \"orgName\" option in the definition file, if set.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "release": {
        "description": "By default, scratch orgs are on the same release as the Dev Hub. During Salesforce release transition periods, you can override this default behavior and opt in or out of the new release.",
        "helpGroup": "Definition File Override",
        "name": "release",
        "summary": "Release of the scratch org as compared to the Dev Hub release.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "preview",
          "previous"
        ],
        "type": "option"
      },
      "admin-email": {
        "helpGroup": "Definition File Override",
        "name": "admin-email",
        "summary": "Email address that will be applied to the org's admin user. Overrides the value of the \"adminEmail\" option in the definition file, if set.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "source-org": {
        "helpGroup": "Definition File Override",
        "name": "source-org",
        "summary": "15-character ID of the org whose shape the new scratch org will be based on. Overrides the value of the \"sourceOrg\" option in the definition file, if set.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:create:scratch",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "create",
      "scratch.js"
    ],
    "pluginAlias": "@salesforce/plugin-org",
    "pluginName": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliasPermutations": [
      "env:create:scratch",
      "create:env:scratch",
      "create:scratch:env",
      "env:scratch:create",
      "scratch:env:create",
      "scratch:create:env"
    ],
    "permutations": [
      "org:create:scratch",
      "create:org:scratch",
      "create:scratch:org",
      "org:scratch:create",
      "scratch:org:create",
      "scratch:create:org"
    ]
  },
  {
    "aliases": [
      "force:org:shape:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.37",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Create a scratch org configuration (shape) based on the specified source org.",
    "description": "Scratch org shapes mimic the baseline setup (features, limits, edition, and Metadata API settings) of a source org without the extraneous data and metadata.\n\nRun \"sf org list shape\" to view the available org shapes and their IDs.\n\nTo create a scratch org from an org shape, include the \"sourceOrg\" property in the scratch org definition file and set it to the org ID of the source org. Then create a scratch org with the \"sf org create scratch\" command.",
    "examples": [
      "Create an org shape for the source org with alias SourceOrg:\n<%= config.bin %> <%= command.id %> --target-org SourceOrg"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:create:shape",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "create",
      "shape.js"
    ],
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginName": "@salesforce/plugin-signups",
    "pluginType": "user",
    "aliasPermutations": [
      "force:org:shape:create",
      "org:force:shape:create",
      "org:shape:force:create",
      "org:shape:create:force",
      "force:shape:org:create",
      "shape:force:org:create",
      "shape:org:force:create",
      "shape:org:create:force",
      "force:shape:create:org",
      "shape:force:create:org",
      "shape:create:force:org",
      "shape:create:org:force",
      "force:org:create:shape",
      "org:force:create:shape",
      "org:create:force:shape",
      "org:create:shape:force",
      "force:create:org:shape",
      "create:force:org:shape",
      "create:org:force:shape",
      "create:org:shape:force",
      "force:create:shape:org",
      "create:force:shape:org",
      "create:shape:force:org",
      "create:shape:org:force"
    ],
    "permutations": [
      "org:create:shape",
      "create:org:shape",
      "create:shape:org",
      "org:shape:create",
      "shape:org:create",
      "shape:create:org"
    ]
  },
  {
    "aliases": [
      "force:org:snapshot:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.37",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Create a snapshot of a scratch org.",
    "description": "A snapshot is a point-in-time copy of a scratch org. The copy is referenced by its unique name in a scratch org definition file.\n\nUse \"sf org get snapshot\" to get details, including status, about a snapshot creation request.\n\nTo create a scratch org from a snapshot, include the \"snapshot\" option (instead of \"edition\") in the scratch org definition file and set it to the name of the snapshot. Then use \"sf org create scratch\" to create the scratch org.",
    "examples": [
      "Create a snapshot called \"Dependencies\" using the source scratch org ID and your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --source-org 00Dxx0000000000 --name Dependencies --description 'Contains PackageA v1.1.0'",
      "Create a snapshot called \"NightlyBranch\" using the source scratch org username and a Dev Hub org with alias NightlyDevHub:\n<%= config.bin %> <%= command.id %> --source-org myuser@myorg --name NightlyBranch --description 'Contains PkgA v2.1.0 and PkgB 3.3.0' --target-dev-hub NightlyDevHub"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "source-org": {
        "aliases": [
          "sourceorg"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "source-org",
        "required": true,
        "summary": "ID or locally authenticated username or alias of scratch org to snapshot.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "snapshotname"
        ],
        "char": "n",
        "deprecateAliases": true,
        "name": "name",
        "required": true,
        "summary": "Unique name of snapshot.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "description": {
        "char": "d",
        "description": "Use this description to document the contents of the snapshot. We suggest that you include a reference point, such as a version control system tag or commit ID.",
        "name": "description",
        "summary": "Description of snapshot.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:create:snapshot",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "create",
      "snapshot.js"
    ],
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginName": "@salesforce/plugin-signups",
    "pluginType": "user",
    "aliasPermutations": [
      "force:org:snapshot:create",
      "org:force:snapshot:create",
      "org:snapshot:force:create",
      "org:snapshot:create:force",
      "force:snapshot:org:create",
      "snapshot:force:org:create",
      "snapshot:org:force:create",
      "snapshot:org:create:force",
      "force:snapshot:create:org",
      "snapshot:force:create:org",
      "snapshot:create:force:org",
      "snapshot:create:org:force",
      "force:org:create:snapshot",
      "org:force:create:snapshot",
      "org:create:force:snapshot",
      "org:create:snapshot:force",
      "force:create:org:snapshot",
      "create:force:org:snapshot",
      "create:org:force:snapshot",
      "create:org:snapshot:force",
      "force:create:snapshot:org",
      "create:force:snapshot:org",
      "create:snapshot:force:org",
      "create:snapshot:org:force"
    ],
    "permutations": [
      "org:create:snapshot",
      "create:org:snapshot",
      "create:snapshot:org",
      "org:snapshot:create",
      "snapshot:org:create",
      "snapshot:create:org"
    ]
  },
  {
    "aliases": [
      "force:user:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": false,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "deprecateAliases": true,
    "summary": "Create a user for a scratch org.",
    "description": "A scratch org includes one administrator user by default. For testing purposes, however, you sometimes need to create additional users.\n\nThe easiest way to create a user is to let this command assign default or generated characteristics to the new user. If you want to customize your new user, create a definition file and specify it with the --definition-file flag. In the file, you can include all the User sObject (SSalesforce object) fields and Salesforce DX-specific options, as described in \"User Definition File for Customizing a Scratch Org User\" (https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_users_def_file.htm). You can also specify these options on the command line.\n\nIf you don't customize your new user, this command creates a user with the following default characteristics:\n\n    * The username is the existing administrator’s username prepended with a timestamp, such as 1505759162830_test-wvkpnfm5z113@example.com.\n    * The user’s profile is Standard User.\n    * The values of the required fields of the User sObject are the corresponding values of the administrator user.\n    * The user has no password.\n\nUse the --set-alias flag to assign a simple name to the user that you can reference in later CLI commands. This alias is local and different from the Alias field of the User sObject record of the new user, which you set in the Setup UI.\n\nWhen this command completes, it displays the new username and user ID. Run the \"org display user\" command to get more information about the new user.\n\nAfter the new user has been created, Salesforce CLI automatically authenticates it to the scratch org so the new user can immediately start using the scratch org. The CLI uses the same authentication method that was used on the associated Dev Hub org. Due to Hyperforce limitations, the scratch org user creation fails if the Dev Hub authentication used the JWT flow and the scratch org is on Hyperforce. For this reason, if you plan to create scratch org users, authenticate to the Dev Hub org with either the \"org login web\" or \"org login sfdx-url\" command, and not \"org login jwt\".\n\nFor more information about user limits, defaults, and other considerations when creating a new scratch org user, see https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_users.htm.",
    "examples": [
      "Create a user for your default scratch org and let this command generate a username, user ID, and other characteristics:\n<%= config.bin %> <%= command.id %>",
      "Create a user with alias \"testuser1\" using a user definition file. Set the \"profileName\" option to \"Chatter Free User\", which overrides the value in the defintion file if it also exists there. Create the user for the scratch org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --set-alias testuser1 --definition-file config/project-user-def.json profileName='Chatter Free User' --target-org my-scratch",
      "Create a user by specifying the username, email, and perm set assignment at the command line; command fails if the username already exists in Salesforce:\n<%= config.bin %> <%= command.id %> username=testuser1@my.org email=me@my.org permsets=DreamHouse",
      "Create a user with a definition file, set the email value as specified (overriding any value in the definition file), and generate a password for the user. If the username in the definition file isn't unique, the command appends the org ID to make it unique:\n<%= config.bin %> <%= command.id %> --definition-file config/project-user-def.json email=me@my.org generatepassword=true --set-unique-username"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "set-alias": {
        "aliases": [
          "setalias"
        ],
        "char": "a",
        "deprecateAliases": true,
        "name": "set-alias",
        "summary": "Set an alias for the created username to reference in other CLI commands.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "definition-file": {
        "aliases": [
          "definitionfile"
        ],
        "char": "f",
        "deprecateAliases": true,
        "description": "The user definition file uses JSON format and can include any Salesforce User sObject field and Salesforce DX-specific options. See https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_users_def_file.htm for more information.",
        "name": "definition-file",
        "summary": "File path to a user definition file for customizing the new user.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "set-unique-username": {
        "aliases": [
          "setuniqueusername"
        ],
        "char": "s",
        "deprecateAliases": true,
        "description": "The new user’s username must be unique across all Salesforce orgs and in the form of an email address. If you let this command generate a username for you, it's guaranteed to be unique. If you specify an existing username in a definition file, the command fails. Set this flag to force the username to be unique; as a result, the username might be different than what you specify in the definition file.",
        "name": "set-unique-username",
        "summary": "Force the username, if specified in the definition file or at the command line, to be unique by appending the org ID.",
        "allowNo": false,
        "type": "boolean"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:create:user",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "create",
      "user.js"
    ],
    "pluginAlias": "@salesforce/plugin-user",
    "pluginName": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliasPermutations": [
      "force:user:create",
      "user:force:create",
      "user:create:force",
      "force:create:user",
      "create:force:user",
      "create:user:force"
    ],
    "permutations": [
      "org:create:user",
      "create:org:user",
      "create:user:org",
      "org:user:create",
      "user:org:create",
      "user:create:org"
    ]
  },
  {
    "aliases": [
      "env:delete:sandbox"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Delete a sandbox.",
    "description": "Salesforce CLI marks the org for deletion in the production org that contains the sandbox licenses and then deletes all local references to the org from your computer.\nSpecify a sandbox with either the username you used when you logged into it, or the alias you gave the sandbox when you created it. Run \"sf org list\" to view all your orgs, including sandboxes, and their aliases.\nBoth the sandbox and the associated production org must already be authenticated with the CLI to successfully delete the sandbox.",
    "examples": [
      "Delete a sandbox with alias my-sandbox:\n<%= config.bin %> <%= command.id %> --target-org my-sandbox",
      "Specify a username instead of an alias:\n<%= config.bin %> <%= command.id %> --target-org myusername@example.com.qa",
      "Delete the sandbox without prompting to confirm:\n<%= config.bin %> <%= command.id %> --target-org my-sandbox --no-prompt"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "char": "p",
        "name": "no-prompt",
        "summary": "Don't prompt the user to confirm the deletion.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "org:delete:sandbox",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "delete",
      "sandbox.js"
    ],
    "pluginAlias": "@salesforce/plugin-org",
    "pluginName": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliasPermutations": [
      "env:delete:sandbox",
      "delete:env:sandbox",
      "delete:sandbox:env",
      "env:sandbox:delete",
      "sandbox:env:delete",
      "sandbox:delete:env"
    ],
    "permutations": [
      "org:delete:sandbox",
      "delete:org:sandbox",
      "delete:sandbox:org",
      "org:sandbox:delete",
      "sandbox:org:delete",
      "sandbox:delete:org"
    ]
  },
  {
    "aliases": [
      "env:delete:scratch"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Delete a scratch org.",
    "description": "Salesforce CLI marks the org for deletion in the Dev Hub org and then deletes all local references to the org from your computer.\nSpecify a scratch org with either the username or the alias you gave the scratch org when you created it. Run \"sf org list\" to view all your orgs, including scratch orgs, and their aliases.",
    "examples": [
      "Delete a scratch org with alias my-scratch-org:\n<%= config.bin %> <%= command.id %> --target-org my-scratch-org",
      "Specify a username instead of an alias:\n<%= config.bin %> <%= command.id %> --target-org test-123456-abcdefg@example.com",
      "Delete the scratch org without prompting to confirm :\n<%= config.bin %> <%= command.id %> --target-org my-scratch-org --no-prompt"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "char": "p",
        "name": "no-prompt",
        "summary": "Don't prompt the user to confirm the deletion.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "org:delete:scratch",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "delete",
      "scratch.js"
    ],
    "pluginAlias": "@salesforce/plugin-org",
    "pluginName": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliasPermutations": [
      "env:delete:scratch",
      "delete:env:scratch",
      "delete:scratch:env",
      "env:scratch:delete",
      "scratch:env:delete",
      "scratch:delete:env"
    ],
    "permutations": [
      "org:delete:scratch",
      "delete:org:scratch",
      "delete:scratch:org",
      "org:scratch:delete",
      "scratch:org:delete",
      "scratch:delete:org"
    ]
  },
  {
    "aliases": [
      "force:org:shape:delete"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.37",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Delete all org shapes for a target org.",
    "description": "A source org can have only one active org shape. If you try to create an org shape for a source org that already has one, the previous shape is marked inactive and replaced by a new active shape. If you don’t want to create scratch orgs based on this shape, you can delete the org shape.",
    "examples": [
      "Delete all org shapes for the source org with alias SourceOrg:\n<%= config.bin %> <%= command.id %> --target-org SourceOrg",
      "Delete all org shapes without prompting:\n<%= config.bin %> <%= command.id %> --target-org SourceOrg --no-prompt"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "aliases": [
          "noprompt"
        ],
        "char": "p",
        "deprecateAliases": true,
        "name": "no-prompt",
        "summary": "Don't prompt for confirmation.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "org:delete:shape",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "delete",
      "shape.js"
    ],
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginName": "@salesforce/plugin-signups",
    "pluginType": "user",
    "aliasPermutations": [
      "force:org:shape:delete",
      "org:force:shape:delete",
      "org:shape:force:delete",
      "org:shape:delete:force",
      "force:shape:org:delete",
      "shape:force:org:delete",
      "shape:org:force:delete",
      "shape:org:delete:force",
      "force:shape:delete:org",
      "shape:force:delete:org",
      "shape:delete:force:org",
      "shape:delete:org:force",
      "force:org:delete:shape",
      "org:force:delete:shape",
      "org:delete:force:shape",
      "org:delete:shape:force",
      "force:delete:org:shape",
      "delete:force:org:shape",
      "delete:org:force:shape",
      "delete:org:shape:force",
      "force:delete:shape:org",
      "delete:force:shape:org",
      "delete:shape:force:org",
      "delete:shape:org:force"
    ],
    "permutations": [
      "org:delete:shape",
      "delete:org:shape",
      "delete:shape:org",
      "org:shape:delete",
      "shape:org:delete",
      "shape:delete:org"
    ]
  },
  {
    "aliases": [
      "force:org:snapshot:delete"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.37",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Delete a scratch org snapshot.",
    "description": "Dev Hub admins can delete any snapshot. Users can delete only their own snapshots, unless a Dev Hub admin gives the user Modify All permission, which works only with the Salesforce license.",
    "examples": [
      "Delete a snapshot from the default Dev Hub using the snapshot ID:\n<%= config.bin %> <%= command.id %> --snapshot 0Oo...",
      "Delete a snapshot from the specified Dev Hub using the snapshot name:\n<%= config.bin %> <%= command.id %> --snapshot BaseSnapshot --target-dev-hub SnapshotDevHub"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "snapshot": {
        "char": "s",
        "description": "The IDs of scratch org snapshots start with 0Oo.",
        "name": "snapshot",
        "required": true,
        "summary": "Name or ID of snapshot to delete.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "char": "p",
        "name": "no-prompt",
        "summary": "Don't prompt the user to confirm the deletion.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "org:delete:snapshot",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "delete",
      "snapshot.js"
    ],
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginName": "@salesforce/plugin-signups",
    "pluginType": "user",
    "aliasPermutations": [
      "force:org:snapshot:delete",
      "org:force:snapshot:delete",
      "org:snapshot:force:delete",
      "org:snapshot:delete:force",
      "force:snapshot:org:delete",
      "snapshot:force:org:delete",
      "snapshot:org:force:delete",
      "snapshot:org:delete:force",
      "force:snapshot:delete:org",
      "snapshot:force:delete:org",
      "snapshot:delete:force:org",
      "snapshot:delete:org:force",
      "force:org:delete:snapshot",
      "org:force:delete:snapshot",
      "org:delete:force:snapshot",
      "org:delete:snapshot:force",
      "force:delete:org:snapshot",
      "delete:force:org:snapshot",
      "delete:org:force:snapshot",
      "delete:org:snapshot:force",
      "force:delete:snapshot:org",
      "delete:force:snapshot:org",
      "delete:snapshot:force:org",
      "delete:snapshot:org:force"
    ],
    "permutations": [
      "org:delete:snapshot",
      "delete:org:snapshot",
      "delete:snapshot:org",
      "org:snapshot:delete",
      "snapshot:org:delete",
      "snapshot:delete:org"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Prevent Salesforce CLI from tracking changes in your source files between your project and an org.",
    "description": "Disabling source tracking has no direct effect on the org, it affects only your local environment. Specifically, Salesforce CLI stores the setting in the org's local configuration file so that no source tracking operations are executed when working with the org.",
    "examples": [
      "Disable source tracking for an org with alias \"myscratch\":\n<%= config.bin %> <%= command.id %> --target-org myscratch",
      "Disable source tracking for an org using a username:\n<%= config.bin %> <%= command.id %> --target-org you@example.com",
      "Disable source tracking for your default org:\n<%= config.bin %> <%= command.id %>"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:disable:tracking",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "disable",
      "tracking.js"
    ],
    "pluginAlias": "@salesforce/plugin-org",
    "pluginName": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "org:disable:tracking",
      "disable:org:tracking",
      "disable:tracking:org",
      "org:tracking:disable",
      "tracking:org:disable",
      "tracking:disable:org"
    ]
  },
  {
    "aliases": [
      "force:org:display"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Display information about an org.",
    "description": "Output includes your access token, client Id, connected status, org ID, instance URL, username, and alias, if applicable.\n\nUse --verbose to include the SFDX auth URL. WARNING: The SFDX auth URL contains sensitive information, such as a refresh token that can be used to access an org. Don't share or distribute this URL or token.\n\nIncluding --verbose displays the sfdxAuthUrl property only if you authenticated to the org using \"org login web\" (not \"org login jwt\").",
    "examples": [
      "Display information about your default org:\n$ <%= config.bin %> <%= command.id %>",
      "Display information, including the sfdxAuthUrl property, about the org with alias TestOrg1:\n$ <%= config.bin %> <%= command.id %> --target-org TestOrg1 --verbose"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Display the sfdxAuthUrl property.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:display",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "display.js"
    ],
    "pluginAlias": "@salesforce/plugin-org",
    "pluginName": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliasPermutations": [
      "force:org:display",
      "org:force:display",
      "org:display:force",
      "force:display:org",
      "display:force:org",
      "display:org:force"
    ],
    "permutations": [
      "org:display",
      "display:org"
    ]
  },
  {
    "aliases": [
      "force:user:display"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "deprecateAliases": true,
    "summary": "Display information about a Salesforce user.",
    "description": "Output includes the profile name, org ID, access token, instance URL, login URL, and alias if applicable. The displayed alias is local and different from the Alias field of the User sObject record of the new user, which you set in the Setup UI.",
    "examples": [
      "Display information about the admin user of your default scratch org:\n<%= config.bin %> <%= command.id %>",
      "Display information about the specified user and output in JSON format:\n<%= config.bin %> <%= command.id %> --target-org me@my.org --json"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:display:user",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "display",
      "user.js"
    ],
    "pluginAlias": "@salesforce/plugin-user",
    "pluginName": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliasPermutations": [
      "force:user:display",
      "user:force:display",
      "user:display:force",
      "force:display:user",
      "display:force:user",
      "display:user:force"
    ],
    "permutations": [
      "org:display:user",
      "display:org:user",
      "display:user:org",
      "org:user:display",
      "user:org:display",
      "user:display:org"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Allow Salesforce CLI to track changes in your source files between your project and an org.",
    "description": "Enabling source tracking has no direct effect on the org, it affects only your local environment. Specifically, Salesforce CLI stores the setting in the org's local configuration file so that source tracking operations are executed when working with the org.\n\nThis command throws an error if the org doesn't support tracking. Examples of orgs that don't support source tracking include Developer Edition orgs, production orgs, Partial Copy sandboxes, and Full sandboxes.",
    "examples": [
      "Enable source tracking for an org with alias \"myscratch\":\n<%= config.bin %> <%= command.id %> --target-org myscratch",
      "Enable source tracking for an org using a username:\n<%= config.bin %> <%= command.id %> --target-org you@example.com",
      "Enable source tracking for your default org:\n<%= config.bin %> <%= command.id %>"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:enable:tracking",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "enable",
      "tracking.js"
    ],
    "pluginAlias": "@salesforce/plugin-org",
    "pluginName": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "org:enable:tracking",
      "enable:org:tracking",
      "enable:tracking:org",
      "org:tracking:enable",
      "tracking:org:enable",
      "tracking:enable:org"
    ]
  },
  {
    "summary": "Generate a random password for scratch org users.",
    "description": "By default, new scratch orgs contain one admin user with no password. Use this command to generate or change a password for this admin user. After it's set, you can’t unset a password, you can only change it.\n\nYou can also use the --on-behalf-of flag to generate a password for a scratch org user that you've created locally with the \"org create user\" command. This command doesn't work for users you created in the scratch org using Setup.\n\nTo change the password strength, set the --complexity flag to a value between 0 and 5. Each value specifies the types of characters used in the generated password:\n\n0 - lower case letters only\n1 - lower case letters and numbers only\n2 - lower case letters and symbols only\n3 - lower and upper case letters and numbers only\n4 - lower and upper case letters and symbols only\n5 - lower and upper case letters and numbers and symbols only\n\nTo see a password that was previously generated, run \"org display user\".",
    "examples": [
      "Generate a password for the original admin user of your default scratch org:\n<%= config.bin %> <%= command.id %>",
      "Generate a password that contains 12 characters for the original admin user of the scratch org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --length 12 --target-org my-scratch",
      "Generate a password for your default scratch org admin user that uses lower and upper case letters and numbers only:\n<%= config.bin %> <%= command.id %> --complexity 3",
      "Generate a password for the specified users in the default scratch org; these users must have been created locally with the \"org create user\" command:\n<%= config.bin %> <%= command.id %> --on-behalf-of user1@my.org --on-behalf-of user2@my.org --on-behalf-of user3@my.org"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "on-behalf-of": {
        "aliases": [
          "onbehalfof"
        ],
        "char": "b",
        "deprecateAliases": true,
        "name": "on-behalf-of",
        "summary": "Comma-separated list of usernames or aliases to assign the password to; must have been created locally with the \"org create user\" command.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "length": {
        "char": "l",
        "name": "length",
        "summary": "Number of characters in the generated password; valid values are between 8 and 100.",
        "default": 13,
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "complexity": {
        "char": "c",
        "name": "complexity",
        "summary": "Level of password complexity or strength; the higher the value, the stronger the password.",
        "default": 5,
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:generate:password",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "generate",
      "password.js"
    ],
    "aliases": [],
    "args": {},
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "pluginAlias": "@salesforce/plugin-user",
    "pluginName": "@salesforce/plugin-user",
    "pluginType": "core",
    "strict": true,
    "aliasPermutations": [],
    "permutations": [
      "org:generate:password",
      "generate:org:password",
      "generate:password:org",
      "org:password:generate",
      "password:org:generate",
      "password:generate:org"
    ]
  },
  {
    "aliases": [
      "force:org:snapshot:get"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.37",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Get details about a scratch org snapshot.",
    "description": "Snapshot creation can take a while. Use this command with the snapshot name or ID to check its creation status. After the status changes to Active, you can use the snapshot to create scratch orgs.\n\nTo create a snapshot, use the \"sf org create snapshot\" command. To retrieve a list of all snapshots, use \"sf org list snapshot\".",
    "examples": [
      "Get snapshot details using its ID and the default Dev Hub org:\n<%= config.bin %> <%= command.id %> --snapshot 0Oo...",
      "Get snapshot details using its name from a Dev Hub org with alias SnapshotDevHub:\n<%= config.bin %> <%= command.id %> --snapshot Dependencies --target-dev-hub SnapshotDevHub"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "snapshot": {
        "char": "s",
        "description": "The IDs of scratch org snapshots start with 0Oo.",
        "name": "snapshot",
        "required": true,
        "summary": "Name or ID of snapshot to retrieve.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:get:snapshot",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "get",
      "snapshot.js"
    ],
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginName": "@salesforce/plugin-signups",
    "pluginType": "user",
    "aliasPermutations": [
      "force:org:snapshot:get",
      "org:force:snapshot:get",
      "org:snapshot:force:get",
      "org:snapshot:get:force",
      "force:snapshot:org:get",
      "snapshot:force:org:get",
      "snapshot:org:force:get",
      "snapshot:org:get:force",
      "force:snapshot:get:org",
      "snapshot:force:get:org",
      "snapshot:get:force:org",
      "snapshot:get:org:force",
      "force:org:get:snapshot",
      "org:force:get:snapshot",
      "org:get:force:snapshot",
      "org:get:snapshot:force",
      "force:get:org:snapshot",
      "get:force:org:snapshot",
      "get:org:force:snapshot",
      "get:org:snapshot:force",
      "force:get:snapshot:org",
      "get:force:snapshot:org",
      "get:snapshot:force:org",
      "get:snapshot:org:force"
    ],
    "permutations": [
      "org:get:snapshot",
      "get:org:snapshot",
      "get:snapshot:org",
      "org:snapshot:get",
      "snapshot:org:get",
      "snapshot:get:org"
    ]
  },
  {
    "aliases": [
      "force:org:list"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "List all orgs you’ve created or authenticated to.",
    "examples": [
      "List all orgs you've created or authenticated to:\n$ <%= config.bin %> <%= command.id %>",
      "List all orgs, including expired, deleted, and unknown-status orgs; don't include the connection status:\n$ <%= config.bin %> <%= command.id %> --skip-connection-status --all",
      "List orgs and remove local org authorization info about non-active scratch orgs:\n$ <%= config.bin %> <%= command.id %> --clean"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "name": "verbose",
        "summary": "List more information about each org.",
        "allowNo": false,
        "type": "boolean"
      },
      "all": {
        "name": "all",
        "summary": "Include expired, deleted, and unknown-status scratch orgs.",
        "allowNo": false,
        "type": "boolean"
      },
      "clean": {
        "name": "clean",
        "summary": "Remove all local org authorizations for non-active scratch orgs. Use \"org logout\" to remove non-scratch orgs.",
        "allowNo": false,
        "type": "boolean"
      },
      "no-prompt": {
        "aliases": [
          "noprompt"
        ],
        "char": "p",
        "deprecateAliases": true,
        "name": "no-prompt",
        "relationships": [
          {
            "type": "some",
            "flags": [
              {
                "name": "clean"
              }
            ]
          }
        ],
        "summary": "Don't prompt for confirmation.",
        "allowNo": false,
        "type": "boolean"
      },
      "skip-connection-status": {
        "aliases": [
          "skipconnectionstatus"
        ],
        "deprecateAliases": true,
        "name": "skip-connection-status",
        "summary": "Skip retrieving the connection status of non-scratch orgs.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:list",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "list.js"
    ],
    "pluginAlias": "@salesforce/plugin-org",
    "pluginName": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliasPermutations": [
      "force:org:list",
      "org:force:list",
      "org:list:force",
      "force:list:org",
      "list:force:org",
      "list:org:force"
    ],
    "permutations": [
      "org:list",
      "list:org"
    ]
  },
  {
    "aliases": [
      "force:auth:list",
      "auth:list"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "List authorization information about the orgs you created or logged into.",
    "description": "This command uses local authorization information that Salesforce CLI caches when you create a scratch org or log into an org. The command doesn't actually connect to the orgs to verify that they're still active. As a result, this command executes very quickly. If you want to view live information about your authorized orgs, such as their connection status, use the \"org list\" command.",
    "examples": [
      "List local authorization information about your orgs:\n<%= config.bin %> <%= command.id %>"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:list:auth",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "list",
      "auth.js"
    ],
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginName": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliasPermutations": [
      "force:auth:list",
      "auth:force:list",
      "auth:list:force",
      "force:list:auth",
      "list:force:auth",
      "list:auth:force",
      "auth:list",
      "list:auth"
    ],
    "permutations": [
      "org:list:auth",
      "list:org:auth",
      "list:auth:org",
      "org:auth:list",
      "auth:org:list",
      "auth:list:org"
    ]
  },
  {
    "aliases": [
      "force:limits:api:display",
      "limits:api:display"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "deprecateAliases": true,
    "summary": "Display information about limits in your org.",
    "description": "For each limit, this command returns the maximum allocation and the remaining allocation based on usage. See this topic for a description of each limit: https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_limits.htm.",
    "examples": [
      "Display limits in your default org:\n<%= config.bin %> <%= command.id %>",
      "Display limits in the org with alias \"my-scratch-org\":\n<%= config.bin %> <%= command.id %> --target-org my-scratch-org"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:list:limits",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "list",
      "limits.js"
    ],
    "pluginAlias": "@salesforce/plugin-limits",
    "pluginName": "@salesforce/plugin-limits",
    "pluginType": "core",
    "aliasPermutations": [
      "force:limits:api:display",
      "limits:force:api:display",
      "limits:api:force:display",
      "limits:api:display:force",
      "force:api:limits:display",
      "api:force:limits:display",
      "api:limits:force:display",
      "api:limits:display:force",
      "force:api:display:limits",
      "api:force:display:limits",
      "api:display:force:limits",
      "api:display:limits:force",
      "force:limits:display:api",
      "limits:force:display:api",
      "limits:display:force:api",
      "limits:display:api:force",
      "force:display:limits:api",
      "display:force:limits:api",
      "display:limits:force:api",
      "display:limits:api:force",
      "force:display:api:limits",
      "display:force:api:limits",
      "display:api:force:limits",
      "display:api:limits:force",
      "limits:api:display",
      "api:limits:display",
      "api:display:limits",
      "limits:display:api",
      "display:limits:api",
      "display:api:limits"
    ],
    "permutations": [
      "org:list:limits",
      "list:org:limits",
      "list:limits:org",
      "org:limits:list",
      "limits:org:list",
      "limits:list:org"
    ]
  },
  {
    "aliases": [
      "force:mdapi:listmetadata"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "List the metadata components and properties of a specified type.",
    "description": "Use this command to identify individual components in your manifest file or if you want a high-level view of particular metadata types in your org. For example, you can use this command to return a list of names of all the CustomObject or Layout components in your org, then use this information in a retrieve command that returns a subset of these components.\n\nThe username that you use to connect to the org must have the Modify All Data or Modify Metadata Through Metadata API Functions permission.",
    "examples": [
      "List the CustomObject components, and their properties, in the org with alias \"my-dev-org\":\n$ <%= config.bin %> <%= command.id %> --metadata-type CustomObject --target-org my-dev-org",
      "List the CustomObject components in your default org, write the output to the specified file, and use API version 57.0:\n$ <%= config.bin %> <%= command.id %> --metadata-type CustomObject --api-version 57.0 --output-file /path/to/outputfilename.txt",
      "List the Dashboard components in your default org that are contained in the \"folderSales\" folder, write the output to the specified file, and use API version 57.0:\n$ <%= config.bin %> <%= command.id %> --metadata-type Dashboard --folder folderSales --api-version 57.0 --output-file /path/to/outputfilename.txt"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion",
          "a"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "summary": "API version to use; default is the most recent API version.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "output-file": {
        "aliases": [
          "resultfile"
        ],
        "char": "f",
        "deprecateAliases": true,
        "name": "output-file",
        "summary": "Pathname of the file in which to write the results.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "metadata-type": {
        "aliases": [
          "metadatatype"
        ],
        "char": "m",
        "deprecateAliases": true,
        "name": "metadata-type",
        "required": true,
        "summary": "Metadata type to be retrieved, such as CustomObject; metadata type names are case-sensitive.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "folder": {
        "description": "Examples of metadata types that use folders are Dashboard, Document, EmailTemplate, and Report.",
        "name": "folder",
        "summary": "Folder associated with the component; required for components that use folders; folder names are case-sensitive.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:list:metadata",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "list",
      "metadata.js"
    ],
    "pluginAlias": "@salesforce/plugin-org",
    "pluginName": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliasPermutations": [
      "force:mdapi:listmetadata",
      "mdapi:force:listmetadata",
      "mdapi:listmetadata:force",
      "force:listmetadata:mdapi",
      "listmetadata:force:mdapi",
      "listmetadata:mdapi:force"
    ],
    "permutations": [
      "org:list:metadata",
      "list:org:metadata",
      "list:metadata:org",
      "org:metadata:list",
      "metadata:org:list",
      "metadata:list:org"
    ]
  },
  {
    "aliases": [
      "force:mdapi:describemetadata"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Display details about the metadata types that are enabled for your org.",
    "description": "The information includes Apex classes and triggers, custom objects, custom fields on standard objects, tab sets that define an app, and many other metadata types. Use this information to identify the syntax needed for a <name> element in a manifest file (package.xml).\n\nThe username that you use to connect to the org must have the Modify All Data or Modify Metadata Through Metadata API Functions permission.",
    "examples": [
      "Display information about all known and enabled metadata types in the org with alias \"my-dev-org\" using API version 57.0:\n$ <%= config.bin %> <%= command.id %> --api-version 57.0 --target-org my-dev-org",
      "Display only the metadata types that aren't yet supported by Salesforce CLI in your default org and write the results to the specified file:\n$ <%= config.bin %> <%= command.id %> --output-file /path/to/outputfilename.txt --filter-known"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion",
          "a"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "summary": "API version to use; default is the most recent API version.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "output-file": {
        "aliases": [
          "resultfile"
        ],
        "char": "f",
        "deprecateAliases": true,
        "description": "Directing the output to a file makes it easier to extract relevant information for your package.xml manifest file. The default output destination is the terminal or command window console.",
        "name": "output-file",
        "summary": "Pathname of the file in which to write the results.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "filter-known": {
        "aliases": [
          "filterknown"
        ],
        "char": "k",
        "deprecateAliases": true,
        "hidden": true,
        "name": "filter-known",
        "summary": "Filter the known metadata types from the result to display only the types not yet fully supported by Salesforce CLI.\n\nfilter metadata known by the CLI",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "org:list:metadata-types",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "list",
      "metadata-types.js"
    ],
    "pluginAlias": "@salesforce/plugin-org",
    "pluginName": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliasPermutations": [
      "force:mdapi:describemetadata",
      "mdapi:force:describemetadata",
      "mdapi:describemetadata:force",
      "force:describemetadata:mdapi",
      "describemetadata:force:mdapi",
      "describemetadata:mdapi:force"
    ],
    "permutations": [
      "org:list:metadata-types",
      "list:org:metadata-types",
      "list:metadata-types:org",
      "org:metadata-types:list",
      "metadata-types:org:list",
      "metadata-types:list:org"
    ]
  },
  {
    "aliases": [
      "force:org:shape:list"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.37",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "List all org shapes you’ve created.",
    "description": "The output includes the alias, username, and ID of the source org, the status of the org shape creation, and more. Use the org ID to update your scratch org configuration file so you can create a scratch org based on this org shape.",
    "examples": [
      "List all org shapes you've created:\n<%= config.bin %> <%= command.id %>",
      "List all org shapes in JSON format and write the output to a file:\n<%= config.bin %> <%= command.id %> --json > tmp/MyOrgShapeList.json"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "hidden": true,
        "name": "verbose",
        "summary": "List more information about each org shape.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:list:shape",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "list",
      "shape.js"
    ],
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginName": "@salesforce/plugin-signups",
    "pluginType": "user",
    "aliasPermutations": [
      "force:org:shape:list",
      "org:force:shape:list",
      "org:shape:force:list",
      "org:shape:list:force",
      "force:shape:org:list",
      "shape:force:org:list",
      "shape:org:force:list",
      "shape:org:list:force",
      "force:shape:list:org",
      "shape:force:list:org",
      "shape:list:force:org",
      "shape:list:org:force",
      "force:org:list:shape",
      "org:force:list:shape",
      "org:list:force:shape",
      "org:list:shape:force",
      "force:list:org:shape",
      "list:force:org:shape",
      "list:org:force:shape",
      "list:org:shape:force",
      "force:list:shape:org",
      "list:force:shape:org",
      "list:shape:force:org",
      "list:shape:org:force"
    ],
    "permutations": [
      "org:list:shape",
      "list:org:shape",
      "list:shape:org",
      "org:shape:list",
      "shape:org:list",
      "shape:list:org"
    ]
  },
  {
    "aliases": [
      "force:org:snapshot:list"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.0.37",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "List scratch org snapshots.",
    "description": "You can view all the snapshots in a Dev Hub that you have access to. If you’re an admin, you can see all snapshots associated with the Dev Hub org. If you’re a user, you can see only your snapshots unless a Dev Hub admin gives you View All permissions.\n\nTo create a snapshot, use the \"sf org create snapshot\" command. To get details about a snapshot request, use \"sf org get snapshot\".",
    "examples": [
      "List snapshots in the default Dev Hub:\n<%= config.bin %> <%= command.id %>",
      "List snapshots in the Dev Hub with alias SnapshotDevHub:\n<%= config.bin %> <%= command.id %> --target-dev-hub SnapshotDevHub"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:list:snapshot",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "list",
      "snapshot.js"
    ],
    "pluginAlias": "@salesforce/plugin-signups",
    "pluginName": "@salesforce/plugin-signups",
    "pluginType": "user",
    "aliasPermutations": [
      "force:org:snapshot:list",
      "org:force:snapshot:list",
      "org:snapshot:force:list",
      "org:snapshot:list:force",
      "force:snapshot:org:list",
      "snapshot:force:org:list",
      "snapshot:org:force:list",
      "snapshot:org:list:force",
      "force:snapshot:list:org",
      "snapshot:force:list:org",
      "snapshot:list:force:org",
      "snapshot:list:org:force",
      "force:org:list:snapshot",
      "org:force:list:snapshot",
      "org:list:force:snapshot",
      "org:list:snapshot:force",
      "force:list:org:snapshot",
      "list:force:org:snapshot",
      "list:org:force:snapshot",
      "list:org:snapshot:force",
      "force:list:snapshot:org",
      "list:force:snapshot:org",
      "list:snapshot:force:org",
      "list:snapshot:org:force"
    ],
    "permutations": [
      "org:list:snapshot",
      "list:org:snapshot",
      "list:snapshot:org",
      "org:snapshot:list",
      "snapshot:org:list",
      "snapshot:list:org"
    ]
  },
  {
    "aliases": [
      "force:limits:recordcounts:display",
      "limits:recordcounts:display"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "deprecateAliases": true,
    "summary": "Display record counts for the specified standard or custom objects.",
    "description": "Use this command to get an approximate count of the records in standard or custom objects in your org. These record counts are the same as the counts listed in the Storage Usage page in the Setup UI. The record counts are approximate because they're calculated asynchronously and your org's storage usage isn't updated immediately. To display all available record counts, run the command without the --sobject flag.",
    "examples": [
      "Display all available record counts in your default org:\n<%= config.bin %> <%= command.id %>",
      "Display record counts for the Account, Contact, Lead, and Opportunity objects in your default org:\n<%= config.bin %> <%= command.id %> --sobject Account --sobject Contact --sobject Lead --sobject Opportunity",
      "Display record counts for the Account and Lead objects for the org with alias \"my-scratch-org\":\n<%= config.bin %> <%= command.id %> --sobject Account --sobject Lead --target-org my-scratch-org"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sobject": {
        "aliases": [
          "sobjecttype"
        ],
        "char": "s",
        "name": "sobject",
        "summary": "API name of the standard or custom object for which to display record counts.",
        "default": [],
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:list:sobject:record-counts",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "list",
      "sobject",
      "record-counts.js"
    ],
    "pluginAlias": "@salesforce/plugin-limits",
    "pluginName": "@salesforce/plugin-limits",
    "pluginType": "core",
    "aliasPermutations": [
      "force:limits:recordcounts:display",
      "limits:force:recordcounts:display",
      "limits:recordcounts:force:display",
      "limits:recordcounts:display:force",
      "force:recordcounts:limits:display",
      "recordcounts:force:limits:display",
      "recordcounts:limits:force:display",
      "recordcounts:limits:display:force",
      "force:recordcounts:display:limits",
      "recordcounts:force:display:limits",
      "recordcounts:display:force:limits",
      "recordcounts:display:limits:force",
      "force:limits:display:recordcounts",
      "limits:force:display:recordcounts",
      "limits:display:force:recordcounts",
      "limits:display:recordcounts:force",
      "force:display:limits:recordcounts",
      "display:force:limits:recordcounts",
      "display:limits:force:recordcounts",
      "display:limits:recordcounts:force",
      "force:display:recordcounts:limits",
      "display:force:recordcounts:limits",
      "display:recordcounts:force:limits",
      "display:recordcounts:limits:force",
      "limits:recordcounts:display",
      "recordcounts:limits:display",
      "recordcounts:display:limits",
      "limits:display:recordcounts",
      "display:limits:recordcounts",
      "display:recordcounts:limits"
    ],
    "permutations": [
      "org:list:sobject:record-counts",
      "list:org:sobject:record-counts",
      "list:sobject:org:record-counts",
      "list:sobject:record-counts:org",
      "org:sobject:list:record-counts",
      "sobject:org:list:record-counts",
      "sobject:list:org:record-counts",
      "sobject:list:record-counts:org",
      "org:sobject:record-counts:list",
      "sobject:org:record-counts:list",
      "sobject:record-counts:org:list",
      "sobject:record-counts:list:org",
      "org:list:record-counts:sobject",
      "list:org:record-counts:sobject",
      "list:record-counts:org:sobject",
      "list:record-counts:sobject:org",
      "org:record-counts:list:sobject",
      "record-counts:org:list:sobject",
      "record-counts:list:org:sobject",
      "record-counts:list:sobject:org",
      "org:record-counts:sobject:list",
      "record-counts:org:sobject:list",
      "record-counts:sobject:org:list",
      "record-counts:sobject:list:org"
    ]
  },
  {
    "aliases": [
      "force:user:list"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "deprecateAliases": true,
    "summary": "List all locally-authenticated users of an org.",
    "description": "For scratch orgs, the list includes any users you've created with the \"org create user\" command; the original scratch org admin user is marked with \"(A)\". For other orgs, the list includes the users you used to authenticate to the org.",
    "examples": [
      "List the locally-authenticated users of your default org:\n<%= config.bin %> <%= command.id %>",
      "List the locally-authenticated users of the specified org:\n<%= config.bin %> <%= command.id %> --target-org me@my.org"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:list:users",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "list",
      "users.js"
    ],
    "pluginAlias": "@salesforce/plugin-user",
    "pluginName": "@salesforce/plugin-user",
    "pluginType": "core",
    "aliasPermutations": [
      "force:user:list",
      "user:force:list",
      "user:list:force",
      "force:list:user",
      "list:force:user",
      "list:user:force"
    ],
    "permutations": [
      "org:list:users",
      "list:org:users",
      "list:users:org",
      "org:users:list",
      "users:org:list",
      "users:list:org"
    ]
  },
  {
    "aliases": [
      "force:auth:accesstoken:store",
      "auth:accesstoken:store"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Authorize an org using an existing Salesforce access token.",
    "description": "By default, the command runs interactively and asks you for the access token. If you previously authorized the org, the command prompts whether you want to overwrite the local file. Specify --no-prompt to not be prompted.\n\nTo use the command in a CI/CD script, set the SF_ACCESS_TOKEN environment variable to the access token. Then run the command with the --no-prompt parameter.",
    "examples": [
      "Authorize an org on https://mycompany.my.salesforce.com; the command prompts you for the access token:\n<%= config.bin %> <%= command.id %> --instance-url https://mycompany.my.salesforce.com",
      "Authorize the org without being prompted; you must have previously set the SF_ACCESS_TOKEN environment variable to the access token:\n<%= config.bin %> <%= command.id %> --instance-url https://dev-hub.my.salesforce.com --no-prompt"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "instance-url": {
        "aliases": [
          "instanceurl"
        ],
        "char": "r",
        "deprecateAliases": true,
        "description": "If you specify an --instance-url value, this value overrides the sfdcLoginUrl value in your sfdx-project.json file.\n\nTo specify a My Domain URL, use the format \"https://<MyDomainName>.my.salesforce.com\".\n\nTo specify a sandbox, set --instance-url to \"https://<MyDomainName>--<SandboxName>.sandbox.my.salesforce.com\".",
        "name": "instance-url",
        "required": true,
        "summary": "URL of the instance that the org lives on.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "set-default-dev-hub": {
        "aliases": [
          "setdefaultdevhub",
          "setdefaultdevhubusername"
        ],
        "char": "d",
        "deprecateAliases": true,
        "name": "set-default-dev-hub",
        "summary": "Set the authenticated org as the default Dev Hub.",
        "allowNo": false,
        "type": "boolean"
      },
      "set-default": {
        "aliases": [
          "setdefaultusername"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "set-default",
        "summary": "Set the authenticated org as the default that all org-related commands run against.",
        "allowNo": false,
        "type": "boolean"
      },
      "alias": {
        "aliases": [
          "setalias"
        ],
        "char": "a",
        "deprecateAliases": true,
        "name": "alias",
        "summary": "Alias for the org.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "aliases": [
          "noprompt"
        ],
        "char": "p",
        "deprecateAliases": true,
        "name": "no-prompt",
        "required": false,
        "summary": "Don't prompt for confirmation.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:login:access-token",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "login",
      "access-token.js"
    ],
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginName": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliasPermutations": [
      "force:auth:accesstoken:store",
      "auth:force:accesstoken:store",
      "auth:accesstoken:force:store",
      "auth:accesstoken:store:force",
      "force:accesstoken:auth:store",
      "accesstoken:force:auth:store",
      "accesstoken:auth:force:store",
      "accesstoken:auth:store:force",
      "force:accesstoken:store:auth",
      "accesstoken:force:store:auth",
      "accesstoken:store:force:auth",
      "accesstoken:store:auth:force",
      "force:auth:store:accesstoken",
      "auth:force:store:accesstoken",
      "auth:store:force:accesstoken",
      "auth:store:accesstoken:force",
      "force:store:auth:accesstoken",
      "store:force:auth:accesstoken",
      "store:auth:force:accesstoken",
      "store:auth:accesstoken:force",
      "force:store:accesstoken:auth",
      "store:force:accesstoken:auth",
      "store:accesstoken:force:auth",
      "store:accesstoken:auth:force",
      "auth:accesstoken:store",
      "accesstoken:auth:store",
      "accesstoken:store:auth",
      "auth:store:accesstoken",
      "store:auth:accesstoken",
      "store:accesstoken:auth"
    ],
    "permutations": [
      "org:login:access-token",
      "login:org:access-token",
      "login:access-token:org",
      "org:access-token:login",
      "access-token:org:login",
      "access-token:login:org"
    ]
  },
  {
    "aliases": [
      "force:auth:device:login",
      "auth:device:login"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Authorize an org using a device code.",
    "description": "Use this command to allow a device to connect to an org.\n\nWhen you run this command, it first displays an 8-digit device code and the URL for verifying the code on your org. The default instance URL is https://login.salesforce.com, so if the org you're authorizing is on a different instance, use the --instance-url. The command waits while you complete the verification. Open a browser and navigate to the displayed verification URL, enter the code, then click Connect. If you aren't already logged into your org, log in, and then you're prompted to allow the device to connect to the org. After you successfully authorize the org, you can close the browser window.",
    "examples": [
      "Authorize an org using a device code, give the org the alias TestOrg1, and set it as your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --set-default-dev-hub --alias TestOrg1",
      "Authorize an org in which you've created a custom connected app with the specified client ID (consumer key):\n<%= config.bin %> <%= command.id %> --client-id <OAuth client id>",
      "Authorize a sandbox org with the specified instance URL:\n<%= config.bin %> <%= command.id %> --instance-url https://MyDomainName--SandboxName.sandbox.my.salesforce.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "client-id": {
        "aliases": [
          "clientid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "client-id",
        "summary": "OAuth client ID (also called consumer key) of your custom connected app.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "instance-url": {
        "aliases": [
          "instanceurl"
        ],
        "char": "r",
        "deprecateAliases": true,
        "description": "If you specify an --instance-url value, this value overrides the sfdcLoginUrl value in your sfdx-project.json file.\n\nTo specify a My Domain URL, use the format \"https://<MyDomainName>.my.salesforce.com\".\n\nTo specify a sandbox, set --instance-url to \"https://<MyDomainName>--<SandboxName>.sandbox.my.salesforce.com\".",
        "name": "instance-url",
        "summary": "URL of the instance that the org lives on.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "set-default-dev-hub": {
        "aliases": [
          "setdefaultdevhub",
          "setdefaultdevhubusername"
        ],
        "char": "d",
        "deprecateAliases": true,
        "name": "set-default-dev-hub",
        "summary": "Set the authenticated org as the default Dev Hub.",
        "allowNo": false,
        "type": "boolean"
      },
      "set-default": {
        "aliases": [
          "setdefaultusername"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "set-default",
        "summary": "Set the authenticated org as the default that all org-related commands run against.",
        "allowNo": false,
        "type": "boolean"
      },
      "alias": {
        "aliases": [
          "setalias"
        ],
        "char": "a",
        "deprecateAliases": true,
        "name": "alias",
        "summary": "Alias for the org.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:login:device",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "login",
      "device.js"
    ],
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginName": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliasPermutations": [
      "force:auth:device:login",
      "auth:force:device:login",
      "auth:device:force:login",
      "auth:device:login:force",
      "force:device:auth:login",
      "device:force:auth:login",
      "device:auth:force:login",
      "device:auth:login:force",
      "force:device:login:auth",
      "device:force:login:auth",
      "device:login:force:auth",
      "device:login:auth:force",
      "force:auth:login:device",
      "auth:force:login:device",
      "auth:login:force:device",
      "auth:login:device:force",
      "force:login:auth:device",
      "login:force:auth:device",
      "login:auth:force:device",
      "login:auth:device:force",
      "force:login:device:auth",
      "login:force:device:auth",
      "login:device:force:auth",
      "login:device:auth:force",
      "auth:device:login",
      "device:auth:login",
      "device:login:auth",
      "auth:login:device",
      "login:auth:device",
      "login:device:auth"
    ],
    "permutations": [
      "org:login:device",
      "login:org:device",
      "login:device:org",
      "org:device:login",
      "device:org:login",
      "device:login:org"
    ]
  },
  {
    "aliases": [
      "force:auth:jwt:grant",
      "auth:jwt:grant"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Log in to a Salesforce org using a JSON web token (JWT).",
    "description": "Use this command in automated environments where you can’t interactively log in with a browser, such as in CI/CD scripts.\n\nLogging into an org authorizes the CLI to run other commands that connect to that org, such as deploying or retrieving a project. You can log into many types of orgs, such as sandboxes, Dev Hubs, Env Hubs, production orgs, and scratch orgs.\n\nComplete these steps before you run this command:\n\n    1. Create a digital certificate (also called digital signature) and the private key to sign the certificate. You can use your own key and certificate issued by a certification authority. Or use OpenSSL to create a key and a self-signed digital certificate.\n    2. Store the private key in a file on your computer. When you run this command, you set the --jwt-key-file flag to this file.\n    3. Create a custom connected app in your org using the digital certificate. Make note of the consumer key (also called client id) that’s generated for you. Be sure the username of the user logging in is approved to use the connected app. When you run this command, you set the --client-id flag to the consumer key.\n\nSee https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_auth_jwt_flow.htm for more information.\n\nWe recommend that you set an alias when you log into an org. Aliases make it easy to later reference this org when running commands that require it. If you don’t set an alias, you use the username that you specified when you logged in to the org. If you run multiple commands that reference the same org, consider setting the org as your default. Use --set-default for your default scratch org or sandbox, or --set-default-dev-hub for your default Dev Hub.",
    "examples": [
      "Log into an org with username jdoe@example.org and on the default instance URL (https://login.salesforce.com). The private key is stored in the file /Users/jdoe/JWT/server.key and the command uses the connected app with consumer key (client id) 04580y4051234051.\n<%= config.bin %> <%= command.id %> --username jdoe@example.org --jwt-key-file /Users/jdoe/JWT/server.key --client-id 04580y4051234051",
      "Set the org as the default and give it an alias:\n<%= config.bin %> <%= command.id %> --username jdoe@example.org --jwt-key-file /Users/jdoe/JWT/server.key --client-id 04580y4051234051 --alias ci-org --set-default",
      "Set the org as the default Dev Hub and give it an alias:\n<%= config.bin %> <%= command.id %> --username jdoe@example.org --jwt-key-file /Users/jdoe/JWT/server.key --client-id 04580y4051234051 --alias ci-dev-hub --set-default-dev-hub",
      "Log in to a sandbox using URL https://MyDomainName--SandboxName.sandbox.my.salesforce.com:\n<%= config.bin %> <%= command.id %> --username jdoe@example.org --jwt-key-file /Users/jdoe/JWT/server.key --client-id 04580y4051234051 --alias ci-org --set-default --instance-url https://MyDomainName--SandboxName.sandbox.my.salesforce.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "username": {
        "aliases": [
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "username",
        "required": true,
        "summary": "Username of the user logging in.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "jwt-key-file": {
        "aliases": [
          "jwtkeyfile",
          "keyfile"
        ],
        "char": "f",
        "deprecateAliases": true,
        "name": "jwt-key-file",
        "required": true,
        "summary": "Path to a file containing the private key.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "client-id": {
        "aliases": [
          "clientid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "client-id",
        "required": true,
        "summary": "OAuth client ID (also called consumer key) of your custom connected app.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "instance-url": {
        "aliases": [
          "instanceurl",
          "l"
        ],
        "char": "r",
        "deprecateAliases": true,
        "description": "If you specify an --instance-url value, this value overrides the sfdcLoginUrl value in your sfdx-project.json file.\n\nTo specify a My Domain URL, use the format \"https://<MyDomainName>.my.salesforce.com\".\n\nTo specify a sandbox, set --instance-url to \"https://<MyDomainName>--<SandboxName>.sandbox.my.salesforce.com\".",
        "name": "instance-url",
        "summary": "URL of the instance that the org lives on.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "set-default-dev-hub": {
        "aliases": [
          "setdefaultdevhub",
          "setdefaultdevhubusername",
          "v"
        ],
        "char": "d",
        "deprecateAliases": true,
        "name": "set-default-dev-hub",
        "summary": "Set the authenticated org as the default Dev Hub.",
        "allowNo": false,
        "type": "boolean"
      },
      "set-default": {
        "aliases": [
          "setdefaultusername"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "set-default",
        "summary": "Set the authenticated org as the default that all org-related commands run against.",
        "allowNo": false,
        "type": "boolean"
      },
      "alias": {
        "aliases": [
          "setalias"
        ],
        "char": "a",
        "deprecateAliases": true,
        "name": "alias",
        "summary": "Alias for the org.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "aliases": [
          "noprompt"
        ],
        "char": "p",
        "deprecateAliases": true,
        "hidden": true,
        "name": "no-prompt",
        "required": false,
        "summary": "Don't prompt for confirmation.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:login:jwt",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "login",
      "jwt.js"
    ],
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginName": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliasPermutations": [
      "force:auth:jwt:grant",
      "auth:force:jwt:grant",
      "auth:jwt:force:grant",
      "auth:jwt:grant:force",
      "force:jwt:auth:grant",
      "jwt:force:auth:grant",
      "jwt:auth:force:grant",
      "jwt:auth:grant:force",
      "force:jwt:grant:auth",
      "jwt:force:grant:auth",
      "jwt:grant:force:auth",
      "jwt:grant:auth:force",
      "force:auth:grant:jwt",
      "auth:force:grant:jwt",
      "auth:grant:force:jwt",
      "auth:grant:jwt:force",
      "force:grant:auth:jwt",
      "grant:force:auth:jwt",
      "grant:auth:force:jwt",
      "grant:auth:jwt:force",
      "force:grant:jwt:auth",
      "grant:force:jwt:auth",
      "grant:jwt:force:auth",
      "grant:jwt:auth:force",
      "auth:jwt:grant",
      "jwt:auth:grant",
      "jwt:grant:auth",
      "auth:grant:jwt",
      "grant:auth:jwt",
      "grant:jwt:auth"
    ],
    "permutations": [
      "org:login:jwt",
      "login:org:jwt",
      "login:jwt:org",
      "org:jwt:login",
      "jwt:org:login",
      "jwt:login:org"
    ]
  },
  {
    "aliases": [
      "force:auth:sfdxurl:store",
      "auth:sfdxurl:store"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Authorize an org using a Salesforce DX authorization URL stored in a file or through standard input (stdin).",
    "description": "You use the Salesforce DX (SFDX) authorization URL to authorize Salesforce CLI to connect to a target org. The URL contains the required data to accomplish the authorization, such as the client ID, client secret, and instance URL. You must specify the SFDX authorization URL in this format: \"force://<clientId>:<clientSecret>:<refreshToken>@<instanceUrl>\". Replace <clientId>, <clientSecret>, <refreshToken>, and <instanceUrl> with the values specific to your target org. For <instanceUrl>, don't include a protocol (such as \"https://\"). Note that although the SFDX authorization URL starts with \"force://\", it has nothing to do with the actual authorization. Salesforce CLI always communicates with your org using HTTPS.\n\nTo see an example of an SFDX authorization URL, run \"org display --verbose\" on an org.\n\nYou have three options when creating the authorization file. The easiest option is to redirect the output of the \"sf org display --verbose --json\" command into a file. For example, using an org with alias my-org that you've already authorized:\n\n    $ sf org display --target-org my-org --verbose --json > authFile.json\n\nThe resulting JSON file contains the URL in the \"sfdxAuthUrl\" property of the \"result\" object. You can then reference the file when running this command:\n\n    $ sf org:login:sfdx-url --sfdx-url-file authFile.json\n\nNOTE: The \"sf org display --verbose\" command displays the refresh token only for orgs authorized with the web server flow, and not the JWT bearer flow.\n\nYou can also create a JSON file that has a top-level property named sfdxAuthUrl whose value is the authorization URL. Finally, you can create a normal text file that includes just the URL and nothing else.\n\nAlternatively, you can pipe the SFDX authorization URL through standard input by specifying the --sfdx-url-stdin flag.",
    "examples": [
      "Authorize an org using the SFDX authorization URL in the files/authFile.json file:\n<%= config.bin %> <%= command.id %> --sfdx-url-file files/authFile.json",
      "Similar to previous example, but set the org as your default and give it an alias MyDefaultOrg:\n<%= config.bin %> <%= command.id %> --sfdx-url-file files/authFile.json --set-default --alias MyDefaultOrg",
      "Pipe the SFDX authorization URL from stdin:\n$ echo url | sf <%= command.id %> --sfdx-url-stdin"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sfdx-url-file": {
        "aliases": [
          "sfdxurlfile"
        ],
        "char": "f",
        "deprecateAliases": true,
        "name": "sfdx-url-file",
        "required": false,
        "summary": "Path to a file that contains the Salesforce DX authorization URL.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sfdx-url-stdin": {
        "aliases": [
          "sfdxurlstdin"
        ],
        "char": "u",
        "deprecateAliases": true,
        "name": "sfdx-url-stdin",
        "required": false,
        "summary": "Pipe the Salesforce DX authorization URL through standard input (stdin).",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "set-default-dev-hub": {
        "aliases": [
          "setdefaultdevhub",
          "setdefaultdevhubusername"
        ],
        "char": "d",
        "deprecateAliases": true,
        "name": "set-default-dev-hub",
        "summary": "Set the authenticated org as the default Dev Hub.",
        "allowNo": false,
        "type": "boolean"
      },
      "set-default": {
        "aliases": [
          "setdefaultusername"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "set-default",
        "summary": "Set the authenticated org as the default that all org-related commands run against.",
        "allowNo": false,
        "type": "boolean"
      },
      "alias": {
        "aliases": [
          "setalias"
        ],
        "char": "a",
        "deprecateAliases": true,
        "name": "alias",
        "summary": "Alias for the org.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "aliases": [
          "noprompt"
        ],
        "char": "p",
        "deprecateAliases": true,
        "hidden": true,
        "name": "no-prompt",
        "required": false,
        "summary": "Don't prompt for confirmation.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:login:sfdx-url",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "login",
      "sfdx-url.js"
    ],
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginName": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliasPermutations": [
      "force:auth:sfdxurl:store",
      "auth:force:sfdxurl:store",
      "auth:sfdxurl:force:store",
      "auth:sfdxurl:store:force",
      "force:sfdxurl:auth:store",
      "sfdxurl:force:auth:store",
      "sfdxurl:auth:force:store",
      "sfdxurl:auth:store:force",
      "force:sfdxurl:store:auth",
      "sfdxurl:force:store:auth",
      "sfdxurl:store:force:auth",
      "sfdxurl:store:auth:force",
      "force:auth:store:sfdxurl",
      "auth:force:store:sfdxurl",
      "auth:store:force:sfdxurl",
      "auth:store:sfdxurl:force",
      "force:store:auth:sfdxurl",
      "store:force:auth:sfdxurl",
      "store:auth:force:sfdxurl",
      "store:auth:sfdxurl:force",
      "force:store:sfdxurl:auth",
      "store:force:sfdxurl:auth",
      "store:sfdxurl:force:auth",
      "store:sfdxurl:auth:force",
      "auth:sfdxurl:store",
      "sfdxurl:auth:store",
      "sfdxurl:store:auth",
      "auth:store:sfdxurl",
      "store:auth:sfdxurl",
      "store:sfdxurl:auth"
    ],
    "permutations": [
      "org:login:sfdx-url",
      "login:org:sfdx-url",
      "login:sfdx-url:org",
      "org:sfdx-url:login",
      "sfdx-url:org:login",
      "sfdx-url:login:org"
    ]
  },
  {
    "aliases": [
      "force:auth:web:login",
      "auth:web:login"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Log in to a Salesforce org using the web server flow.",
    "description": "Opens a Salesforce instance URL in a web browser so you can enter your credentials and log in to your org. After you log in, you can close the browser window.\n\nLogging into an org authorizes the CLI to run other commands that connect to that org, such as deploying or retrieving metadata. You can log into many types of orgs, such as sandboxes, Dev Hubs, Env Hubs, production orgs, and scratch orgs.\n\nWe recommend that you set an alias when you log into an org. Aliases make it easy to later reference this org when running commands that require it. If you don’t set an alias, you use the username that you specified when you logged in to the org. If you run multiple commands that reference the same org, consider setting the org as your default. Use --set-default for your default scratch org or sandbox, or --set-default-dev-hub for your default Dev Hub.\n\nBy default, this command uses the global out-of-the-box connected app in your org. If you need more security or control, such as setting the refresh token timeout or specifying IP ranges, create your own connected app using a digital certificate. Make note of the consumer key (also called cliend id) that’s generated for you. Then specify the consumer key with the --client-id flag.",
    "examples": [
      "Run the command with no flags to open the default Salesforce login page (https://login.salesforce.com):\n<%= config.bin %> <%= command.id %>",
      "Log in to your Dev Hub, set it as your default Dev Hub, and set an alias that you reference later when you create a scratch org:\n<%= config.bin %> <%= command.id %> --set-default-dev-hub --alias dev-hub",
      "Log in to a sandbox and set it as your default org:\n<%= config.bin %> <%= command.id %> --instance-url https://MyDomainName--SandboxName.sandbox.my.salesforce.com --set-default",
      "Use --browser to specify a specific browser, such as Google Chrome:\n<%= config.bin %> <%= command.id %> --instance-url https://MyDomainName--SandboxName.sandbox.my.salesforce.com --set-default --browser chrome",
      "Use your own connected app by specifying its consumer key (also called client ID):\n<%= config.bin %> <%= command.id %> --instance-url https://MyDomainName--SandboxName.sandbox.my.salesforce.com --set-default --browser chrome --client-id 04580y4051234051"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "browser": {
        "char": "b",
        "description": "If you don’t specify --browser, the command uses your default browser. The exact names of the browser applications differ depending on the operating system you're on; check your documentation for details.",
        "name": "browser",
        "summary": "Browser in which to open the org.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "chrome",
          "edge",
          "firefox"
        ],
        "type": "option"
      },
      "client-id": {
        "aliases": [
          "clientid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "client-id",
        "summary": "OAuth client ID (also called consumer key) of your custom connected app.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "instance-url": {
        "aliases": [
          "instanceurl",
          "l"
        ],
        "char": "r",
        "deprecateAliases": true,
        "description": "If you specify an --instance-url value, this value overrides the sfdcLoginUrl value in your sfdx-project.json file.\n\nTo specify a My Domain URL, use the format \"https://<MyDomainName>.my.salesforce.com\".\n\nTo specify a sandbox, set --instance-url to \"https://<MyDomainName>--<SandboxName>.sandbox.my.salesforce.com\".",
        "name": "instance-url",
        "summary": "URL of the instance that the org lives on.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "set-default-dev-hub": {
        "aliases": [
          "setdefaultdevhubusername",
          "setdefaultdevhub",
          "v"
        ],
        "char": "d",
        "deprecateAliases": true,
        "name": "set-default-dev-hub",
        "summary": "Set the authenticated org as the default Dev Hub.",
        "allowNo": false,
        "type": "boolean"
      },
      "set-default": {
        "aliases": [
          "setdefaultusername"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "set-default",
        "summary": "Set the authenticated org as the default that all org-related commands run against.",
        "allowNo": false,
        "type": "boolean"
      },
      "alias": {
        "aliases": [
          "setalias"
        ],
        "char": "a",
        "deprecateAliases": true,
        "name": "alias",
        "summary": "Alias for the org.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "aliases": [
          "noprompt"
        ],
        "char": "p",
        "deprecateAliases": true,
        "hidden": true,
        "name": "no-prompt",
        "required": false,
        "summary": "Don't prompt for confirmation.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:login:web",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "login",
      "web.js"
    ],
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginName": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliasPermutations": [
      "force:auth:web:login",
      "auth:force:web:login",
      "auth:web:force:login",
      "auth:web:login:force",
      "force:web:auth:login",
      "web:force:auth:login",
      "web:auth:force:login",
      "web:auth:login:force",
      "force:web:login:auth",
      "web:force:login:auth",
      "web:login:force:auth",
      "web:login:auth:force",
      "force:auth:login:web",
      "auth:force:login:web",
      "auth:login:force:web",
      "auth:login:web:force",
      "force:login:auth:web",
      "login:force:auth:web",
      "login:auth:force:web",
      "login:auth:web:force",
      "force:login:web:auth",
      "login:force:web:auth",
      "login:web:force:auth",
      "login:web:auth:force",
      "auth:web:login",
      "web:auth:login",
      "web:login:auth",
      "auth:login:web",
      "login:auth:web",
      "login:web:auth"
    ],
    "permutations": [
      "org:login:web",
      "login:org:web",
      "login:web:org",
      "org:web:login",
      "web:org:login",
      "web:login:org"
    ]
  },
  {
    "aliases": [
      "force:auth:logout",
      "auth:logout"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Log out of a Salesforce org.",
    "description": "If you run this command with no flags and no default org set in your config or environment, it first displays a list of orgs you've created or logged into, with none of the orgs selected. Use the arrow keys to scroll through the list and the space bar to select the orgs you want to log out of. Press Enter when you're done; the command asks for a final confirmation before logging out of the selected orgs.\n\nThe process is similar if you specify --all, except that in the initial list of orgs, they're all selected. Use --target-org to logout of a specific org. In both these cases by default, you must still confirm that you want to log out. Use --no-prompt to never be asked for confirmation when also using --all or --target-org.\n\nBe careful! If you log out of a scratch org without having access to its password, you can't access the scratch org again, either through the CLI or the Salesforce UI.",
    "examples": [
      "Interactively select the orgs to log out of:\n<%= config.bin %> <%= command.id %>",
      "Log out of the org with username me@my.org:\n<%= config.bin %> <%= command.id %> --target-org me@my.org",
      "Log out of all orgs after confirmation:\n<%= config.bin %> <%= command.id %> --all",
      "Logout of the org with alias my-scratch and don't prompt for confirmation:\n<%= config.bin %> <%= command.id %> --target-org my-scratch --no-prompt"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "summary": "Username or alias of the target org.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "all": {
        "char": "a",
        "description": "All orgs includes Dev Hubs, sandboxes, DE orgs, and expired, deleted, and unknown-status scratch orgs.",
        "exclusive": [
          "target-org"
        ],
        "name": "all",
        "required": false,
        "summary": "Include all authenticated orgs.",
        "allowNo": false,
        "type": "boolean"
      },
      "no-prompt": {
        "aliases": [
          "noprompt"
        ],
        "char": "p",
        "deprecateAliases": true,
        "name": "no-prompt",
        "required": false,
        "summary": "Don't prompt for confirmation.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:logout",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "logout.js"
    ],
    "pluginAlias": "@salesforce/plugin-auth",
    "pluginName": "@salesforce/plugin-auth",
    "pluginType": "core",
    "aliasPermutations": [
      "force:auth:logout",
      "auth:force:logout",
      "auth:logout:force",
      "force:logout:auth",
      "logout:force:auth",
      "logout:auth:force",
      "auth:logout",
      "logout:auth"
    ],
    "permutations": [
      "org:logout",
      "logout:org"
    ]
  },
  {
    "aliases": [
      "force:org:open",
      "force:source:open"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Open your default scratch org, or another specified org, in a browser.",
    "description": "To open a specific page, specify the portion of the URL after \"https://mydomain.my.salesforce.com\" as the value for the --path flag. For example, specify \"--path lightning\" to open Lightning Experience, or specify \"--path /apex/YourPage\" to open a Visualforce page.\n\nUse the --source-file flag to open ApexPage, FlexiPage, Flow, or Agent metadata from your local project in the associated Builder within the Org.\n\nTo generate a URL but not launch it in your browser, specify --url-only.\n\nTo open in a specific browser, use the --browser flag. Supported browsers are \"chrome\", \"edge\", and \"firefox\". If you don't specify --browser, the org opens in your default browser.",
    "examples": [
      "Open your default org in your default browser:\n$ <%= config.bin %> <%= command.id %>",
      "Open your default org in an incognito window of your default browser:\n$ <%= config.bin %> <%= command.id %> --private",
      "Open the org with alias MyTestOrg1 in the Firefox browser:\n$ <%= config.bin %> <%= command.id %> --target-org MyTestOrg1 --browser firefox",
      "Display the navigation URL for the Lightning Experience page for your default org, but don't open the page in a browser:\n$ <%= config.bin %> <%= command.id %> --url-only --path lightning",
      "Open a local Lightning page in your default org's Lightning App Builder:\n$ <%= config.bin %> <%= command.id %> --source-file force-app/main/default/flexipages/Hello.flexipage-meta.xml",
      "Open a local Flow in Flow Builder:\n$ <%= config.bin %> <%= command.id %> --source-file force-app/main/default/flows/Hello.flow-meta.xml",
      "Open local Agent metadata (Bot) in Agent Builder:\n$ <%= config.bin %> <%= command.id %> --source-file force-app/main/default/bots/Coral_Cloud_Agent/Coral_Cloud_Agent.bot-meta.xml"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "private": {
        "exclusive": [
          "url-only",
          "browser"
        ],
        "name": "private",
        "summary": "Open the org in the default browser using private (incognito) mode.",
        "allowNo": false,
        "type": "boolean"
      },
      "browser": {
        "char": "b",
        "exclusive": [
          "url-only",
          "private"
        ],
        "name": "browser",
        "summary": "Browser where the org opens.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "chrome",
          "edge",
          "firefox"
        ],
        "type": "option"
      },
      "path": {
        "char": "p",
        "env": "FORCE_OPEN_URL",
        "exclusive": [
          "source-file"
        ],
        "name": "path",
        "summary": "Navigation URL path to open a specific page.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "url-only": {
        "aliases": [
          "urlonly"
        ],
        "char": "r",
        "deprecateAliases": true,
        "name": "url-only",
        "summary": "Display navigation URL, but don’t launch browser.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "source-file": {
        "aliases": [
          "sourcefile"
        ],
        "char": "f",
        "deprecateAliases": true,
        "exclusive": [
          "path"
        ],
        "name": "source-file",
        "summary": "Path to ApexPage, FlexiPage, Flow, or Agent metadata to open in the associated Builder.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:open",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "open.js"
    ],
    "pluginAlias": "@salesforce/plugin-org",
    "pluginName": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliasPermutations": [
      "force:org:open",
      "org:force:open",
      "org:open:force",
      "force:open:org",
      "open:force:org",
      "open:org:force",
      "force:source:open",
      "source:force:open",
      "source:open:force",
      "force:open:source",
      "open:force:source",
      "open:source:force"
    ],
    "permutations": [
      "org:open",
      "open:org"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Open an agent in your org's Agent Builder UI in a browser.",
    "description": "Use the --name flag to open an agent using its API name in the Agent Builder UI of your org. To find the agent's API name, go to Setup in your org and navigate to the agent's details page.\n\nTo generate the URL but not launch it in your browser, specify --url-only.\n\nTo open Agent Builder in a specific browser, use the --browser flag. Supported browsers are \"chrome\", \"edge\", and \"firefox\". If you don't specify --browser, the org opens in your default browser.",
    "examples": [
      "Open the agent with API name Coral_Cloud_Agent in your default org using your default browser:\n$ <%= config.bin %> <%= command.id %> --name Coral_Cloud_Agent",
      "Open the agent in an incognito window of your default browser:\n$ <%= config.bin %> <%= command.id %> --private --name Coral_Cloud_Agent:",
      "Open the agent in an org with alias MyTestOrg1 using the Firefox browser:\n$ <%= config.bin %> <%= command.id %> --target-org MyTestOrg1 --browser firefox --name Coral_Cloud_Agent"
    ],
    "state": "beta",
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "char": "n",
        "name": "name",
        "required": true,
        "summary": "API name, also known as developer name, of the agent you want to open in the org's Agent Builder UI.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "private": {
        "exclusive": [
          "url-only",
          "browser"
        ],
        "name": "private",
        "summary": "Open the org in the default browser using private (incognito) mode.",
        "allowNo": false,
        "type": "boolean"
      },
      "browser": {
        "char": "b",
        "exclusive": [
          "url-only",
          "private"
        ],
        "name": "browser",
        "summary": "Browser where the org opens.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "chrome",
          "edge",
          "firefox"
        ],
        "type": "option"
      },
      "url-only": {
        "aliases": [
          "urlonly"
        ],
        "char": "r",
        "deprecateAliases": true,
        "name": "url-only",
        "summary": "Display navigation URL, but don’t launch browser.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "org:open:agent",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "open",
      "agent.js"
    ],
    "pluginAlias": "@salesforce/plugin-org",
    "pluginName": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "org:open:agent",
      "open:org:agent",
      "open:agent:org",
      "org:agent:open",
      "agent:org:open",
      "agent:open:org"
    ]
  },
  {
    "summary": "Refresh a sandbox org using the sandbox name.",
    "description": "Refreshing a sandbox copies the metadata, and optionally data, from your source org to the refreshed sandbox org. You can optionally specify a definition file if you want to change the configuration of the refreshed sandbox, such as its license type or template ID.\n\nYou're not allowed to change the sandbox name when you refresh it with this command. If you want to change the sandbox name, first delete it with the \"org delete sandbox\" command. And then recreate it with the \"org create sandbox\" command and give it a new name.",
    "examples": [
      "Refresh the sandbox named \"devSbx1\". The production org that contains the sandbox license has the alias \"prodOrg\".\n<%= config.bin %> <%= command.id %> --name devSbx1 --target-org prodOrg",
      "Refresh the sandbox named \"devSbx2\", and override the configuration of the refreshed sandbox with the properties in the specified defintion file. The default target org is the production org, so you don't need to specify the `--target-org` flag in this case.\n<%= config.bin %> <%= command.id %> --name devSbx2 --definition-file devSbx2-config.json",
      "Refresh the sandbox using the name defined in the definition file. The production org that contains the sandbox license has the alias \"prodOrg\".\n<%= config.bin %> <%= command.id %> --definition-file devSbx3-config.json --target-org prodOrg"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "no-auto-activate": {
        "description": "By default, a sandbox auto-activates after a refresh. Use this flag to control sandbox activation manually.",
        "name": "no-auto-activate",
        "summary": "Disable auto-activation of the sandbox after a successful refresh.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal to you and displays the \"<%= config.bin %> org resume sandbox\" command for you run to check the status of the refresh. The displayed command includes the job ID for the running sandbox refresh.",
        "exclusive": [
          "async"
        ],
        "name": "wait",
        "summary": "Number of minutes to poll for sandbox refresh status.",
        "hasDynamicHelp": true,
        "helpValue": "<minutes>",
        "multiple": false,
        "type": "option"
      },
      "poll-interval": {
        "char": "i",
        "exclusive": [
          "async"
        ],
        "name": "poll-interval",
        "summary": "Number of seconds to wait between status polling requests.",
        "hasDynamicHelp": true,
        "helpValue": "<seconds>",
        "multiple": false,
        "type": "option"
      },
      "async": {
        "description": "The command immediately displays the job ID and returns control of the terminal to you. This way, you can continue to use the CLI. To check the status of the sandbox refresh, run \"<%= config.bin %> org resume sandbox\".",
        "exclusive": [
          "wait",
          "poll-interval"
        ],
        "name": "async",
        "summary": "Request the sandbox refresh, but don't wait for it to complete.",
        "allowNo": false,
        "type": "boolean"
      },
      "name": {
        "char": "n",
        "name": "name",
        "summary": "Name of the existing sandbox org in your production org that you want to refresh.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "definition-file": {
        "char": "f",
        "description": "The sandbox definition file is a blueprint for the sandbox; use the file to change the sandbox configuration during a refresh. If you don't want to change the sandbox configuration when you refresh it, then simply use the --name flag to specify the sandbox and don't use this flag. See <https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_sandbox_definition.htm> for all the options you can specify in the definition file.",
        "name": "definition-file",
        "summary": "Path to a sandbox definition file for overriding its configuration when you refresh it.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the production org that contains the sandbox license.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "name": "no-prompt",
        "summary": "Don't prompt for confirmation about the sandbox refresh.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "org:refresh:sandbox",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "refresh",
      "sandbox.js"
    ],
    "aliases": [],
    "args": {},
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "pluginAlias": "@salesforce/plugin-org",
    "pluginName": "@salesforce/plugin-org",
    "pluginType": "core",
    "strict": true,
    "aliasPermutations": [],
    "permutations": [
      "org:refresh:sandbox",
      "refresh:org:sandbox",
      "refresh:sandbox:org",
      "org:sandbox:refresh",
      "sandbox:org:refresh",
      "sandbox:refresh:org"
    ]
  },
  {
    "summary": "Check the status of a sandbox creation, and log in to it if it's ready.",
    "description": "Sandbox creation can take a long time. If the original \"sf org create sandbox\" command either times out, or you specified the --async flag, the command displays a job ID. Use this job ID to check whether the sandbox creation is complete, and if it is, the command then logs into it.\n\nYou can also use the sandbox name to check the status or the --use-most-recent flag to use the job ID of the most recent sandbox creation.",
    "examples": [
      "Check the status of a sandbox creation using its name and specify a production org with alias \"prodOrg\":\n<%= config.bin %> <%= command.id %> --name mysandbox --target-org prodOrg",
      "Check the status using the job ID:\n<%= config.bin %> <%= command.id %> --job-id 0GRxxxxxxxx",
      "Check the status of the most recent sandbox create request:\n<%= config.bin %> <%= command.id %> --use-most-recent"
    ],
    "aliases": [
      "env:resume:sandbox"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To resume checking the sandbox creation, rerun this command.",
        "name": "wait",
        "summary": "Number of minutes to wait for the sandbox org to be ready.",
        "default": "0 minutes",
        "hasDynamicHelp": true,
        "helpValue": "<minutes>",
        "multiple": false,
        "type": "option"
      },
      "name": {
        "char": "n",
        "exclusive": [
          "job-id"
        ],
        "name": "name",
        "summary": "Name of the sandbox org.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "job-id": {
        "char": "i",
        "description": "The job ID is valid for 24 hours after you start the sandbox creation.",
        "exclusive": [
          "name"
        ],
        "name": "job-id",
        "summary": "Job ID of the incomplete sandbox creation that you want to check the status of.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-most-recent": {
        "char": "l",
        "name": "use-most-recent",
        "summary": "Use the most recent sandbox create request.",
        "allowNo": false,
        "type": "boolean"
      },
      "target-org": {
        "char": "o",
        "description": "When it creates the sandbox org, Salesforce copies the metadata, and optionally data, from your production org to the new sandbox org.",
        "name": "target-org",
        "noCacheDefault": true,
        "summary": "Username or alias of the production org that contains the sandbox license.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "org:resume:sandbox",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "resume",
      "sandbox.js"
    ],
    "args": {},
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "pluginAlias": "@salesforce/plugin-org",
    "pluginName": "@salesforce/plugin-org",
    "pluginType": "core",
    "strict": true,
    "aliasPermutations": [
      "env:resume:sandbox",
      "resume:env:sandbox",
      "resume:sandbox:env",
      "env:sandbox:resume",
      "sandbox:env:resume",
      "sandbox:resume:env"
    ],
    "permutations": [
      "org:resume:sandbox",
      "resume:org:sandbox",
      "resume:sandbox:org",
      "org:sandbox:resume",
      "sandbox:org:resume",
      "sandbox:resume:org"
    ]
  },
  {
    "aliases": [
      "env:resume:scratch"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Resume the creation of an incomplete scratch org.",
    "description": "When the original \"sf org create scratch\" command either times out or is run with the --async flag, it displays a job ID.\n\nRun this command by either passing it a job ID or using the --use-most-recent flag to specify the most recent incomplete scratch org.",
    "examples": [
      "Resume a scratch org create with a job ID:\n<%= config.bin %> <%= command.id %> --job-id 2SR3u0000008fBDGAY",
      "Resume your most recent incomplete scratch org:\n<%= config.bin %> <%= command.id %> --use-most-recent"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "job-id": {
        "char": "i",
        "description": "The job ID is the same as the record ID of the incomplete scratch org in the ScratchOrgInfo object of the Dev Hub.\n\nThe job ID is valid for 24 hours after you start the scratch org creation.",
        "name": "job-id",
        "summary": "Job ID of the incomplete scratch org create that you want to resume.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-most-recent": {
        "char": "r",
        "name": "use-most-recent",
        "summary": "Use the job ID of the most recent incomplete scratch org.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "org:resume:scratch",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "org",
      "resume",
      "scratch.js"
    ],
    "pluginAlias": "@salesforce/plugin-org",
    "pluginName": "@salesforce/plugin-org",
    "pluginType": "core",
    "aliasPermutations": [
      "env:resume:scratch",
      "resume:env:scratch",
      "resume:scratch:env",
      "env:scratch:resume",
      "scratch:env:resume",
      "scratch:resume:env"
    ],
    "permutations": [
      "org:resume:scratch",
      "resume:org:scratch",
      "resume:scratch:org",
      "org:scratch:resume",
      "scratch:org:resume",
      "scratch:resume:org"
    ]
  },
  {
    "aliases": [
      "force:package1:version:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Create a first-generation package version in the release org.",
    "description": "The package version is based on the contents of the specified metadata package. Omit --managed-released if you want to create an unmanaged package version.",
    "examples": [
      "Create a first-generation package version from the package with the specified ID and name the package version \"example\"; use your default org:\n<%= config.bin %> <%= command.id %> --package-id 033... --name example",
      "Same as previous example, but provide a description and wait for 30 minutes for the package version to be created; use the specified org:\n<%= config.bin %> <%= command.id %> --package-id 033... --name example --description \"example description\" --wait 30 --target-org myorg@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "package-id": {
        "aliases": [
          "packageid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "package-id",
        "required": true,
        "summary": "ID of the metadata package (starts with 033) of which you’re creating a new version.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "char": "n",
        "name": "name",
        "required": true,
        "summary": "Package version name.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "description": {
        "char": "d",
        "name": "description",
        "summary": "Package version description.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "version": {
        "char": "v",
        "name": "version",
        "summary": "Package version in major.minor format, for example, 3.2.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "managed-released": {
        "aliases": [
          "managedrelease"
        ],
        "char": "m",
        "deprecateAliases": true,
        "description": "To create a beta version, don’t include this parameter.",
        "name": "managed-released",
        "summary": "Create a managed package version.",
        "allowNo": false,
        "type": "boolean"
      },
      "release-notes-url": {
        "aliases": [
          "releasenotesurl"
        ],
        "char": "r",
        "deprecateAliases": true,
        "description": "This link is displayed in the package installation UI to provide release notes for this package version to subscribers.",
        "name": "release-notes-url",
        "summary": "Release notes URL.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "post-install-url": {
        "aliases": [
          "postinstallurl"
        ],
        "char": "p",
        "deprecateAliases": true,
        "description": "The contents of the post-installation instructions URL are displayed in the UI after installation of the package version.",
        "name": "post-install-url",
        "summary": "Post install URL.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "installation-key": {
        "aliases": [
          "installationkey"
        ],
        "char": "k",
        "deprecateAliases": true,
        "name": "installation-key",
        "summary": "Installation key for key-protected package (default: null).",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "name": "wait",
        "summary": "Minutes to wait for the package version to be created (default: 2 minutes).",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "package1:version:create",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package1",
      "version",
      "create.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package1:version:create",
      "package1:force:version:create",
      "package1:version:force:create",
      "package1:version:create:force",
      "force:version:package1:create",
      "version:force:package1:create",
      "version:package1:force:create",
      "version:package1:create:force",
      "force:version:create:package1",
      "version:force:create:package1",
      "version:create:force:package1",
      "version:create:package1:force",
      "force:package1:create:version",
      "package1:force:create:version",
      "package1:create:force:version",
      "package1:create:version:force",
      "force:create:package1:version",
      "create:force:package1:version",
      "create:package1:force:version",
      "create:package1:version:force",
      "force:create:version:package1",
      "create:force:version:package1",
      "create:version:force:package1",
      "create:version:package1:force"
    ],
    "permutations": [
      "package1:version:create",
      "version:package1:create",
      "version:create:package1",
      "package1:create:version",
      "create:package1:version",
      "create:version:package1"
    ]
  },
  {
    "aliases": [
      "force:package1:version:create:get"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Retrieve the status of a package version creation request.",
    "examples": [
      "Get the status of the creation request for the package version with the specified ID in your default org:\n<%= config.bin %> <%= command.id %> --request-id 0HD...",
      "Same as previous example, but use the specified org:\n<%= config.bin %> <%= command.id %> --request-id 0HD... --target-org myorg@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "request-id": {
        "aliases": [
          "requestid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "request-id",
        "required": true,
        "summary": "ID of the PackageUploadRequest (starts with 0HD).",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "package1:version:create:get",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package1",
      "version",
      "create",
      "get.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package1:version:create:get",
      "package1:force:version:create:get",
      "package1:version:force:create:get",
      "package1:version:create:force:get",
      "package1:version:create:get:force",
      "force:version:package1:create:get",
      "version:force:package1:create:get",
      "version:package1:force:create:get",
      "version:package1:create:force:get",
      "version:package1:create:get:force",
      "force:version:create:package1:get",
      "version:force:create:package1:get",
      "version:create:force:package1:get",
      "version:create:package1:force:get",
      "version:create:package1:get:force",
      "force:version:create:get:package1",
      "version:force:create:get:package1",
      "version:create:force:get:package1",
      "version:create:get:force:package1",
      "version:create:get:package1:force",
      "force:package1:create:version:get",
      "package1:force:create:version:get",
      "package1:create:force:version:get",
      "package1:create:version:force:get",
      "package1:create:version:get:force",
      "force:create:package1:version:get",
      "create:force:package1:version:get",
      "create:package1:force:version:get",
      "create:package1:version:force:get",
      "create:package1:version:get:force",
      "force:create:version:package1:get",
      "create:force:version:package1:get",
      "create:version:force:package1:get",
      "create:version:package1:force:get",
      "create:version:package1:get:force",
      "force:create:version:get:package1",
      "create:force:version:get:package1",
      "create:version:force:get:package1",
      "create:version:get:force:package1",
      "create:version:get:package1:force",
      "force:package1:create:get:version",
      "package1:force:create:get:version",
      "package1:create:force:get:version",
      "package1:create:get:force:version",
      "package1:create:get:version:force",
      "force:create:package1:get:version",
      "create:force:package1:get:version",
      "create:package1:force:get:version",
      "create:package1:get:force:version",
      "create:package1:get:version:force",
      "force:create:get:package1:version",
      "create:force:get:package1:version",
      "create:get:force:package1:version",
      "create:get:package1:force:version",
      "create:get:package1:version:force",
      "force:create:get:version:package1",
      "create:force:get:version:package1",
      "create:get:force:version:package1",
      "create:get:version:force:package1",
      "create:get:version:package1:force",
      "force:package1:version:get:create",
      "package1:force:version:get:create",
      "package1:version:force:get:create",
      "package1:version:get:force:create",
      "package1:version:get:create:force",
      "force:version:package1:get:create",
      "version:force:package1:get:create",
      "version:package1:force:get:create",
      "version:package1:get:force:create",
      "version:package1:get:create:force",
      "force:version:get:package1:create",
      "version:force:get:package1:create",
      "version:get:force:package1:create",
      "version:get:package1:force:create",
      "version:get:package1:create:force",
      "force:version:get:create:package1",
      "version:force:get:create:package1",
      "version:get:force:create:package1",
      "version:get:create:force:package1",
      "version:get:create:package1:force",
      "force:package1:get:version:create",
      "package1:force:get:version:create",
      "package1:get:force:version:create",
      "package1:get:version:force:create",
      "package1:get:version:create:force",
      "force:get:package1:version:create",
      "get:force:package1:version:create",
      "get:package1:force:version:create",
      "get:package1:version:force:create",
      "get:package1:version:create:force",
      "force:get:version:package1:create",
      "get:force:version:package1:create",
      "get:version:force:package1:create",
      "get:version:package1:force:create",
      "get:version:package1:create:force",
      "force:get:version:create:package1",
      "get:force:version:create:package1",
      "get:version:force:create:package1",
      "get:version:create:force:package1",
      "get:version:create:package1:force",
      "force:package1:get:create:version",
      "package1:force:get:create:version",
      "package1:get:force:create:version",
      "package1:get:create:force:version",
      "package1:get:create:version:force",
      "force:get:package1:create:version",
      "get:force:package1:create:version",
      "get:package1:force:create:version",
      "get:package1:create:force:version",
      "get:package1:create:version:force",
      "force:get:create:package1:version",
      "get:force:create:package1:version",
      "get:create:force:package1:version",
      "get:create:package1:force:version",
      "get:create:package1:version:force",
      "force:get:create:version:package1",
      "get:force:create:version:package1",
      "get:create:force:version:package1",
      "get:create:version:force:package1",
      "get:create:version:package1:force"
    ],
    "permutations": [
      "package1:version:create:get",
      "version:package1:create:get",
      "version:create:package1:get",
      "version:create:get:package1",
      "package1:create:version:get",
      "create:package1:version:get",
      "create:version:package1:get",
      "create:version:get:package1",
      "package1:create:get:version",
      "create:package1:get:version",
      "create:get:package1:version",
      "create:get:version:package1",
      "package1:version:get:create",
      "version:package1:get:create",
      "version:get:package1:create",
      "version:get:create:package1",
      "package1:get:version:create",
      "get:package1:version:create",
      "get:version:package1:create",
      "get:version:create:package1",
      "package1:get:create:version",
      "get:package1:create:version",
      "get:create:package1:version",
      "get:create:version:package1"
    ]
  },
  {
    "aliases": [
      "force:package1:version:display"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Display details about a first-generation package version.",
    "examples": [
      "Display details about the first-generation package version with the specified ID in your default org:\n<%= config.bin %> <%= command.id %> --package-version-id 04t...",
      "Same as previous example, but use the specified org:\n<%= config.bin %> <%= command.id %> --package-version-id 04t... --target-org myorg@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "package-version-id": {
        "aliases": [
          "packageversionid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "package-version-id",
        "required": true,
        "summary": "ID (starts with 04t) of the metadata package version whose details you want to display.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "package1:version:display",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package1",
      "version",
      "display.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package1:version:display",
      "package1:force:version:display",
      "package1:version:force:display",
      "package1:version:display:force",
      "force:version:package1:display",
      "version:force:package1:display",
      "version:package1:force:display",
      "version:package1:display:force",
      "force:version:display:package1",
      "version:force:display:package1",
      "version:display:force:package1",
      "version:display:package1:force",
      "force:package1:display:version",
      "package1:force:display:version",
      "package1:display:force:version",
      "package1:display:version:force",
      "force:display:package1:version",
      "display:force:package1:version",
      "display:package1:force:version",
      "display:package1:version:force",
      "force:display:version:package1",
      "display:force:version:package1",
      "display:version:force:package1",
      "display:version:package1:force"
    ],
    "permutations": [
      "package1:version:display",
      "version:package1:display",
      "version:display:package1",
      "package1:display:version",
      "display:package1:version",
      "display:version:package1"
    ]
  },
  {
    "aliases": [
      "force:package1:version:list"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "List package versions for the specified first-generation package or for the org.",
    "examples": [
      "List all first-generation package versions in your default org:\n<%= config.bin %> <%= command.id %>",
      "List package versions for the specified first-generation package in the specifief org:\n<%= config.bin %> <%= command.id %> --package-id 033... --target-org myorg@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "package-id": {
        "aliases": [
          "packageid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "description": "If not specified, shows all versions for all packages (managed and unmanaged) in the org.",
        "name": "package-id",
        "summary": "Metadata package ID (starts with 033) whose package versions you want to list.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "package1:version:list",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package1",
      "version",
      "list.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package1:version:list",
      "package1:force:version:list",
      "package1:version:force:list",
      "package1:version:list:force",
      "force:version:package1:list",
      "version:force:package1:list",
      "version:package1:force:list",
      "version:package1:list:force",
      "force:version:list:package1",
      "version:force:list:package1",
      "version:list:force:package1",
      "version:list:package1:force",
      "force:package1:list:version",
      "package1:force:list:version",
      "package1:list:force:version",
      "package1:list:version:force",
      "force:list:package1:version",
      "list:force:package1:version",
      "list:package1:force:version",
      "list:package1:version:force",
      "force:list:version:package1",
      "list:force:version:package1",
      "list:version:force:package1",
      "list:version:package1:force"
    ],
    "permutations": [
      "package1:version:list",
      "version:package1:list",
      "version:list:package1",
      "package1:list:version",
      "list:package1:version",
      "list:version:package1"
    ]
  },
  {
    "aliases": [
      "force:package:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Create a package.",
    "description": "First, use this command to create a package. Then create a package version.\n\nIf you don’t have a namespace defined in your sfdx-project.json file, use --no-namespace.\n\nYour --name value must be unique within your namespace.\n\nRun 'sf package list to list all packages in the Dev Hub org.",
    "examples": [
      "Create an unlocked package from the files in the \"force-app\" directory; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --name MyUnlockedPackage --package-type Unlocked --path force-app",
      "Create a managed packaged from the \"force-app\" directory files, give the package a description, and use the specified Dev Hub org:\n<%= config.bin %> <%= command.id %> --name MyManagedPackage --description \"Your Package Descripton\" --package-type Managed --path force-app --target-dev-hub devhub@example.com"
    ],
    "deprecateAliases": true,
    "requiresProject": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "char": "n",
        "name": "name",
        "required": true,
        "summary": "Name of the package to create.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "package-type": {
        "aliases": [
          "packagetype"
        ],
        "char": "t",
        "deprecateAliases": true,
        "description": "The options for package type are Managed and Unlocked (Managed=DeveloperManagedSubscriberManaged, Unlocked=DeveloperControlledSubscriberEditable). These options determine upgrade and editability rules.",
        "name": "package-type",
        "required": true,
        "summary": "Type of package.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "Managed",
          "Unlocked"
        ],
        "type": "option"
      },
      "description": {
        "char": "d",
        "name": "description",
        "summary": "Description of the package.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "no-namespace": {
        "aliases": [
          "nonamespace"
        ],
        "char": "e",
        "deprecateAliases": true,
        "description": "This flag is useful when you’re migrating an existing org to packages. But use a namespaced package for new metadata.",
        "name": "no-namespace",
        "summary": "Create the package with no namespace; available only for unlocked packages.",
        "allowNo": false,
        "type": "boolean"
      },
      "path": {
        "char": "r",
        "name": "path",
        "required": true,
        "summary": "Path to directory that contains the contents of the package.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "org-dependent": {
        "aliases": [
          "orgdependent"
        ],
        "deprecateAliases": true,
        "description": "Use Source Tracking in Sandboxes to develop your org-dependent unlocked package. For more information, see \"Create Org-Dependent Unlocked Packages\" in the Salesforce DX Developer Guide.",
        "name": "org-dependent",
        "summary": "Depends on unpackaged metadata in the installation org; applies to unlocked packages only.",
        "allowNo": false,
        "type": "boolean"
      },
      "error-notification-username": {
        "aliases": [
          "errornotificationusername"
        ],
        "char": "o",
        "deprecateAliases": true,
        "description": "Email notifications include information about unhandled Apex exceptions, and install, upgrade, or uninstall failures associated with your package.",
        "name": "error-notification-username",
        "summary": "Active Dev Hub user designated to receive email notifications for package errors.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "package:create",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "create.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:create",
      "package:force:create",
      "package:create:force",
      "force:create:package",
      "create:force:package",
      "create:package:force"
    ],
    "permutations": [
      "package:create",
      "create:package"
    ]
  },
  {
    "aliases": [
      "force:package:delete"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Delete a package.",
    "description": "Specify the ID or alias of the package you want to delete.\n\nDelete unlocked and second-generation managed packages. Before you delete a package, first delete all associated package versions.",
    "examples": [
      "Delete a package using its alias from your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\"",
      "Delete a package using its ID from the specified Dev Hub org:\n<%= config.bin %> <%= command.id %> --package 0Ho... --target-dev-hub devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "aliases": [
          "noprompt"
        ],
        "char": "n",
        "deprecateAliases": true,
        "name": "no-prompt",
        "summary": "Don’t prompt before deleting the package.",
        "allowNo": false,
        "type": "boolean"
      },
      "package": {
        "char": "p",
        "name": "package",
        "required": true,
        "summary": "ID (starts with 0Ho) or alias of the package to delete.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "undelete": {
        "hidden": true,
        "name": "undelete",
        "summary": "Undelete a deleted package.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "package:delete",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "delete.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:delete",
      "package:force:delete",
      "package:delete:force",
      "force:delete:package",
      "delete:force:package",
      "delete:package:force"
    ],
    "permutations": [
      "package:delete",
      "delete:package"
    ]
  },
  {
    "aliases": [
      "force:package:install"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Install or upgrade a version of a package in the target org.",
    "description": "To install or upgrade a package, specify a specific version of the package using the 04t package ID. The package and the version you specified installs in your default target org unless you supply the username for a different target org.\n\nWhen upgrading an unlocked package, include the --upgrade-type value to specify whether any removed components are deprecated or deleted. To delete components that can be safely deleted and deprecate the others, specify \"--upgrade-type Mixed\" (the default). To deprecate all removed components, specify \"--upgrade-type DeprecateOnly\". To delete all removed components, except for custom objects and custom fields, that don't have dependencies, specify \"--upgrade-type Delete\". (Note: This option can result in the loss of data that is associated with the deleted components.)",
    "examples": [
      "Install or upgrade a package version with the specified ID in the org with username \"me@example.com\":\n<%= config.bin %> <%= command.id %> --package 04t... --target-org me@example.com",
      "Install or upgrade a package version with the specified alias into your default org:\n<%= config.bin %> <%= command.id %> --package awesome_package_alias",
      "Install or upgrade a package version with an alias that includes spaces into your default org:\n<%= config.bin %> <%= command.id %> --package \"Awesome Package Alias\"",
      "Upgrade an unlocked package version with the specified ID and deprecate all removed components:\n<%= config.bin %> <%= command.id %> --package 04t... --upgrade-type DeprecateOnly"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "name": "wait",
        "summary": "Number of minutes to wait for installation status.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "installation-key": {
        "aliases": [
          "installationkey"
        ],
        "char": "k",
        "deprecateAliases": true,
        "name": "installation-key",
        "summary": "Installation key for key-protected package (default: null).",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "publish-wait": {
        "aliases": [
          "publishwait"
        ],
        "char": "b",
        "deprecateAliases": true,
        "name": "publish-wait",
        "summary": "Maximum number of minutes to wait for the Subscriber Package Version ID to become available in the target org before canceling the install request.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "aliases": [
          "noprompt"
        ],
        "char": "r",
        "deprecateAliases": true,
        "description": "Allows the following without an explicit confirmation response: 1) Remote Site Settings and Content Security Policy websites to send or receive data, and 2) --upgrade-type Delete to proceed.",
        "name": "no-prompt",
        "summary": "Don't prompt for confirmation.",
        "allowNo": false,
        "type": "boolean"
      },
      "package": {
        "char": "p",
        "name": "package",
        "required": true,
        "summary": "ID (starts with 04t) or alias of the package version to install.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "apex-compile": {
        "aliases": [
          "apexcompile"
        ],
        "char": "a",
        "deprecateAliases": true,
        "description": "Applies to unlocked packages only. Specifies whether to compile all Apex in the org and package, or only the Apex in the package.\n\nFor package installs into production orgs, or any org that has Apex Compile on Deploy enabled, the platform compiles all Apex in the org after the package install or upgrade operation completes.\n\nThis approach assures that package installs and upgrades don’t impact the performance of an org, and is done even if --apex-compile package is specified.",
        "name": "apex-compile",
        "summary": "Compile all Apex in the org and package, or only Apex in the package; unlocked packages only.",
        "default": "all",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "all",
          "package"
        ],
        "type": "option"
      },
      "security-type": {
        "aliases": [
          "securitytype"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "security-type",
        "summary": "Security access type for the installed package. Available options are AdminsOnly and AllUsers.",
        "default": "AdminsOnly",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "AllUsers",
          "AdminsOnly"
        ],
        "type": "option"
      },
      "upgrade-type": {
        "aliases": [
          "upgradetype"
        ],
        "char": "t",
        "deprecateAliases": true,
        "description": "For unlocked package upgrades, set this flag to one of these values:\n\n- DeprecateOnly: Mark all removed components as deprecated.\n- Mixed: Delete removed components, except for custom objects and custom fields, that don't have dependencies.\n- Delete: Delete all removed components that can be safely deleted, and deprecate the other components.",
        "name": "upgrade-type",
        "summary": "Upgrade type for the package installation; available only for unlocked packages.",
        "default": "Mixed",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "DeprecateOnly",
          "Mixed",
          "Delete"
        ],
        "type": "option"
      },
      "skip-handlers": {
        "char": "l",
        "description": "Allows the installer of a package to optionally skip install handlers in order to decrease overall installation time (available handlers: FeatureEnforcement).",
        "hidden": true,
        "name": "skip-handlers",
        "summary": "Skip install handlers (available handlers: FeatureEnforcement).",
        "hasDynamicHelp": false,
        "multiple": true,
        "options": [
          "FeatureEnforcement"
        ],
        "type": "option"
      }
    },
    "id": "package:install",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "install.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:install",
      "package:force:install",
      "package:install:force",
      "force:install:package",
      "install:force:package",
      "install:package:force"
    ],
    "permutations": [
      "package:install",
      "install:package"
    ]
  },
  {
    "aliases": [
      "force:package:install:report"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Retrieve the status of a package installation request.",
    "examples": [
      "Retrieve the status of a package installation request with the specified ID on your default org:\n<%= config.bin %> <%= command.id %> --request-id 0Hf...",
      "Similar to previous example, except use the org with username me@example.com:\n<%= config.bin %> <%= command.id %> --request-id 0Hf... --target-org me@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "request-id": {
        "aliases": [
          "requestid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "request-id",
        "required": true,
        "summary": "ID of the package install request you want to check; starts with 0Hf.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "package:install:report",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "install",
      "report.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:install:report",
      "package:force:install:report",
      "package:install:force:report",
      "package:install:report:force",
      "force:install:package:report",
      "install:force:package:report",
      "install:package:force:report",
      "install:package:report:force",
      "force:install:report:package",
      "install:force:report:package",
      "install:report:force:package",
      "install:report:package:force",
      "force:package:report:install",
      "package:force:report:install",
      "package:report:force:install",
      "package:report:install:force",
      "force:report:package:install",
      "report:force:package:install",
      "report:package:force:install",
      "report:package:install:force",
      "force:report:install:package",
      "report:force:install:package",
      "report:install:force:package",
      "report:install:package:force"
    ],
    "permutations": [
      "package:install:report",
      "install:package:report",
      "install:report:package",
      "package:report:install",
      "report:package:install",
      "report:install:package"
    ]
  },
  {
    "aliases": [
      "force:package:installed:list"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "List the org’s installed packages.",
    "examples": [
      "List the installed packages in your default org:\n<%= config.bin %> <%= command.id %>",
      "List the installed packages in the org with username me@example.com:\n<%= config.bin %> <%= command.id %> --target-org me@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "package:installed:list",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "installed",
      "list.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:installed:list",
      "package:force:installed:list",
      "package:installed:force:list",
      "package:installed:list:force",
      "force:installed:package:list",
      "installed:force:package:list",
      "installed:package:force:list",
      "installed:package:list:force",
      "force:installed:list:package",
      "installed:force:list:package",
      "installed:list:force:package",
      "installed:list:package:force",
      "force:package:list:installed",
      "package:force:list:installed",
      "package:list:force:installed",
      "package:list:installed:force",
      "force:list:package:installed",
      "list:force:package:installed",
      "list:package:force:installed",
      "list:package:installed:force",
      "force:list:installed:package",
      "list:force:installed:package",
      "list:installed:force:package",
      "list:installed:package:force"
    ],
    "permutations": [
      "package:installed:list",
      "installed:package:list",
      "installed:list:package",
      "package:list:installed",
      "list:package:installed",
      "list:installed:package"
    ]
  },
  {
    "aliases": [
      "force:package:list"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "List all packages in the Dev Hub org.",
    "description": "Description",
    "examples": [
      "List all packages in the specified Dev Hub org:\n<%= config.bin %> <%= command.id %> --target-dev-hub devhub@example.com",
      "List all packages details in the specified Dev Hub org, and show extended details about each package:\n<%= config.bin %> <%= command.id %> --target-dev-hub devhub@example.com --verbose"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Display extended package detail.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "package:list",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "list.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:list",
      "package:force:list",
      "package:list:force",
      "force:list:package",
      "list:force:package",
      "list:package:force"
    ],
    "permutations": [
      "package:list",
      "list:package"
    ]
  },
  {
    "aliases": [
      "force:package:uninstall"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Uninstall a second-generation package from the target org.",
    "description": "Specify the package ID for a second-generation package.\n\nTo list the org’s installed packages, run \"sf package installed list\".\n\nTo uninstall a first-generation package, from Setup, enter Installed Packages in the Quick Find box, then select Installed Packages.",
    "examples": [
      "Uninstall a package with specified ID from an org with username me@example.com:\n<%= config.bin %> <%= command.id %> --package 04t... --target-org me@example.com",
      "Uninstall a package with the specified alias from your default org:\n<%= config.bin %> <%= command.id %> --package undesirable_package_alias",
      "Uninstall a package with an alias that contains spaces from your default org:\n<%= config.bin %> <%= command.id %> --package \"Undesirable Package Alias\""
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "name": "wait",
        "summary": "Number of minutes to wait for uninstall status.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "package": {
        "char": "p",
        "name": "package",
        "required": true,
        "summary": "ID (starts with 04t) or alias of the package version to uninstall.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "package:uninstall",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "uninstall.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:uninstall",
      "package:force:uninstall",
      "package:uninstall:force",
      "force:uninstall:package",
      "uninstall:force:package",
      "uninstall:package:force"
    ],
    "permutations": [
      "package:uninstall",
      "uninstall:package"
    ]
  },
  {
    "aliases": [
      "force:package:uninstall:report"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Retrieve the status of a package uninstall request.",
    "examples": [
      "Retrieve the status of a package uninstall in your default org using the specified request ID:\n<%= config.bin %> <%= command.id %> --request-id 06y...",
      "Similar to previous example, but use the org with username me@example.com:\n<%= config.bin %> <%= command.id %> --request-id 06y... --target-org me@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "request-id": {
        "aliases": [
          "requestid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "request-id",
        "required": true,
        "summary": "ID of the package uninstall request you want to check; starts with 06y.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "package:uninstall:report",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "uninstall",
      "report.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:uninstall:report",
      "package:force:uninstall:report",
      "package:uninstall:force:report",
      "package:uninstall:report:force",
      "force:uninstall:package:report",
      "uninstall:force:package:report",
      "uninstall:package:force:report",
      "uninstall:package:report:force",
      "force:uninstall:report:package",
      "uninstall:force:report:package",
      "uninstall:report:force:package",
      "uninstall:report:package:force",
      "force:package:report:uninstall",
      "package:force:report:uninstall",
      "package:report:force:uninstall",
      "package:report:uninstall:force",
      "force:report:package:uninstall",
      "report:force:package:uninstall",
      "report:package:force:uninstall",
      "report:package:uninstall:force",
      "force:report:uninstall:package",
      "report:force:uninstall:package",
      "report:uninstall:force:package",
      "report:uninstall:package:force"
    ],
    "permutations": [
      "package:uninstall:report",
      "uninstall:package:report",
      "uninstall:report:package",
      "package:report:uninstall",
      "report:package:uninstall",
      "report:uninstall:package"
    ]
  },
  {
    "aliases": [
      "force:package:update"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Update package details.",
    "description": "Specify a new value for each option you want to update.\n\nRun \"sf package list\" to list all packages in the Dev Hub org.",
    "examples": [
      "Update the name of the package with the specified alias; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\" --name \"New Package Name\"",
      "Update the description of the package with the specified ID; uses the specified Dev Hub org:\n<%= config.bin %> <%= command.id %> --package 0Ho... --description \"New Package Description\" --target-dev-hub devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "package": {
        "char": "p",
        "name": "package",
        "required": true,
        "summary": "ID (starts with 0Ho) or alias of the package to update.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "char": "n",
        "name": "name",
        "summary": "New name of the package.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "description": {
        "char": "d",
        "name": "description",
        "summary": "New description of the package.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "error-notification-username": {
        "aliases": [
          "errornotificationusername"
        ],
        "char": "o",
        "deprecateAliases": true,
        "description": "Email notifications include information about unhandled Apex exceptions, and install, upgrade, or uninstall failures associated with your package.",
        "name": "error-notification-username",
        "summary": "Active Dev Hub user designated to receive email notifications for package errors.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "enable-app-analytics": {
        "name": "enable-app-analytics",
        "summary": "Enable AppExchange App Analytics usage data collection on this managed package and its components.",
        "allowNo": true,
        "type": "boolean"
      }
    },
    "id": "package:update",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "update.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:update",
      "package:force:update",
      "package:update:force",
      "force:update:package",
      "update:force:package",
      "update:package:force"
    ],
    "permutations": [
      "package:update",
      "update:package"
    ]
  },
  {
    "aliases": [
      "force:package:version:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Create a package version in the Dev Hub org.",
    "description": "The package version is based on the package contents in the specified directory.\n\nTo retrieve details about a package version create request, including status and package version ID (04t), run \"sf package version create report -i 08c...\".\n\nWe recommend that you specify the --installation-key parameter to protect the contents of your package and to prevent unauthorized installation of your package.\n\nTo list package version creation requests in the org, run \"sf package version create list\".\nTo promote a package version to released, you must use the --code-coverage parameter. The package must also meet the code coverage requirements. This requirement applies to both managed and unlocked packages.\n\nWe don’t calculate code coverage for org-dependent unlocked packages, or for package versions that specify --skip-validation.",
    "examples": [
      "Create a package version from the contents of the \"common\" directory and give it an installation key of \"password123\"; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --path common --installation-key password123",
      "Create a package version from a package with the specified alias; uses the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\" --installation-key password123 --target-dev-hub devhub@example.com",
      "Create a package version from a package with the specified ID:\n<%= config.bin %> <%= command.id %> --package 0Ho... --installation-key password123",
      "Create a package version and skip the validation step:\n<%= config.bin %> <%= command.id %> --path common --installation-key password123 --skip-validation",
      "Create a package version and perform package validations asynchronously:\n<%= config.bin %> <%= command.id %> --path common --installation-key password123 --async-validation"
    ],
    "requiresProject": true,
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "branch": {
        "char": "b",
        "name": "branch",
        "summary": "Name of the branch in your source control system that the package version is based on.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "build-instance": {
        "aliases": [
          "buildinstance"
        ],
        "char": "s",
        "deprecateAliases": true,
        "hidden": true,
        "name": "build-instance",
        "summary": "Instance where the package version will be created, such as NA50.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "code-coverage": {
        "aliases": [
          "codecoverage"
        ],
        "char": "c",
        "deprecateAliases": true,
        "description": "Before you can promote and release a managed or unlocked package version, the Apex code must meet a minimum 75% code coverage requirement. We don’t calculate code coverage for org-dependent unlocked packages or for package versions that specify --skip-validation.",
        "exclusive": [
          "skip-validation"
        ],
        "name": "code-coverage",
        "summary": "Calculate and store the code coverage percentage by running the packaged Apex tests included in this package version.",
        "allowNo": false,
        "type": "boolean"
      },
      "definition-file": {
        "aliases": [
          "definitionfile"
        ],
        "char": "f",
        "deprecateAliases": true,
        "description": "For a patch version, the features specified in this file are ignored, and instead the features specified for the ancestor version are used.",
        "name": "definition-file",
        "summary": "Path to a definition file similar to scratch org definition file that contains the list of features and org preferences that the metadata of the package version depends on.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "installation-key": {
        "aliases": [
          "installationkey"
        ],
        "char": "k",
        "deprecateAliases": true,
        "name": "installation-key",
        "summary": "Installation key for key-protected package. (either --installation-key or --installation-key-bypass is required)",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "installation-key-bypass": {
        "aliases": [
          "installationkeybypass"
        ],
        "char": "x",
        "deprecateAliases": true,
        "description": "If you bypass this requirement, anyone can install your package.",
        "name": "installation-key-bypass",
        "summary": "Bypass the installation key requirement. (either --installation-key or --installation-key-bypass is required)",
        "allowNo": false,
        "type": "boolean"
      },
      "package": {
        "char": "p",
        "name": "package",
        "summary": "ID (starts with 0Ho) or alias of the package to create a version of.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "path": {
        "char": "d",
        "name": "path",
        "summary": "Path to the directory that contains the contents of the package.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "post-install-script": {
        "aliases": [
          "postinstallscript"
        ],
        "deprecateAliases": true,
        "description": "The post-install script is an Apex class within this package that is run in the installing org after installations or upgrades of this package version.",
        "name": "post-install-script",
        "summary": "Name of the post-install script; applies to managed packages only.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "post-install-url": {
        "aliases": [
          "postinstallurl"
        ],
        "deprecateAliases": true,
        "description": "The contents of the post-installation instructions URL are displayed in the UI after installation of the package version.",
        "name": "post-install-url",
        "summary": "Post-install instructions URL.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "preserve": {
        "char": "r",
        "hidden": true,
        "name": "preserve",
        "summary": "Preserve temp files that would otherwise be deleted.",
        "allowNo": false,
        "type": "boolean"
      },
      "releasenotes-url": {
        "aliases": [
          "releasenotesurl"
        ],
        "deprecateAliases": true,
        "description": "This link is displayed in the package installation UI to provide release notes for this package version to subscribers.",
        "name": "releasenotes-url",
        "summary": "Release notes URL.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "skip-ancestor-check": {
        "aliases": [
          "skipancestorcheck"
        ],
        "deprecateAliases": true,
        "name": "skip-ancestor-check",
        "summary": "Overrides ancestry requirements, which allows you to specify a package ancestor that isn’t the highest released package version.",
        "allowNo": false,
        "type": "boolean"
      },
      "skip-validation": {
        "aliases": [
          "skipvalidation"
        ],
        "deprecateAliases": true,
        "description": "Skips validation of dependencies, package ancestors, and metadata during package version creation. Skipping validation reduces the time it takes to create a new package version, but you can promote only validated package versions. Skipping validation can suppress important errors that can surface at a later stage. You can specify skip validation or code coverage, but not both. Code coverage is calculated during validation.",
        "exclusive": [
          "code-coverage",
          "async-validation"
        ],
        "name": "skip-validation",
        "summary": "Skip validation during package version creation; you can’t promote unvalidated package versions.",
        "allowNo": false,
        "type": "boolean"
      },
      "async-validation": {
        "description": "Specifying async validation returns the package version earlier in the process, allowing you to install and test the new version right away. If your development team is using continuous integration (CI) scripts, async validation can reduce your overall CI run time.",
        "exclusive": [
          "skip-validation"
        ],
        "name": "async-validation",
        "summary": "Return a new package version before completing package validations.",
        "allowNo": false,
        "type": "boolean"
      },
      "tag": {
        "char": "t",
        "name": "tag",
        "summary": "Package version’s tag.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "uninstall-script": {
        "aliases": [
          "uninstallscript"
        ],
        "deprecateAliases": true,
        "description": "The uninstall script is an Apex class within this package that is run in the installing org after uninstallations of this package.",
        "name": "uninstall-script",
        "summary": "Uninstall script name; applies to managed packages only.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "validate-schema": {
        "aliases": [
          "validateschema"
        ],
        "char": "j",
        "deprecateAliases": true,
        "hidden": true,
        "name": "validate-schema",
        "summary": "Validate the sfdx-project.json file against the JSON schema.",
        "allowNo": false,
        "type": "boolean"
      },
      "version-description": {
        "aliases": [
          "versiondescription"
        ],
        "char": "e",
        "deprecateAliases": true,
        "name": "version-description",
        "summary": "Description of the package version to be created; overrides the sfdx-project.json value.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "version-name": {
        "aliases": [
          "versionname"
        ],
        "char": "a",
        "deprecateAliases": true,
        "name": "version-name",
        "summary": "Name of the package version to be created; overrides the sfdx-project.json value.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "version-number": {
        "aliases": [
          "versionnumber"
        ],
        "char": "n",
        "deprecateAliases": true,
        "description": "For information about the format of the version number, see https://developer.salesforce.com/docs/atlas.en-us.pkg2_dev.meta/pkg2_dev/sfdx_dev2gp_config_file.htm.",
        "name": "version-number",
        "summary": "Version number of the package version to be created; overrides the sfdx-project.json value.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "name": "wait",
        "summary": "Number of minutes to wait for the package version to be created.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "language": {
        "description": "Specify the language using a language code listed under \"Supported Languages\" in Salesforce Help. If no language is specified, the language defaults to the language of the Dev Hub user who created the package.",
        "name": "language",
        "summary": "Language for the package.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "description": "Display verbose command output. When polling for the status of the creation, this will output status and timeout data on a separate line for each poll request, which is useful in CI systems where timeouts can occur with long periods of no output from commands.",
        "name": "verbose",
        "summary": "Display verbose command output.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "package:version:create",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "version",
      "create.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:version:create",
      "package:force:version:create",
      "package:version:force:create",
      "package:version:create:force",
      "force:version:package:create",
      "version:force:package:create",
      "version:package:force:create",
      "version:package:create:force",
      "force:version:create:package",
      "version:force:create:package",
      "version:create:force:package",
      "version:create:package:force",
      "force:package:create:version",
      "package:force:create:version",
      "package:create:force:version",
      "package:create:version:force",
      "force:create:package:version",
      "create:force:package:version",
      "create:package:force:version",
      "create:package:version:force",
      "force:create:version:package",
      "create:force:version:package",
      "create:version:force:package",
      "create:version:package:force"
    ],
    "permutations": [
      "package:version:create",
      "version:package:create",
      "version:create:package",
      "package:create:version",
      "create:package:version",
      "create:version:package"
    ]
  },
  {
    "aliases": [
      "force:package:version:create:list"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "List package version creation requests.",
    "description": "Shows the details of each request to create a package version in the Dev Hub org.\n\nAll filter parameters are applied using the AND logical operator (not OR).\n\nTo get information about a specific request, run \"sf package version create report\" and supply the request ID.",
    "examples": [
      "List all package version creation requests in your default Dev Hub org:\n<%= config.bin %> <%= command.id %>",
      "List package version creation requests from the last 3 days in the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --created-last-days 3 --target-dev-hub",
      "List package version creation requests with status Error:\n<%= config.bin %> <%= command.id %> --status Error",
      "List package version creation requests with status InProgress:\n<%= config.bin %> <%= command.id %> --status InProgress",
      "List package version creation requests with status Success that were created today:\n<%= config.bin %> <%= command.id %> --created-last-days 0 --status Success"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "created-last-days": {
        "aliases": [
          "createdlastdays"
        ],
        "char": "c",
        "deprecateAliases": true,
        "name": "created-last-days",
        "summary": "Number of days since the request was created, starting at 00:00:00 of first day to now. Use 0 for today.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "status": {
        "char": "s",
        "name": "status",
        "summary": "Status of the version creation request, used to filter the list.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "Queued",
          "InProgress",
          "Success",
          "Error"
        ],
        "type": "option"
      },
      "show-conversions-only": {
        "name": "show-conversions-only",
        "summary": "Filter the list output to display only converted package version.",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Displays additional information at a slight performance cost, such as the version name and number for each package version create request.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "package:version:create:list",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "version",
      "create",
      "list.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:version:create:list",
      "package:force:version:create:list",
      "package:version:force:create:list",
      "package:version:create:force:list",
      "package:version:create:list:force",
      "force:version:package:create:list",
      "version:force:package:create:list",
      "version:package:force:create:list",
      "version:package:create:force:list",
      "version:package:create:list:force",
      "force:version:create:package:list",
      "version:force:create:package:list",
      "version:create:force:package:list",
      "version:create:package:force:list",
      "version:create:package:list:force",
      "force:version:create:list:package",
      "version:force:create:list:package",
      "version:create:force:list:package",
      "version:create:list:force:package",
      "version:create:list:package:force",
      "force:package:create:version:list",
      "package:force:create:version:list",
      "package:create:force:version:list",
      "package:create:version:force:list",
      "package:create:version:list:force",
      "force:create:package:version:list",
      "create:force:package:version:list",
      "create:package:force:version:list",
      "create:package:version:force:list",
      "create:package:version:list:force",
      "force:create:version:package:list",
      "create:force:version:package:list",
      "create:version:force:package:list",
      "create:version:package:force:list",
      "create:version:package:list:force",
      "force:create:version:list:package",
      "create:force:version:list:package",
      "create:version:force:list:package",
      "create:version:list:force:package",
      "create:version:list:package:force",
      "force:package:create:list:version",
      "package:force:create:list:version",
      "package:create:force:list:version",
      "package:create:list:force:version",
      "package:create:list:version:force",
      "force:create:package:list:version",
      "create:force:package:list:version",
      "create:package:force:list:version",
      "create:package:list:force:version",
      "create:package:list:version:force",
      "force:create:list:package:version",
      "create:force:list:package:version",
      "create:list:force:package:version",
      "create:list:package:force:version",
      "create:list:package:version:force",
      "force:create:list:version:package",
      "create:force:list:version:package",
      "create:list:force:version:package",
      "create:list:version:force:package",
      "create:list:version:package:force",
      "force:package:version:list:create",
      "package:force:version:list:create",
      "package:version:force:list:create",
      "package:version:list:force:create",
      "package:version:list:create:force",
      "force:version:package:list:create",
      "version:force:package:list:create",
      "version:package:force:list:create",
      "version:package:list:force:create",
      "version:package:list:create:force",
      "force:version:list:package:create",
      "version:force:list:package:create",
      "version:list:force:package:create",
      "version:list:package:force:create",
      "version:list:package:create:force",
      "force:version:list:create:package",
      "version:force:list:create:package",
      "version:list:force:create:package",
      "version:list:create:force:package",
      "version:list:create:package:force",
      "force:package:list:version:create",
      "package:force:list:version:create",
      "package:list:force:version:create",
      "package:list:version:force:create",
      "package:list:version:create:force",
      "force:list:package:version:create",
      "list:force:package:version:create",
      "list:package:force:version:create",
      "list:package:version:force:create",
      "list:package:version:create:force",
      "force:list:version:package:create",
      "list:force:version:package:create",
      "list:version:force:package:create",
      "list:version:package:force:create",
      "list:version:package:create:force",
      "force:list:version:create:package",
      "list:force:version:create:package",
      "list:version:force:create:package",
      "list:version:create:force:package",
      "list:version:create:package:force",
      "force:package:list:create:version",
      "package:force:list:create:version",
      "package:list:force:create:version",
      "package:list:create:force:version",
      "package:list:create:version:force",
      "force:list:package:create:version",
      "list:force:package:create:version",
      "list:package:force:create:version",
      "list:package:create:force:version",
      "list:package:create:version:force",
      "force:list:create:package:version",
      "list:force:create:package:version",
      "list:create:force:package:version",
      "list:create:package:force:version",
      "list:create:package:version:force",
      "force:list:create:version:package",
      "list:force:create:version:package",
      "list:create:force:version:package",
      "list:create:version:force:package",
      "list:create:version:package:force"
    ],
    "permutations": [
      "package:version:create:list",
      "version:package:create:list",
      "version:create:package:list",
      "version:create:list:package",
      "package:create:version:list",
      "create:package:version:list",
      "create:version:package:list",
      "create:version:list:package",
      "package:create:list:version",
      "create:package:list:version",
      "create:list:package:version",
      "create:list:version:package",
      "package:version:list:create",
      "version:package:list:create",
      "version:list:package:create",
      "version:list:create:package",
      "package:list:version:create",
      "list:package:version:create",
      "list:version:package:create",
      "list:version:create:package",
      "package:list:create:version",
      "list:package:create:version",
      "list:create:package:version",
      "list:create:version:package"
    ]
  },
  {
    "aliases": [
      "force:package:version:create:report"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Retrieve details about a package version creation request.",
    "description": "Specify the request ID for which you want to view details. If applicable, the command displays errors related to the request.\n\nTo show all requests in the org, run \"sf package version create list\".",
    "examples": [
      "Retrieve details about the package version creation request with the specified ID; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package-create-request-id 08c...",
      "Retrieve details about the specified package version creation request in the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package-create-request-id 08c... --target-dev-hub devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "package-create-request-id": {
        "aliases": [
          "packagecreaterequestid"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "package-create-request-id",
        "required": true,
        "summary": "ID (starts with 08c) of the package version creation request you want to display.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "package:version:create:report",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "version",
      "create",
      "report.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:version:create:report",
      "package:force:version:create:report",
      "package:version:force:create:report",
      "package:version:create:force:report",
      "package:version:create:report:force",
      "force:version:package:create:report",
      "version:force:package:create:report",
      "version:package:force:create:report",
      "version:package:create:force:report",
      "version:package:create:report:force",
      "force:version:create:package:report",
      "version:force:create:package:report",
      "version:create:force:package:report",
      "version:create:package:force:report",
      "version:create:package:report:force",
      "force:version:create:report:package",
      "version:force:create:report:package",
      "version:create:force:report:package",
      "version:create:report:force:package",
      "version:create:report:package:force",
      "force:package:create:version:report",
      "package:force:create:version:report",
      "package:create:force:version:report",
      "package:create:version:force:report",
      "package:create:version:report:force",
      "force:create:package:version:report",
      "create:force:package:version:report",
      "create:package:force:version:report",
      "create:package:version:force:report",
      "create:package:version:report:force",
      "force:create:version:package:report",
      "create:force:version:package:report",
      "create:version:force:package:report",
      "create:version:package:force:report",
      "create:version:package:report:force",
      "force:create:version:report:package",
      "create:force:version:report:package",
      "create:version:force:report:package",
      "create:version:report:force:package",
      "create:version:report:package:force",
      "force:package:create:report:version",
      "package:force:create:report:version",
      "package:create:force:report:version",
      "package:create:report:force:version",
      "package:create:report:version:force",
      "force:create:package:report:version",
      "create:force:package:report:version",
      "create:package:force:report:version",
      "create:package:report:force:version",
      "create:package:report:version:force",
      "force:create:report:package:version",
      "create:force:report:package:version",
      "create:report:force:package:version",
      "create:report:package:force:version",
      "create:report:package:version:force",
      "force:create:report:version:package",
      "create:force:report:version:package",
      "create:report:force:version:package",
      "create:report:version:force:package",
      "create:report:version:package:force",
      "force:package:version:report:create",
      "package:force:version:report:create",
      "package:version:force:report:create",
      "package:version:report:force:create",
      "package:version:report:create:force",
      "force:version:package:report:create",
      "version:force:package:report:create",
      "version:package:force:report:create",
      "version:package:report:force:create",
      "version:package:report:create:force",
      "force:version:report:package:create",
      "version:force:report:package:create",
      "version:report:force:package:create",
      "version:report:package:force:create",
      "version:report:package:create:force",
      "force:version:report:create:package",
      "version:force:report:create:package",
      "version:report:force:create:package",
      "version:report:create:force:package",
      "version:report:create:package:force",
      "force:package:report:version:create",
      "package:force:report:version:create",
      "package:report:force:version:create",
      "package:report:version:force:create",
      "package:report:version:create:force",
      "force:report:package:version:create",
      "report:force:package:version:create",
      "report:package:force:version:create",
      "report:package:version:force:create",
      "report:package:version:create:force",
      "force:report:version:package:create",
      "report:force:version:package:create",
      "report:version:force:package:create",
      "report:version:package:force:create",
      "report:version:package:create:force",
      "force:report:version:create:package",
      "report:force:version:create:package",
      "report:version:force:create:package",
      "report:version:create:force:package",
      "report:version:create:package:force",
      "force:package:report:create:version",
      "package:force:report:create:version",
      "package:report:force:create:version",
      "package:report:create:force:version",
      "package:report:create:version:force",
      "force:report:package:create:version",
      "report:force:package:create:version",
      "report:package:force:create:version",
      "report:package:create:force:version",
      "report:package:create:version:force",
      "force:report:create:package:version",
      "report:force:create:package:version",
      "report:create:force:package:version",
      "report:create:package:force:version",
      "report:create:package:version:force",
      "force:report:create:version:package",
      "report:force:create:version:package",
      "report:create:force:version:package",
      "report:create:version:force:package",
      "report:create:version:package:force"
    ],
    "permutations": [
      "package:version:create:report",
      "version:package:create:report",
      "version:create:package:report",
      "version:create:report:package",
      "package:create:version:report",
      "create:package:version:report",
      "create:version:package:report",
      "create:version:report:package",
      "package:create:report:version",
      "create:package:report:version",
      "create:report:package:version",
      "create:report:version:package",
      "package:version:report:create",
      "version:package:report:create",
      "version:report:package:create",
      "version:report:create:package",
      "package:report:version:create",
      "report:package:version:create",
      "report:version:package:create",
      "report:version:create:package",
      "package:report:create:version",
      "report:package:create:version",
      "report:create:package:version",
      "report:create:version:package"
    ]
  },
  {
    "aliases": [
      "force:package:version:delete"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Delete a package version.",
    "description": "Specify the ID or alias of the package version you want to delete. In second-generation managed packaging, only beta package versions can be deleted. Before deleting a package version, review the considerations outlined in https://developer.salesforce.com/docs/atlas.en-us.pkg2_dev.meta/pkg2_dev/sfdx_dev_dev2gp_package_deletion.htm.",
    "examples": [
      "Delete a package version with the specified alias using your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\"",
      "Delete a package version with the specified ID using the Dev Hub org with username \"devhub@example.com\":\n<%= config.bin %> <%= command.id %> --package 04t... --target-org devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "aliases": [
          "noprompt"
        ],
        "char": "n",
        "deprecateAliases": true,
        "name": "no-prompt",
        "summary": "Don’t prompt before deleting the package version.",
        "allowNo": false,
        "type": "boolean"
      },
      "package": {
        "char": "p",
        "name": "package",
        "required": true,
        "summary": "ID (starts with 04t) or alias of the package version to delete.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "undelete": {
        "hidden": true,
        "name": "undelete",
        "summary": "Undelete a deleted package version.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "package:version:delete",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "version",
      "delete.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:version:delete",
      "package:force:version:delete",
      "package:version:force:delete",
      "package:version:delete:force",
      "force:version:package:delete",
      "version:force:package:delete",
      "version:package:force:delete",
      "version:package:delete:force",
      "force:version:delete:package",
      "version:force:delete:package",
      "version:delete:force:package",
      "version:delete:package:force",
      "force:package:delete:version",
      "package:force:delete:version",
      "package:delete:force:version",
      "package:delete:version:force",
      "force:delete:package:version",
      "delete:force:package:version",
      "delete:package:force:version",
      "delete:package:version:force",
      "force:delete:version:package",
      "delete:force:version:package",
      "delete:version:force:package",
      "delete:version:package:force"
    ],
    "permutations": [
      "package:version:delete",
      "version:package:delete",
      "version:delete:package",
      "package:delete:version",
      "delete:package:version",
      "delete:version:package"
    ]
  },
  {
    "aliases": [
      "force:package:version:displayancestry"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Display the ancestry tree for a 2GP managed package version.",
    "examples": [
      "Display the ancestry tree for a package version with the specified alias, using your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package package_version_alias",
      "Similar to previous example, but display the output in DOT code:\n<%= config.bin %> <%= command.id %> --package package_version_alias --dot-code",
      "Display the ancestry tree for a package with the specified ID, using the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package OHo... --target-dev-hub devhub@example.com",
      "Display the ancestry tree of a package version with the specified ID, using your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package 04t..."
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "package": {
        "char": "p",
        "description": "If you specify a package ID (starts with 0Ho) or alias, the ancestor tree for every package version associated with the package ID is displayed. If you specify a package version (starts with 04t) or alias, the ancestry tree of the specified package version is displayed.",
        "name": "package",
        "required": true,
        "summary": "ID or alias of the package (starts with 0Ho) or package version (starts with 04t) to display ancestry for.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "dot-code": {
        "aliases": [
          "dotcode"
        ],
        "deprecateAliases": true,
        "description": "You can use the DOT code output in graph visualization software to create tree visualizations.",
        "name": "dot-code",
        "summary": "Display the ancestry tree in DOT code.",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Display both the package version ID (starts with 04t) and the version number (major.minor.patch.build) in the ancestry tree.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "package:version:displayancestry",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "version",
      "displayancestry.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:version:displayancestry",
      "package:force:version:displayancestry",
      "package:version:force:displayancestry",
      "package:version:displayancestry:force",
      "force:version:package:displayancestry",
      "version:force:package:displayancestry",
      "version:package:force:displayancestry",
      "version:package:displayancestry:force",
      "force:version:displayancestry:package",
      "version:force:displayancestry:package",
      "version:displayancestry:force:package",
      "version:displayancestry:package:force",
      "force:package:displayancestry:version",
      "package:force:displayancestry:version",
      "package:displayancestry:force:version",
      "package:displayancestry:version:force",
      "force:displayancestry:package:version",
      "displayancestry:force:package:version",
      "displayancestry:package:force:version",
      "displayancestry:package:version:force",
      "force:displayancestry:version:package",
      "displayancestry:force:version:package",
      "displayancestry:version:force:package",
      "displayancestry:version:package:force"
    ],
    "permutations": [
      "package:version:displayancestry",
      "version:package:displayancestry",
      "version:displayancestry:package",
      "package:displayancestry:version",
      "displayancestry:package:version",
      "displayancestry:version:package"
    ]
  },
  {
    "aliases": [
      "force:package:version:list"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "List all package versions in the Dev Hub org.",
    "description": "Description",
    "examples": [
      "List package versions in your default Dev Hub org that were created in the last 3 days; show only the released versions and order the list using the PatchVersion field. Display extended details about each package version:\n<%= config.bin %> <%= command.id %> --verbose --created-last-days 3 --released --order-by PatchVersion",
      "List the released package versions for the two specified packages that were modified today; use the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --packages 0Ho000000000000,0Ho000000000001 --released --modified-last-days 0 --target-dev-hub devhub@example.com",
      "List all released package versions in your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --released",
      "List package versions that were modified today in your default Dev Hub org; show limited details about each one:\n<%= config.bin %> <%= command.id %> --concise --modified-last-days 0",
      "List package versions that are based on the \"featureA\" branch in your source control system that were modified today in your default Dev Hub org; show limited details about each one:\n<%= config.bin %> <%= command.id %> --concise --modified-last-days 0 --branch featureA",
      "List released package versions that were created in the last 3 days in your default Dev Hub org; show limited details:\n<%= config.bin %> <%= command.id %> --concise --created-last-days 3 --released",
      "List released package versions that were modified today for the two packages with specified aliases in your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --packages exp-mgr,exp-mgr-util --released --modified-last-days 0"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "created-last-days": {
        "aliases": [
          "createdlastdays"
        ],
        "char": "c",
        "deprecateAliases": true,
        "name": "created-last-days",
        "summary": "Number of days since the request was created, starting at 00:00:00 of first day to now. Use 0 for today.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "concise": {
        "name": "concise",
        "summary": "Display limited package version details.",
        "allowNo": false,
        "type": "boolean"
      },
      "show-conversions-only": {
        "name": "show-conversions-only",
        "summary": "Filter the list output to display only converted package version.",
        "allowNo": false,
        "type": "boolean"
      },
      "modified-last-days": {
        "aliases": [
          "modifiedlastdays"
        ],
        "char": "m",
        "deprecateAliases": true,
        "name": "modified-last-days",
        "summary": "Number of days since the items were modified, starting at 00:00:00 of first day to now. Use 0 for today.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "packages": {
        "char": "p",
        "name": "packages",
        "summary": "Comma-delimited list of packages (aliases or 0Ho IDs) to list.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "released": {
        "char": "r",
        "name": "released",
        "summary": "Display released versions only (IsReleased=true).",
        "allowNo": false,
        "type": "boolean"
      },
      "branch": {
        "char": "b",
        "name": "branch",
        "summary": "Branch in your source control system used to filter the results; only package versions based on the specified branch are listed.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "order-by": {
        "aliases": [
          "orderby"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "order-by",
        "summary": "Package version fields used to order the list.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Display extended package version details.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "package:version:list",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "version",
      "list.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:version:list",
      "package:force:version:list",
      "package:version:force:list",
      "package:version:list:force",
      "force:version:package:list",
      "version:force:package:list",
      "version:package:force:list",
      "version:package:list:force",
      "force:version:list:package",
      "version:force:list:package",
      "version:list:force:package",
      "version:list:package:force",
      "force:package:list:version",
      "package:force:list:version",
      "package:list:force:version",
      "package:list:version:force",
      "force:list:package:version",
      "list:force:package:version",
      "list:package:force:version",
      "list:package:version:force",
      "force:list:version:package",
      "list:force:version:package",
      "list:version:force:package",
      "list:version:package:force"
    ],
    "permutations": [
      "package:version:list",
      "version:package:list",
      "version:list:package",
      "package:list:version",
      "list:package:version",
      "list:version:package"
    ]
  },
  {
    "aliases": [
      "force:package:version:promote"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Promote a package version to released.",
    "description": "Supply the ID or alias of the package version you want to promote. Promotes the package version to released status.",
    "deprecateAliases": true,
    "examples": [
      "Promote the package version with the specified ID to released; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package 04t...",
      "Promote the package version with the specified alias to released; uses the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package awesome_package_alias --target-dev-hub devhub@example.com",
      "Promote the package version with an alias that has spaces to released:\n<%= config.bin %> <%= command.id %> --package \"Awesome Package Alias\""
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "package": {
        "char": "p",
        "name": "package",
        "required": true,
        "summary": "ID (starts with 04t) or alias of the package version to promote.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "aliases": [
          "noprompt"
        ],
        "char": "n",
        "deprecateAliases": true,
        "name": "no-prompt",
        "summary": "Don't prompt to confirm setting the package version as released.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "package:version:promote",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "version",
      "promote.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:version:promote",
      "package:force:version:promote",
      "package:version:force:promote",
      "package:version:promote:force",
      "force:version:package:promote",
      "version:force:package:promote",
      "version:package:force:promote",
      "version:package:promote:force",
      "force:version:promote:package",
      "version:force:promote:package",
      "version:promote:force:package",
      "version:promote:package:force",
      "force:package:promote:version",
      "package:force:promote:version",
      "package:promote:force:version",
      "package:promote:version:force",
      "force:promote:package:version",
      "promote:force:package:version",
      "promote:package:force:version",
      "promote:package:version:force",
      "force:promote:version:package",
      "promote:force:version:package",
      "promote:version:force:package",
      "promote:version:package:force"
    ],
    "permutations": [
      "package:version:promote",
      "version:package:promote",
      "version:promote:package",
      "package:promote:version",
      "promote:package:version",
      "promote:version:package"
    ]
  },
  {
    "aliases": [
      "force:package:version:report"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Retrieve details about a package version in the Dev Hub org.",
    "description": "To update package version values, run \"sf package version update\".",
    "examples": [
      "Retrieve details about the package version with the specified ID from your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package 04t...",
      "Retrieve details about the package version with the specified alias (that contains spaces) from the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\" --target-dev-hub devhub@example.com"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "package": {
        "char": "p",
        "name": "package",
        "required": true,
        "summary": "ID (starts with 04t) or alias of the package to retrieve details for.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Display extended package version details.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "package:version:report",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "version",
      "report.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:version:report",
      "package:force:version:report",
      "package:version:force:report",
      "package:version:report:force",
      "force:version:package:report",
      "version:force:package:report",
      "version:package:force:report",
      "version:package:report:force",
      "force:version:report:package",
      "version:force:report:package",
      "version:report:force:package",
      "version:report:package:force",
      "force:package:report:version",
      "package:force:report:version",
      "package:report:force:version",
      "package:report:version:force",
      "force:report:package:version",
      "report:force:package:version",
      "report:package:force:version",
      "report:package:version:force",
      "force:report:version:package",
      "report:force:version:package",
      "report:version:force:package",
      "report:version:package:force"
    ],
    "permutations": [
      "package:version:report",
      "version:package:report",
      "version:report:package",
      "package:report:version",
      "report:package:version",
      "report:version:package"
    ]
  },
  {
    "aliases": [
      "force:package:version:update"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Update a package version.",
    "description": "Specify a new value for each option you want to update.\n\nTo display details about a package version, run \"sf package version display\".",
    "examples": [
      "Update the package version that has the specified alias (that contains spaces) with a new installation key \"password123\"; uses your default Dev Hub org:\n<%= config.bin %> <%= command.id %> --package \"Your Package Alias\" --installation-key password123",
      "Update the package version that has the specified ID with a new branch and tag; use the Dev Hub org with username devhub@example.com:\n<%= config.bin %> <%= command.id %> --package 04t... --branch main --tag 'Release 1.0.7' --target-dev-hub devhub@example.com",
      "Update the package version that has the specified ID with a new description:\n<%= config.bin %> <%= command.id %> --package 04t... --version-description \"New Package Version Description\""
    ],
    "deprecateAliases": true,
    "requiresProject": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-dev-hub": {
        "aliases": [
          "targetdevhubusername",
          "target-hub-org"
        ],
        "char": "v",
        "deprecateAliases": true,
        "name": "target-dev-hub",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the Dev Hub org. Not required if the `target-dev-hub` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "package": {
        "char": "p",
        "name": "package",
        "required": true,
        "summary": "ID (starts with 04t) or alias of the package to update a version of.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "version-name": {
        "aliases": [
          "versionname"
        ],
        "char": "a",
        "deprecateAliases": true,
        "name": "version-name",
        "summary": "New package version name.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "version-description": {
        "aliases": [
          "versiondescription"
        ],
        "char": "e",
        "deprecateAliases": true,
        "name": "version-description",
        "summary": "New package version description.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "branch": {
        "char": "b",
        "name": "branch",
        "summary": "New package version branch.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "tag": {
        "char": "t",
        "name": "tag",
        "summary": "New package version tag.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "installation-key": {
        "aliases": [
          "installationkey"
        ],
        "char": "k",
        "deprecateAliases": true,
        "name": "installation-key",
        "summary": "New installation key for key-protected package (default: null)",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "package:version:update",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "package",
      "version",
      "update.js"
    ],
    "pluginAlias": "@salesforce/plugin-packaging",
    "pluginName": "@salesforce/plugin-packaging",
    "pluginType": "core",
    "aliasPermutations": [
      "force:package:version:update",
      "package:force:version:update",
      "package:version:force:update",
      "package:version:update:force",
      "force:version:package:update",
      "version:force:package:update",
      "version:package:force:update",
      "version:package:update:force",
      "force:version:update:package",
      "version:force:update:package",
      "version:update:force:package",
      "version:update:package:force",
      "force:package:update:version",
      "package:force:update:version",
      "package:update:force:version",
      "package:update:version:force",
      "force:update:package:version",
      "update:force:package:version",
      "update:package:force:version",
      "update:package:version:force",
      "force:update:version:package",
      "update:force:version:package",
      "update:version:force:package",
      "update:version:package:force"
    ],
    "permutations": [
      "package:version:update",
      "version:package:update",
      "version:update:package",
      "package:update:version",
      "update:package:version",
      "update:version:package"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "description": "List installed plugins.",
    "examples": [
      "<%= config.bin %> <%= command.id %>"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "core": {
        "description": "Show core plugins.",
        "name": "core",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "plugins",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "plugins",
      "index.js"
    ],
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginName": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "plugins"
    ]
  },
  {
    "aliases": [
      "plugins:add"
    ],
    "args": {
      "plugin": {
        "description": "Plugin to install.",
        "name": "plugin",
        "required": true
      }
    },
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": false,
    "_base": "@oclif/core@4.2.4",
    "description": "Uses npm to install plugins.\n\nInstallation of a user-installed plugin will override a core plugin.\n\nUse the SF_NPM_LOG_LEVEL environment variable to set the npm loglevel.\nUse the SF_NPM_REGISTRY environment variable to set the npm registry.",
    "examples": [
      {
        "command": "<%= config.bin %> <%= command.id %> <%- config.pjson.oclif.examplePlugin || \"myplugin\" %> ",
        "description": "Install a plugin from npm registry."
      },
      {
        "command": "<%= config.bin %> <%= command.id %> https://github.com/someuser/someplugin",
        "description": "Install a plugin from a github url."
      },
      {
        "command": "<%= config.bin %> <%= command.id %> someuser/someplugin",
        "description": "Install a plugin from a github slug."
      }
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "force": {
        "char": "f",
        "description": "Force npm to fetch remote resources even if a local copy exists on disk.",
        "name": "force",
        "allowNo": false,
        "type": "boolean"
      },
      "help": {
        "char": "h",
        "description": "Show CLI help.",
        "name": "help",
        "allowNo": false,
        "type": "boolean"
      },
      "jit": {
        "hidden": true,
        "name": "jit",
        "allowNo": false,
        "type": "boolean"
      },
      "silent": {
        "char": "s",
        "description": "Silences npm output.",
        "exclusive": [
          "verbose"
        ],
        "name": "silent",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "description": "Show verbose npm output.",
        "exclusive": [
          "silent"
        ],
        "name": "verbose",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "summary": "Installs a plugin into sf.",
    "id": "plugins:add",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "plugins",
      "install.js"
    ],
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginName": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliasPermutations": [
      "plugins:add",
      "add:plugins"
    ],
    "permutations": [
      "plugins:install",
      "install:plugins"
    ],
    "hidden": false
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "See a list of 3rd-party sf plugins you can install.",
    "examples": [
      "<%= config.bin %> <%= command.id %>"
    ],
    "id": "plugins:discover",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "plugins",
      "discover.js"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "pluginAlias": "@salesforce/plugin-marketplace",
    "pluginName": "@salesforce/plugin-marketplace",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "plugins:discover",
      "discover:plugins"
    ]
  },
  {
    "aliases": [],
    "args": {
      "plugin": {
        "default": ".",
        "description": "Plugin to inspect.",
        "name": "plugin",
        "required": true
      }
    },
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": false,
    "_base": "@oclif/core@4.2.4",
    "description": "Displays installation properties of a plugin.",
    "examples": [
      "<%= config.bin %> <%= command.id %> <%- config.pjson.oclif.examplePlugin || \"myplugin\" %> "
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "help": {
        "char": "h",
        "description": "Show CLI help.",
        "name": "help",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "name": "verbose",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "usage": "plugins:inspect PLUGIN...",
    "id": "plugins:inspect",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "plugins",
      "inspect.js"
    ],
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginName": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "plugins:inspect",
      "inspect:plugins"
    ]
  },
  {
    "aliases": [
      "plugins:add"
    ],
    "args": {
      "plugin": {
        "description": "Plugin to install.",
        "name": "plugin",
        "required": true
      }
    },
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": false,
    "_base": "@oclif/core@4.2.4",
    "description": "Uses npm to install plugins.\n\nInstallation of a user-installed plugin will override a core plugin.\n\nUse the SF_NPM_LOG_LEVEL environment variable to set the npm loglevel.\nUse the SF_NPM_REGISTRY environment variable to set the npm registry.",
    "examples": [
      {
        "command": "<%= config.bin %> <%= command.id %> <%- config.pjson.oclif.examplePlugin || \"myplugin\" %> ",
        "description": "Install a plugin from npm registry."
      },
      {
        "command": "<%= config.bin %> <%= command.id %> https://github.com/someuser/someplugin",
        "description": "Install a plugin from a github url."
      },
      {
        "command": "<%= config.bin %> <%= command.id %> someuser/someplugin",
        "description": "Install a plugin from a github slug."
      }
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "force": {
        "char": "f",
        "description": "Force npm to fetch remote resources even if a local copy exists on disk.",
        "name": "force",
        "allowNo": false,
        "type": "boolean"
      },
      "help": {
        "char": "h",
        "description": "Show CLI help.",
        "name": "help",
        "allowNo": false,
        "type": "boolean"
      },
      "jit": {
        "hidden": true,
        "name": "jit",
        "allowNo": false,
        "type": "boolean"
      },
      "silent": {
        "char": "s",
        "description": "Silences npm output.",
        "exclusive": [
          "verbose"
        ],
        "name": "silent",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "description": "Show verbose npm output.",
        "exclusive": [
          "silent"
        ],
        "name": "verbose",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "summary": "Installs a plugin into sf.",
    "id": "plugins:install",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "plugins",
      "install.js"
    ],
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginName": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliasPermutations": [
      "plugins:add",
      "add:plugins"
    ],
    "permutations": [
      "plugins:install",
      "install:plugins"
    ]
  },
  {
    "aliases": [],
    "args": {
      "path": {
        "default": ".",
        "description": "path to plugin",
        "name": "path",
        "required": true
      }
    },
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "description": "Installation of a linked plugin will override a user-installed or core plugin.\n\ne.g. If you have a user-installed or core plugin that has a 'hello' command, installing a linked plugin with a 'hello' command will override the user-installed or core plugin implementation. This is useful for development work.\n",
    "examples": [
      "<%= config.bin %> <%= command.id %> <%- config.pjson.oclif.examplePlugin || \"myplugin\" %> "
    ],
    "flags": {
      "help": {
        "char": "h",
        "description": "Show CLI help.",
        "name": "help",
        "allowNo": false,
        "type": "boolean"
      },
      "install": {
        "description": "Install dependencies after linking the plugin.",
        "name": "install",
        "allowNo": true,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "name": "verbose",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "summary": "Links a plugin into the CLI for development.",
    "id": "plugins:link",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "plugins",
      "link.js"
    ],
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginName": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "plugins:link",
      "link:plugins"
    ]
  },
  {
    "aliases": [
      "plugins:unlink",
      "plugins:remove"
    ],
    "args": {
      "plugin": {
        "description": "plugin to uninstall",
        "name": "plugin"
      }
    },
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": false,
    "_base": "@oclif/core@4.2.4",
    "description": "Removes a plugin from the CLI.",
    "examples": [
      "<%= config.bin %> <%= command.id %> <%- config.pjson.oclif.examplePlugin || \"myplugin\" %>"
    ],
    "flags": {
      "help": {
        "char": "h",
        "description": "Show CLI help.",
        "name": "help",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "name": "verbose",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "plugins:remove",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "plugins",
      "uninstall.js"
    ],
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginName": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliasPermutations": [
      "plugins:unlink",
      "unlink:plugins",
      "plugins:remove",
      "remove:plugins"
    ],
    "permutations": [
      "plugins:uninstall",
      "uninstall:plugins"
    ],
    "hidden": false
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "flags": {
      "hard": {
        "name": "hard",
        "summary": "Delete node_modules and package manager related files in addition to uninstalling plugins.",
        "allowNo": false,
        "type": "boolean"
      },
      "reinstall": {
        "name": "reinstall",
        "summary": "Reinstall all plugins after uninstalling.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "summary": "Remove all user-installed and linked plugins.",
    "id": "plugins:reset",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "plugins",
      "reset.js"
    ],
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginName": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "plugins:reset",
      "reset:plugins"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Validate a digital signature.",
    "description": "Verifies the digital signature on an npm package matches the signature and key stored at the expected URLs.",
    "examples": [
      "<%= config.bin %> <%= command.id %> --npm @scope/npmName --registry https://npm.pkg.github.com",
      "<%= config.bin %> <%= command.id %> --npm @scope/npmName"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "npm": {
        "char": "n",
        "name": "npm",
        "required": true,
        "summary": "Specify the npm name. This can include a tag/version.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "registry": {
        "char": "r",
        "name": "registry",
        "summary": "The registry name. The behavior is the same as npm.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "plugins:trust:verify",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "plugins",
      "trust",
      "verify.js"
    ],
    "pluginAlias": "@salesforce/plugin-trust",
    "pluginName": "@salesforce/plugin-trust",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "plugins:trust:verify",
      "trust:plugins:verify",
      "trust:verify:plugins",
      "plugins:verify:trust",
      "verify:plugins:trust",
      "verify:trust:plugins"
    ]
  },
  {
    "aliases": [
      "plugins:unlink",
      "plugins:remove"
    ],
    "args": {
      "plugin": {
        "description": "plugin to uninstall",
        "name": "plugin"
      }
    },
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": false,
    "_base": "@oclif/core@4.2.4",
    "description": "Removes a plugin from the CLI.",
    "examples": [
      "<%= config.bin %> <%= command.id %> <%- config.pjson.oclif.examplePlugin || \"myplugin\" %>"
    ],
    "flags": {
      "help": {
        "char": "h",
        "description": "Show CLI help.",
        "name": "help",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "name": "verbose",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "plugins:uninstall",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "plugins",
      "uninstall.js"
    ],
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginName": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliasPermutations": [
      "plugins:unlink",
      "unlink:plugins",
      "plugins:remove",
      "remove:plugins"
    ],
    "permutations": [
      "plugins:uninstall",
      "uninstall:plugins"
    ]
  },
  {
    "aliases": [
      "plugins:unlink",
      "plugins:remove"
    ],
    "args": {
      "plugin": {
        "description": "plugin to uninstall",
        "name": "plugin"
      }
    },
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": false,
    "_base": "@oclif/core@4.2.4",
    "description": "Removes a plugin from the CLI.",
    "examples": [
      "<%= config.bin %> <%= command.id %> <%- config.pjson.oclif.examplePlugin || \"myplugin\" %>"
    ],
    "flags": {
      "help": {
        "char": "h",
        "description": "Show CLI help.",
        "name": "help",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "name": "verbose",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "plugins:unlink",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "plugins",
      "uninstall.js"
    ],
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginName": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliasPermutations": [
      "plugins:unlink",
      "unlink:plugins",
      "plugins:remove",
      "remove:plugins"
    ],
    "permutations": [
      "plugins:uninstall",
      "uninstall:plugins"
    ],
    "hidden": false
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "description": "Update installed plugins.",
    "flags": {
      "help": {
        "char": "h",
        "description": "Show CLI help.",
        "name": "help",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "v",
        "name": "verbose",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "plugins:update",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "plugins",
      "update.js"
    ],
    "pluginAlias": "@oclif/plugin-plugins",
    "pluginName": "@oclif/plugin-plugins",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "plugins:update",
      "update:plugins"
    ]
  },
  {
    "aliases": [
      "force:mdapi:convert"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "deprecateAliases": true,
    "summary": "Convert metadata retrieved via Metadata API into the source format used in Salesforce DX projects.",
    "description": "To use Salesforce CLI to work with components that you retrieved via Metadata API, first convert your files from the metadata format to the source format using this command.\n\nTo convert files from the source format back to the metadata format, run \"sf project convert source\".\n\nTo convert multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --source-dir.",
    "examples": [
      "Convert metadata formatted files in the specified directory into source formatted files; writes converted files to your default package directory:\n$ <%= config.bin %> <%= command.id %> --root-dir path/to/metadata",
      "Similar to previous example, but writes converted files to the specified output directory:\n$ <%= config.bin %> <%= command.id %> --root-dir path/to/metadata --output-dir path/to/outputdir"
    ],
    "requiresProject": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "root-dir": {
        "aliases": [
          "rootdir"
        ],
        "char": "r",
        "deprecateAliases": true,
        "name": "root-dir",
        "required": true,
        "summary": "Root directory that contains the Metadata API–formatted metadata.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir"
        ],
        "char": "d",
        "deprecateAliases": true,
        "name": "output-dir",
        "summary": "Directory to store your files in after they’re converted to source format; can be an absolute or relative path.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "manifest": {
        "char": "x",
        "description": "If you specify this flag, don’t specify --metadata or --source-dir.",
        "name": "manifest",
        "summary": "File path to manifest (package.xml) of metadata types to convert.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "metadata-dir": {
        "aliases": [
          "metadatapath"
        ],
        "char": "p",
        "deprecateAliases": true,
        "description": "The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\n\nIf you specify this flag, don’t specify --manifest or --metadata. If the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes.",
        "exclusive": [
          "manifest",
          "metadata"
        ],
        "name": "metadata-dir",
        "summary": "Root of directory or zip file of metadata formatted files to convert.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "metadata": {
        "char": "m",
        "exclusive": [
          "manifest",
          "metadatapath"
        ],
        "name": "metadata",
        "summary": "Metadata component names to convert.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      }
    },
    "id": "project:convert:mdapi",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "convert",
      "mdapi.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "force:mdapi:convert",
      "mdapi:force:convert",
      "mdapi:convert:force",
      "force:convert:mdapi",
      "convert:force:mdapi",
      "convert:mdapi:force"
    ],
    "permutations": [
      "project:convert:mdapi",
      "convert:project:mdapi",
      "convert:mdapi:project",
      "project:mdapi:convert",
      "mdapi:project:convert",
      "mdapi:convert:project"
    ]
  },
  {
    "aliases": [
      "force:source:convert"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Convert source-formatted files into metadata that you can deploy using Metadata API.",
    "description": "To convert source-formatted files into the metadata format, so that you can deploy them using Metadata API, run this command. Then deploy the metadata using \"sf project deploy\".\n\nTo convert Metadata API–formatted files into the source format, run \"sf project convert mdapi\".\n\nTo specify a package name that includes spaces, enclose the name in single quotes.\n\nTo convert multiple components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --source-dir.",
    "examples": [
      "Convert source-formatted files in the specified directory into metadata-formatted files; writes converted files into a new directory:\n$ <%= config.bin %> <%= command.id %> --root-dir path/to/source",
      "Similar to previous example, but writes converted files to the specified output directory and associates the files with the specified package:\n$ <%= config.bin %> <%= command.id %> --root-dir path/to/source --output-dir path/to/outputdir --package-name 'My Package'"
    ],
    "requiresProject": true,
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "summary": "API Version to use in the generated project's manifest. By default, will use the version from sfdx-project.json",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "root-dir": {
        "aliases": [
          "rootdir"
        ],
        "char": "r",
        "deprecateAliases": true,
        "name": "root-dir",
        "summary": "Source directory other than the default package to convert.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir"
        ],
        "char": "d",
        "deprecateAliases": true,
        "name": "output-dir",
        "summary": "Output directory to store the Metadata API–formatted files in.",
        "default": "metadataPackage_>timestamp<",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "package-name": {
        "aliases": [
          "packagename"
        ],
        "char": "n",
        "deprecateAliases": true,
        "name": "package-name",
        "summary": "Name of the package to associate with the metadata-formatted files.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "manifest": {
        "char": "x",
        "description": "If you specify this flag, don’t specify --metadata or --source-dir.",
        "name": "manifest",
        "summary": "Path to the manifest (package.xml) file that specifies the metadata types to convert.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "source-dir": {
        "aliases": [
          "sourcepath"
        ],
        "char": "p",
        "deprecateAliases": true,
        "description": "The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\n\nIf you specify this flag, don’t specify --manifest or --metadata.",
        "exclusive": [
          "manifest",
          "metadata"
        ],
        "name": "source-dir",
        "summary": "Paths to the local source files to convert.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "metadata": {
        "char": "m",
        "exclusive": [
          "manifest",
          "sourcepath"
        ],
        "name": "metadata",
        "summary": "Metadata component names to convert.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      }
    },
    "id": "project:convert:source",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "convert",
      "source.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "force:source:convert",
      "source:force:convert",
      "source:convert:force",
      "force:convert:source",
      "convert:force:source",
      "convert:source:force"
    ],
    "permutations": [
      "project:convert:source",
      "convert:project:source",
      "convert:source:project",
      "project:source:convert",
      "source:project:convert",
      "source:convert:project"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Enable a behavior of your project source files, and then update your Salesforce DX project to implement the behavior.",
    "description": "Specifically, this command updates the \"sourceBehaviorOption\" option in the \"sfdx-project.json\" file and then converts the associated local source files in your project as needed.\n\nFor example, run this command with the \"--behavior decomposePermissionSetBeta\" flag to start decomposing permission sets when you deploy or retrieve them. Decomposing means breaking up the monolithic metadata API format XML file that corresponds to a metadata component into smaller XML files and directories based on its subtypes. Permission sets are not decomposed by default; you must opt-in to start decomposing them by using this command. When the command finishes, your \"sfdx-project.json\" file is updated to always decompose permission sets, and the existing permission set files in your local package directories are converted into the new decomposed format. You run this command only once for a given behavior change.\n\nFor more information about the possible values for the --behavior flag, see the \"sourceBehaviorOptions\" section in the https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_ws_config.htm topic.",
    "examples": [
      "Update your Salesforce DX project to decompose custom permission sets:\n<%= config.bin %> <%= command.id %> --behavior decomposePermissionSetBeta",
      "Display what the command would do, but don't change any existing files:\n<%= config.bin %> <%= command.id %> --behavior decomposePermissionSetBeta --dry-run",
      "Keep the temporary directory that contains the interim metadata API formatted files:\n<%= config.bin %> <%= command.id %> --behavior decomposePermissionSetBeta --dry-run --preserve-temp-dir"
    ],
    "state": "beta",
    "requiresProject": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "behavior": {
        "char": "b",
        "name": "behavior",
        "required": true,
        "summary": "Behavior to enable; the values correspond to the possible values of the \"sourceBehaviorOption\" option in the \"sfdx-project.json\" file.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "decomposeCustomLabelsBeta2",
          "decomposeCustomLabelsBeta",
          "decomposePermissionSetBeta",
          "decomposePermissionSetBeta2",
          "decomposeSharingRulesBeta",
          "decomposeWorkflowBeta"
        ],
        "type": "option"
      },
      "dry-run": {
        "name": "dry-run",
        "summary": "Display what the command would do, but don't make any actual changes.",
        "allowNo": false,
        "type": "boolean"
      },
      "preserve-temp-dir": {
        "name": "preserve-temp-dir",
        "summary": "Don't delete the metadata API format temporary directory that this command creates. Useful for debugging.",
        "allowNo": false,
        "type": "boolean"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "summary": "Username or alias of the target org.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "project:convert:source-behavior",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "convert",
      "source-behavior.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "project:convert:source-behavior",
      "convert:project:source-behavior",
      "convert:source-behavior:project",
      "project:source-behavior:convert",
      "source-behavior:project:convert",
      "source-behavior:convert:project"
    ]
  },
  {
    "aliases": [
      "force:source:delete"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Delete source from your project and from a non-source-tracked org.",
    "description": "Use this command to delete components from orgs that don’t have source tracking. To remove deleted items from orgs that have source tracking enabled, \"sf project deploy start\".\n\nWhen you run this command, both the local source file and the metadata component in the org are deleted.\n\nTo delete multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --source-dir.",
    "examples": [
      "Delete all local Apex source files and all Apex classes from the org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --metadata ApexClass --target-org my-scratch",
      "Delete a specific Apex class and a Profile that has a space in it from your default org; don't prompt for confirmation:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyFabulousApexClass --metadata \"Profile: My Profile\" --no-prompt",
      "Run the tests that aren’t in any managed packages as part of the deletion; if the delete succeeds, and the org has source-tracking enabled, update the source tracking information:\n<%= config.bin %> <%= command.id %> --metadata ApexClass --test-level RunLocalTests --track-source",
      "Delete the Apex source files in a directory and the corresponding components from your default org:\n<%= config.bin %> <%= command.id %> --source-dir force-app/main/default/classes"
    ],
    "deprecateAliases": true,
    "requiresProject": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "check-only": {
        "aliases": [
          "checkonly"
        ],
        "char": "c",
        "deprecateAliases": true,
        "description": "IMPORTANT: Where possible, we changed noninclusive terms to align with our company value of Equality. We maintained certain terms to avoid any effect on customer implementations.\n\nValidates the deleted metadata and runs all Apex tests, but prevents the deletion from being saved to the org.\n\nIf you change a field type from Master-Detail to Lookup or vice versa, that change isn’t supported when using the --check-only flag to test a deletion (validation). This kind of change isn’t supported for test deletions to avoid the risk of data loss or corruption. If a change that isn’t supported for test deletions is included in a deletion package, the test deletion fails and issues an error.\n\nIf your deletion package changes a field type from Master-Detail to Lookup or vice versa, you can still validate the changes prior to deploying to Production by performing a full deletion to another test Sandbox. A full deletion includes a validation of the changes as part of the deletion process.\n\nNote: A Metadata API deletion that includes Master-Detail relationships deletes all detail records in the Recycle Bin in the following cases.\n\n    1. For a deletion with a new Master-Detail field, soft delete (send to the Recycle Bin) all detail records before proceeding to delete the Master-Detail field, or the deletion fails. During the deletion, detail records are permanently deleted from the Recycle Bin and cannot be recovered.\n\n    2. For a deletion that converts a Lookup field relationship to a Master-Detail relationship, detail records must reference a master record or be soft-deleted (sent to the Recycle Bin) for the deletion to succeed. However, a successful deletion permanently deletes any detail records in the Recycle Bin.",
        "name": "check-only",
        "summary": "Validate delete command but don't delete anything from the org or the local project.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
        "name": "wait",
        "summary": "Number of minutes to wait for the command to finish.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "tests": {
        "description": "If a test name contains a space, enclose it in double quotes.\nFor multiple test names, use one of the following formats:\n\n- Repeat the flag for multiple test names: --tests Test1 --tests Test2 --tests \"Test With Space\"\n- Separate the test names with spaces: --tests Test1 Test2 \"Test With Space\"",
        "helpGroup": "Test",
        "name": "tests",
        "summary": "Apex tests to run when --test-level is RunSpecifiedTests.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "test-level": {
        "aliases": [
          "testlevel"
        ],
        "char": "l",
        "deprecateAliases": true,
        "description": "Valid values are:\n\n- NoTestRun — No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\n\n- RunSpecifiedTests — Runs only the tests that you specify with the --tests flag. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n\n- RunLocalTests — All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n\n- RunAllTestsInOrg — All tests in your org are run, including tests of managed packages.\n\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package and target org. For more information, see “Running Tests in a Deployment” in the Metadata API Developer Guide.",
        "helpGroup": "Test",
        "name": "test-level",
        "summary": "Deployment Apex testing level.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "NoTestRun",
          "RunSpecifiedTests",
          "RunLocalTests",
          "RunAllTestsInOrg"
        ],
        "type": "option"
      },
      "no-prompt": {
        "aliases": [
          "noprompt"
        ],
        "char": "r",
        "deprecateAliases": true,
        "name": "no-prompt",
        "summary": "Don't prompt for delete confirmation.",
        "allowNo": false,
        "type": "boolean"
      },
      "metadata": {
        "char": "m",
        "description": "If you specify this flag, don’t specify --source-dir.",
        "name": "metadata",
        "summary": "Metadata components to delete.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "source-dir": {
        "aliases": [
          "sourcepath"
        ],
        "char": "p",
        "deprecateAliases": true,
        "description": "The supplied paths can be a single file (in which case the operation is applied to only one file) or a folder (in which case the operation is applied to all metadata types in the directory and its sub-directories).\n\nIf you specify this flag, don’t specify --metadata.",
        "name": "source-dir",
        "summary": "Source file paths to delete.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "track-source": {
        "aliases": [
          "tracksource"
        ],
        "char": "t",
        "deprecateAliases": true,
        "exclusive": [
          "check-only"
        ],
        "name": "track-source",
        "summary": "If the delete succeeds, update the source tracking information.",
        "allowNo": false,
        "type": "boolean"
      },
      "force-overwrite": {
        "aliases": [
          "forceoverwrite"
        ],
        "char": "f",
        "dependsOn": [
          "track-source"
        ],
        "deprecateAliases": true,
        "name": "force-overwrite",
        "summary": "Ignore conflict warnings and overwrite changes to the org.",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Verbose output of the delete result.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "project:delete:source",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "delete",
      "source.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "force:source:delete",
      "source:force:delete",
      "source:delete:force",
      "force:delete:source",
      "delete:force:source",
      "delete:source:force"
    ],
    "permutations": [
      "project:delete:source",
      "delete:project:source",
      "delete:source:project",
      "project:source:delete",
      "source:project:delete",
      "source:delete:project"
    ]
  },
  {
    "aliases": [
      "force:source:tracking:clear"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "deprecateAliases": true,
    "summary": "Delete all local source tracking information.",
    "description": "WARNING: This command deletes or overwrites all existing source tracking files. Use with extreme caution.\n\nDeletes all local source tracking information. When you next run 'project deploy preview', Salesforce CLI displays all local and remote files as changed, and any files with the same name are listed as conflicts.",
    "requiresProject": true,
    "examples": [
      "Delete local source tracking for the org with alias \"my-scratch\":\n$ <%= config.bin %> <%= command.id %> --target-org my-scratch"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "aliases": [
          "noprompt"
        ],
        "char": "p",
        "deprecateAliases": true,
        "name": "no-prompt",
        "summary": "Don't prompt for source tracking override confirmation.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "project:delete:tracking",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "delete",
      "tracking.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "force:source:tracking:clear",
      "source:force:tracking:clear",
      "source:tracking:force:clear",
      "source:tracking:clear:force",
      "force:tracking:source:clear",
      "tracking:force:source:clear",
      "tracking:source:force:clear",
      "tracking:source:clear:force",
      "force:tracking:clear:source",
      "tracking:force:clear:source",
      "tracking:clear:force:source",
      "tracking:clear:source:force",
      "force:source:clear:tracking",
      "source:force:clear:tracking",
      "source:clear:force:tracking",
      "source:clear:tracking:force",
      "force:clear:source:tracking",
      "clear:force:source:tracking",
      "clear:source:force:tracking",
      "clear:source:tracking:force",
      "force:clear:tracking:source",
      "clear:force:tracking:source",
      "clear:tracking:force:source",
      "clear:tracking:source:force"
    ],
    "permutations": [
      "project:delete:tracking",
      "delete:project:tracking",
      "delete:tracking:project",
      "project:tracking:delete",
      "tracking:project:delete",
      "tracking:delete:project"
    ]
  },
  {
    "aliases": [
      "deploy:metadata:cancel"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "description": "Use this command to cancel a deploy operation that hasn't yet completed in the org. Deploy operations include standard deploys, quick deploys, deploy validations, and deploy cancellations.\n\nRun this command by either passing it a job ID or specifying the --use-most-recent flag to use the job ID of the most recent deploy operation.",
    "summary": "Cancel a deploy operation.",
    "examples": [
      "Cancel a deploy operation using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2",
      "Cancel the most recent deploy operation:\n<%= config.bin %> <%= command.id %> --use-most-recent"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "summary": "Username or alias of the target org.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "async": {
        "description": "The command immediately returns the control of the terminal to you. This way, you can continue to use the CLI. To resume watching the cancellation, run \"<%= config.bin %> project deploy resume\". To check the status of the cancellation, run \"<%= config.bin %> project deploy report\".",
        "exclusive": [
          "wait"
        ],
        "name": "async",
        "summary": "Run the command asynchronously.",
        "allowNo": false,
        "type": "boolean"
      },
      "job-id": {
        "char": "i",
        "description": "These commands return a job ID if they time out or you specified the --async flag:\n\n- <%= config.bin %> project deploy start\n- <%= config.bin %> project deploy validate\n- <%= config.bin %> project deploy quick\n- <%= config.bin %> project deploy cancel\n\nThe job ID is valid for 10 days from when you started the deploy operation.",
        "name": "job-id",
        "summary": "Job ID of the deploy operation you want to cancel.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-most-recent": {
        "char": "r",
        "description": "For performance reasons, this flag uses job IDs for deploy operations that started only in the past 3 days or less. If your most recent deploy operations was more than 3 days ago, this flag won't find a job ID.",
        "name": "use-most-recent",
        "summary": "Use the job ID of the most recent deploy operation.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you. To resume watching the cancellation, run \"<%= config.bin %> project deploy resume\". To check the status of the cancellation, run \"<%= config.bin %> project deploy report\".",
        "exclusive": [
          "async"
        ],
        "name": "wait",
        "summary": "Number of minutes to wait for the command to complete and display results.",
        "hasDynamicHelp": true,
        "helpValue": "<minutes>",
        "multiple": false,
        "type": "option"
      }
    },
    "id": "project:deploy:cancel",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "deploy",
      "cancel.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "deploy:metadata:cancel",
      "metadata:deploy:cancel",
      "metadata:cancel:deploy",
      "deploy:cancel:metadata",
      "cancel:deploy:metadata",
      "cancel:metadata:deploy"
    ],
    "permutations": [
      "project:deploy:cancel",
      "deploy:project:cancel",
      "deploy:cancel:project",
      "project:cancel:deploy",
      "cancel:project:deploy",
      "cancel:deploy:project"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "description": "The first time you run any \"project deploy pipeline\" command, be sure to authorize the org in which DevOps Center is installed. The easiest way to authorize an org is with the \"org login web\" command.\n\nBefore you run this command, create a validated deployment with the \"project deploy pipeline validate\" command, which returns a job ID. Validated deployments haven't been deployed to the org yet; you deploy them with this command. Either pass the job ID to this command or use the --use-most-recent flag to use the job ID of the most recently validated deployment. For the quick deploy to succeed, the associated validated deployment must also have succeeded.\n\nExecuting this quick deploy command takes less time than a standard deploy because it skips running Apex tests. These tests were previously run as part of the validation. Validating first and then running a quick deploy is useful if the deployment to your production org take several hours and you don’t want to risk a failed deploy.\n\nThis command doesn't support source-tracking. The source you deploy overwrites the corresponding metadata in your org. This command doesn’t attempt to merge your source with the versions in your org.",
    "examples": [
      "Run a quick deploy using your default Devops Center org and a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2",
      "Asynchronously run a quick deploy of the most recently validated deployment using an org with alias \"my-prod-org\":\n<%= config.bin %> <%= command.id %> --async --use-most-recent --devops-center-username my-prod-org"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "async": {
        "description": "The command immediately returns the job ID and control of the terminal to you. This way, you can continue to use the CLI. To resume the deployment, run \"sf project deploy pipeline resume\". To check the status of the deployment, run \"sf project deploy pipeline report\".",
        "name": "async",
        "summary": "Run the command asynchronously.",
        "allowNo": false,
        "type": "boolean"
      },
      "concise": {
        "exclusive": [
          "verbose"
        ],
        "name": "concise",
        "summary": "Show concise output of the command result.",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Show verbose output of the command result.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To check the status of the operation, run \"sf project deploy pipeline report\".",
        "exclusive": [
          "async"
        ],
        "name": "wait",
        "summary": "Number of minutes to wait for command to complete and display results.",
        "default": "33 minutes",
        "hasDynamicHelp": true,
        "helpValue": "<minutes>",
        "multiple": false,
        "type": "option"
      },
      "devops-center-username": {
        "char": "c",
        "name": "devops-center-username",
        "required": true,
        "summary": "Username or alias of the DevOps Center org.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "job-id": {
        "char": "i",
        "description": "The job ID is valid for 10 days from when you started the validation.",
        "name": "job-id",
        "summary": "Job ID of the validated deployment to quick deploy.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-most-recent": {
        "char": "r",
        "description": "For performance reasons, this flag uses only job IDs that were validated in the past 3 days or less. If your most recent deployment validation was more than 3 days ago, this flag won't find the job ID.",
        "name": "use-most-recent",
        "summary": "Use the job ID of the most recently validated deployment.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "id": "project:deploy:pipeline:quick",
    "pluginAlias": "@salesforce/cli",
    "pluginName": "@salesforce/plugin-devops-center",
    "pluginType": "jit",
    "state": "beta",
    "strict": true,
    "summary": "Quickly deploy a validated deployment to an org.",
    "enableJsonFlag": true,
    "SF_ENV": "SF_ENV",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "deploy",
      "pipeline",
      "quick.js"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "description": "The first time you run any \"project deploy pipeline\" command, be sure to authorize the org in which DevOps Center is installed. The easiest way to authorize an org is with the \"org login web\" command.\n\nRun this command by either indicating a job ID or specifying the —use-most-recent flag to use the job ID of the most recent deploy operation.",
    "examples": [
      "Check the status using a job ID:\n<%= config.bin %> <%= command.id %> --devops-center-username MyStagingSandbox --job-id 0Af0x000017yLUFCA2",
      "Check the status of the most recent deploy operation:\n<%= config.bin %> <%= command.id %> --devops-center-username MyStagingSandbox --use-most-recent"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "devops-center-username": {
        "char": "c",
        "name": "devops-center-username",
        "required": true,
        "summary": "Username or alias of the DevOps Center org.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "job-id": {
        "char": "i",
        "description": "The job ID is valid for 10 days from when you started the deploy operation.",
        "name": "job-id",
        "summary": "Job ID of the pipeline deployment to check the status of.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-most-recent": {
        "char": "r",
        "description": "For performance reasons, this flag uses job IDs for deploy operations that started in the past 3 days or fewer. If your most recent operation was longer than 3 days ago, this flag won't find the job ID.",
        "name": "use-most-recent",
        "summary": "Use the job ID of the most recent deploy operation.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "id": "project:deploy:pipeline:report",
    "pluginAlias": "@salesforce/cli",
    "pluginName": "@salesforce/plugin-devops-center",
    "pluginType": "jit",
    "state": "beta",
    "strict": true,
    "summary": "Check the status of a pipeline deploy operation.",
    "enableJsonFlag": true,
    "SF_ENV": "SF_ENV",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "deploy",
      "pipeline",
      "report.js"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "description": "The first time you run any \"project deploy pipeline\" command, be sure to authorize the org in which DevOps Center is installed. The easiest way to authorize an org is with the \"org login web\" command. \n\nUse this command to resume watching a pipeline deploy operation if the original command times out or you specified the --async flag.\n\nRun this command by either indicating a job ID or specifying the --use-most-recent flag to use the job ID of the most recent deploy operation.",
    "examples": [
      "Resume watching a deploy operation using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2",
      "Resume watching the most recent deploy operation:\n<%= config.bin %> <%= command.id %> --use-most-recent"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "devops-center-username": {
        "char": "c",
        "name": "devops-center-username",
        "required": true,
        "summary": "Username or alias of the DevOps Center org.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "job-id": {
        "char": "i",
        "description": "These commands return a job ID if they time out or you specified the --async flag:\n\n- sf project deploy pipeline start\n- sf project deploy pipeline validate\n- sf project deploy pipeline quick\n\nThe job ID is valid for 10 days from when you started the deploy operation.",
        "name": "job-id",
        "summary": "Job ID of the pipeline deploy operation you want to resume.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-most-recent": {
        "char": "r",
        "description": "For performance reasons, this flag uses job IDs for operations that started in the past 3 days or fewer. If your most recent operation was longer than 3 days ago, this flag won't find a job ID.",
        "name": "use-most-recent",
        "summary": "Use the job ID of the most recent deploy operation.",
        "allowNo": false,
        "type": "boolean"
      },
      "concise": {
        "exclusive": [
          "verbose"
        ],
        "name": "concise",
        "summary": "Show concise output of the command result.",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Show verbose output of the command result.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To check the status of the operation, run \"sf project deploy pipeline report\".",
        "exclusive": [
          "async"
        ],
        "name": "wait",
        "summary": "Number of minutes to wait for command to complete and display results.",
        "default": "33 minutes",
        "hasDynamicHelp": true,
        "helpValue": "<minutes>",
        "multiple": false,
        "type": "option"
      }
    },
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "id": "project:deploy:pipeline:resume",
    "pluginAlias": "@salesforce/cli",
    "pluginName": "@salesforce/plugin-devops-center",
    "pluginType": "jit",
    "state": "beta",
    "strict": true,
    "summary": "Resume watching a pipeline deploy operation.",
    "enableJsonFlag": true,
    "SF_ENV": "SF_ENV",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "deploy",
      "pipeline",
      "resume.js"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "description": "The first time you run any \"project deploy pipeline\" command, be sure to authorize the org in which DevOps Center is installed. The easiest way to authorize an org is with the \"org login web\" command.\n\nBefore you run this command, changes in the pipeline stage's branch must be merged in the source control repository.",
    "examples": [
      "Deploy changes in the Staging branch to the Staging environment (sandbox), if the previous stage is the bundling stage:\n<%= config.bin %> <%= command.id %> --devops-center-project-name “Recruiting App” --branch-name staging --devops-center-username MyStagingSandbox --bundle-version-name 1.0",
      "Deploy all changes in the main branch to the release environment:\n<%= config.bin %> <%= command.id %> --devops-center-project-name “Recruiting App” --branch-name main --devops-center-username MyReleaseOrg --deploy-all"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "branch-name": {
        "char": "b",
        "name": "branch-name",
        "required": true,
        "summary": "Name of the branch in the source control repository that corresponds to the pipeline stage that you want to deploy the changes to.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "bundle-version-name": {
        "char": "v",
        "description": "You must indicate the bundle version if deploying to the environment that corresponds to the first stage after the bundling stage.",
        "name": "bundle-version-name",
        "summary": "Version name of the bundle.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "deploy-all": {
        "char": "a",
        "description": "If you don’t specify this flag, only changes in the stage’s branch are deployed.",
        "name": "deploy-all",
        "summary": "Deploy all metadata in the branch to the stage's org.",
        "allowNo": false,
        "type": "boolean"
      },
      "devops-center-project-name": {
        "char": "p",
        "name": "devops-center-project-name",
        "required": true,
        "summary": "Name of the DevOps Center project.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "devops-center-username": {
        "char": "c",
        "name": "devops-center-username",
        "required": true,
        "summary": "Username or alias of the DevOps Center org.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "tests": {
        "char": "t",
        "description": "Separate multiple test names with commas. Enclose the entire flag value in double quotes if a test name contains spaces.",
        "name": "tests",
        "summary": "Apex tests to run when --test-level is RunSpecifiedTests.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "test-level": {
        "char": "l",
        "description": "Valid values are:\n\n- NoTestRun — No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\n\n- RunSpecifiedTests — Runs only the tests that you specify with the --tests flag. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n\n- RunLocalTests — All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n\n- RunAllTestsInOrg — All tests in your org are run, including tests of managed packages.\n\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see the section \"Running Tests in a Deployment\" in the \"Metadata API Developer Guide\". (https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deploy_running_tests.htm)",
        "name": "test-level",
        "summary": "Deployment Apex testing level.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "NoTestRun",
          "RunSpecifiedTests",
          "RunLocalTests",
          "RunAllTestsInOrg"
        ],
        "type": "option"
      },
      "async": {
        "description": "The command immediately returns the job ID and control of the terminal to you. This way, you can continue to use the CLI. To resume the deployment, run \"sf project deploy pipeline resume\". To check the status of the deployment, run \"sf project deploy pipeline report\".",
        "name": "async",
        "summary": "Run the command asynchronously.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To check the status of the operation, run \"sf project deploy pipeline report\".",
        "exclusive": [
          "async"
        ],
        "name": "wait",
        "summary": "Number of minutes to wait for command to complete and display results.",
        "default": "33 minutes",
        "hasDynamicHelp": true,
        "helpValue": "<minutes>",
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Show verbose output of the command result.",
        "allowNo": false,
        "type": "boolean"
      },
      "concise": {
        "exclusive": [
          "verbose"
        ],
        "name": "concise",
        "summary": "Show concise output of the command result.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "id": "project:deploy:pipeline:start",
    "pluginAlias": "@salesforce/cli",
    "pluginName": "@salesforce/plugin-devops-center",
    "pluginType": "jit",
    "state": "beta",
    "strict": true,
    "summary": "Deploy changes from a branch to the pipeline stage’s org.",
    "enableJsonFlag": true,
    "SF_ENV": "SF_ENV",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "deploy",
      "pipeline",
      "start.js"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "description": "The first time you run any \"project deploy pipeline\" command, be sure to authorize the org in which DevOps Center is installed. The easiest way to authorize an org is with the \"org login web\" command.\n\nA validation runs Apex tests to verify whether a deployment will succeed without actually deploying the metadata to your environment, so you can then quickly deploy the changes later without re-running the tests.",
    "examples": [
      "Perform a validate-only deployment from the Staging branch to the Staging environment (sandbox):\n<%= config.bin %> <%= command.id %> --devops-center-project-name “Recruiting App” --branch-name staging --devops-center-username MyStagingSandbox",
      "Perform a validate-only deployment of all changes from the main branch to the release environment:\n<%= config.bin %> <%= command.id %> --devops-center-project-name “Recruiting App” --branch-name main --devops-center-username MyReleaseOrg --deploy-all"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "branch-name": {
        "char": "b",
        "name": "branch-name",
        "required": true,
        "summary": "Name of the branch in the source control repository that corresponds to the pipeline stage that you want to deploy the changes to.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "bundle-version-name": {
        "char": "v",
        "description": "You must indicate the bundle version if deploying to the environment that corresponds to the first stage after the bundling stage.",
        "name": "bundle-version-name",
        "summary": "Version name of the bundle.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "deploy-all": {
        "char": "a",
        "description": "If you don’t specify this flag, only changes in the stage’s branch are deployed.",
        "name": "deploy-all",
        "summary": "Deploy all metadata in the branch to the stage's org.",
        "allowNo": false,
        "type": "boolean"
      },
      "devops-center-project-name": {
        "char": "p",
        "name": "devops-center-project-name",
        "required": true,
        "summary": "Name of the DevOps Center project.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "devops-center-username": {
        "char": "c",
        "name": "devops-center-username",
        "required": true,
        "summary": "Username or alias of the DevOps Center org.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "tests": {
        "char": "t",
        "description": "Separate multiple test names with commas. Enclose the entire flag value in double quotes if a test name contains spaces.",
        "name": "tests",
        "summary": "Apex tests to run when --test-level is RunSpecifiedTests.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "test-level": {
        "char": "l",
        "description": "Valid values are:\n\n- NoTestRun — No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\n\n- RunSpecifiedTests — Runs only the tests that you specify with the --tests flag. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n\n- RunLocalTests — All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n\n- RunAllTestsInOrg — All tests in your org are run, including tests of managed packages.\n\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see the section \"Running Tests in a Deployment\" in the \"Metadata API Developer Guide\". (https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deploy_running_tests.htm)",
        "name": "test-level",
        "summary": "Deployment Apex testing level.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "NoTestRun",
          "RunSpecifiedTests",
          "RunLocalTests",
          "RunAllTestsInOrg"
        ],
        "type": "option"
      },
      "async": {
        "description": "The command immediately returns the job ID and control of the terminal to you. This way, you can continue to use the CLI. To resume the deployment, run \"sf project deploy pipeline resume\". To check the status of the deployment, run \"sf project deploy pipeline report\".",
        "name": "async",
        "summary": "Run the command asynchronously.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To check the status of the operation, run \"sf project deploy pipeline report\".",
        "exclusive": [
          "async"
        ],
        "name": "wait",
        "summary": "Number of minutes to wait for command to complete and display results.",
        "default": "33 minutes",
        "hasDynamicHelp": true,
        "helpValue": "<minutes>",
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Show verbose output of the command result.",
        "allowNo": false,
        "type": "boolean"
      },
      "concise": {
        "exclusive": [
          "verbose"
        ],
        "name": "concise",
        "summary": "Show concise output of the command result.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "id": "project:deploy:pipeline:validate",
    "pluginAlias": "@salesforce/cli",
    "pluginName": "@salesforce/plugin-devops-center",
    "pluginType": "jit",
    "state": "beta",
    "strict": true,
    "summary": "Perform a validate-only deployment from a branch to the pipeline stage’s org.",
    "enableJsonFlag": true,
    "SF_ENV": "SF_ENV",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "deploy",
      "pipeline",
      "validate.js"
    ]
  },
  {
    "aliases": [
      "deploy:metadata:preview"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "description": "You must run this command from within a project.\n\nThe command outputs a table that describes what will happen if you run the \"sf project deploy start\" command. The table lists the metadata components that will be deployed and deleted. The table also lists the current conflicts between files in your local project and components in the org. Finally, the table lists the files that won't be deployed because they're included in your .forceignore file.\n\nIf your org allows source tracking, then this command displays potential conflicts between the org and your local project. Some orgs, such as production org, never allow source tracking. Source tracking is enabled by default on scratch and sandbox orgs; you can disable source tracking when you create the orgs by specifying the --no-track-source flag on the \"sf org create scratch|sandbox\" commands.\n\nTo preview the deployment of multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --source-dir.",
    "summary": "Preview a deployment to see what will deploy to the org, the potential conflicts, and the ignored files.",
    "examples": [
      "NOTE: The commands to preview a deployment and actually deploy it use similar flags. We provide a few preview examples here, but see the help for \"<%= config.bin %> project deploy start\" for more examples that you can adapt for previewing.",
      "Preview the deployment of source files in a directory, such as force-app, to your default org:\n<%= config.bin %> <%= command.id %>  --source-dir force-app",
      "Preview the deployment of all Apex classes to an org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --metadata ApexClass --target-org my-scratch",
      "Preview deployment of a specific Apex class:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass",
      "Preview deployment of all components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml"
    ],
    "requiresProject": true,
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "ignore-conflicts": {
        "char": "c",
        "description": "This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.",
        "name": "ignore-conflicts",
        "summary": "Don't display conflicts in preview of the deployment.",
        "allowNo": false,
        "type": "boolean"
      },
      "manifest": {
        "char": "x",
        "description": "All child components are included. If you specify this flag, don’t specify --metadata or --source-dir.",
        "exclusive": [
          "source-dir",
          "metadata"
        ],
        "name": "manifest",
        "summary": "Full file path for manifest (package.xml) of components to preview.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "metadata": {
        "char": "m",
        "exclusive": [
          "manifest",
          "source-dir"
        ],
        "name": "metadata",
        "summary": "Metadata component names to preview.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "source-dir": {
        "char": "d",
        "description": "The supplied path can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its subdirectories).\n\nIf you specify this flag, don’t specify --metadata or --manifest.",
        "exclusive": [
          "manifest",
          "metadata"
        ],
        "name": "source-dir",
        "summary": "Path to the local source files to preview.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "concise": {
        "name": "concise",
        "summary": "Show only the changes that will be deployed; omits files that are forceignored.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "project:deploy:preview",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "deploy",
      "preview.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "deploy:metadata:preview",
      "metadata:deploy:preview",
      "metadata:preview:deploy",
      "deploy:preview:metadata",
      "preview:deploy:metadata",
      "preview:metadata:deploy"
    ],
    "permutations": [
      "project:deploy:preview",
      "deploy:project:preview",
      "deploy:preview:project",
      "project:preview:deploy",
      "preview:project:deploy",
      "preview:deploy:project"
    ]
  },
  {
    "aliases": [
      "deploy:metadata:quick"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "description": "Before you run this command, first create a validated deployment with the \"sf project deploy validate\" command, which returns a job ID. Validated deployments haven't been deployed to the org yet; you deploy them with this command. Either pass the job ID to this command or use the --use-most-recent flag to use the job ID of the most recently validated deployment. For the quick deploy to succeed, the associated validated deployment must also have succeeded.\n\nExecuting this quick deploy command takes less time than a standard deploy because it skips running Apex tests. These tests were previously run as part of the validation. Validating first and then running a quick deploy is useful if the deployment to your production org take several hours and you don’t want to risk a failed deploy.\n\nThis command doesn't support source-tracking. The source you deploy overwrites the corresponding metadata in your org. This command doesn’t attempt to merge your source with the versions in your org.\n\nNote: Don't use this command on sandboxes; the command is intended to be used on production orgs. By default, sandboxes don't run tests during a deploy. Use \"sf project deploy start\" instead.",
    "summary": "Quickly deploy a validated deployment to an org.",
    "examples": [
      "Run a quick deploy to your default org using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2",
      "Asynchronously run a quick deploy of the most recently validated deployment to an org with alias \"my-prod-org\":\n<%= config.bin %> <%= command.id %> --async --use-most-recent --target-org my-prod-org"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "async": {
        "description": "The command immediately returns the control of the terminal to you. This way, you can continue to use the CLI. To resume watching the deploy, run \"<%= config.bin %> project deploy resume\". To check the status of the deploy, run \"<%= config.bin %> project deploy report\".",
        "exclusive": [
          "wait"
        ],
        "name": "async",
        "summary": "Run the command asynchronously.",
        "allowNo": false,
        "type": "boolean"
      },
      "concise": {
        "exclusive": [
          "verbose"
        ],
        "name": "concise",
        "summary": "Show concise output of the deploy result.",
        "allowNo": false,
        "type": "boolean"
      },
      "job-id": {
        "char": "i",
        "description": "The job ID is valid for 10 days from when you started the validation.",
        "name": "job-id",
        "summary": "Job ID of the deployment you want to quick deploy.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "summary": "Username or alias of the target org.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "use-most-recent": {
        "char": "r",
        "description": "For performance reasons, this flag uses only job IDs that were validated in the past 3 days or less. If your most recent deployment validation was more than 3 days ago, this flag won't find a job ID.",
        "name": "use-most-recent",
        "summary": "Use the job ID of the most recently validated deployment.",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "exclusive": [
          "concise"
        ],
        "name": "verbose",
        "summary": "Show verbose output of the deploy result.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you. To resume watching the deploy, run \"<%= config.bin %> project deploy resume\". To check the status of the deploy, run \"<%= config.bin %> project deploy report\".",
        "exclusive": [
          "async"
        ],
        "name": "wait",
        "summary": "Number of minutes to wait for the command to complete and display results.",
        "default": "33 minutes",
        "hasDynamicHelp": true,
        "helpValue": "<minutes>",
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "char": "a",
        "description": "Use this flag to override the default API version with the API version of your package.xml file. The default API version is the latest version supported by the CLI.",
        "name": "api-version",
        "summary": "Target API version for the deploy.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "errorCodes": {
      "header": "ERROR CODES",
      "body": [
        {
          "name": "Succeeded (0)",
          "description": "The deploy succeeded."
        },
        {
          "name": "Canceled (1)",
          "description": "The deploy was canceled."
        },
        {
          "name": "Failed (1)",
          "description": "The deploy failed."
        },
        {
          "name": "SucceededPartial (68)",
          "description": "The deploy partially succeeded."
        },
        {
          "name": "InProgress (69)",
          "description": "The deploy is in progress."
        },
        {
          "name": "Pending (69)",
          "description": "The deploy is pending."
        },
        {
          "name": "Canceling (69)",
          "description": "The deploy is being canceled."
        }
      ]
    },
    "id": "project:deploy:quick",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "deploy",
      "quick.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "deploy:metadata:quick",
      "metadata:deploy:quick",
      "metadata:quick:deploy",
      "deploy:quick:metadata",
      "quick:deploy:metadata",
      "quick:metadata:deploy"
    ],
    "permutations": [
      "project:deploy:quick",
      "deploy:project:quick",
      "deploy:quick:project",
      "project:quick:deploy",
      "quick:project:deploy",
      "quick:deploy:project"
    ]
  },
  {
    "aliases": [
      "deploy:metadata:report"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "description": "Deploy operations include standard deploys, quick deploys, deploy validations, and deploy cancellations.\n\nRun this command by either passing it a job ID or specifying the --use-most-recent flag to use the job ID of the most recent deploy operation. If you specify the --wait flag, the command polls for the status every second until the timeout of --wait minutes. If you don't specify the --wait flag, the command simply checks and displays the status of the deploy; the command doesn't poll for the status.\n\nYou typically don't specify the --target-org flag because the cached job already references the org to which you deployed. But if you run this command on a computer different than the one from which you deployed, then you must specify the --target-org and it must point to the same org.\n\nThis command doesn't update source tracking information.",
    "summary": "Check or poll for the status of a deploy operation.",
    "examples": [
      "Check the status using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2",
      "Check the status of the most recent deploy operation:\n<%= config.bin %> <%= command.id %> --use-most-recent",
      "Poll for the status using a job ID and target org:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2 --target-org me@my.org --wait 30"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "summary": "Username or alias of the target org.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "job-id": {
        "char": "i",
        "description": "These commands return a job ID if they time out or you specified the --async flag:\n\n- <%= config.bin %> project deploy start\n- <%= config.bin %> project deploy validate\n- <%= config.bin %> project deploy quick\n- <%= config.bin %> project deploy cancel\n\nThe job ID is valid for 10 days from when you started the deploy operation.",
        "name": "job-id",
        "summary": "Job ID of the deploy operation you want to check the status of.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-most-recent": {
        "char": "r",
        "description": "For performance reasons, this flag uses job IDs for deploy operations that started only in the past 3 days or less. If your most recent operation was more than 3 days ago, this flag won't find a job ID.",
        "name": "use-most-recent",
        "summary": "Use the job ID of the most recent deploy operation.",
        "allowNo": false,
        "type": "boolean"
      },
      "coverage-formatters": {
        "description": "For multiple formatters, repeat the flag for each formatter.\n--coverage-formatters lcov --coverage-formatters clover",
        "helpGroup": "Test",
        "name": "coverage-formatters",
        "summary": "Format of the code coverage results.",
        "hasDynamicHelp": false,
        "multiple": true,
        "options": [
          "clover",
          "cobertura",
          "html-spa",
          "html",
          "json",
          "json-summary",
          "lcovonly",
          "none",
          "teamcity",
          "text",
          "text-summary"
        ],
        "type": "option"
      },
      "junit": {
        "helpGroup": "Test",
        "name": "junit",
        "summary": "Output JUnit test results.",
        "allowNo": false,
        "type": "boolean"
      },
      "results-dir": {
        "helpGroup": "Test",
        "name": "results-dir",
        "relationships": [
          {
            "type": "some",
            "flags": [
              "coverage-formatters",
              "junit"
            ]
          }
        ],
        "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To resume the deployment, run \"<%= config.bin %> project deploy resume\". To check the status of the deployment, run \"<%= config.bin %> project deploy report\".",
        "name": "wait",
        "summary": "Number of minutes to wait for command to complete and display results.",
        "hasDynamicHelp": true,
        "helpValue": "<minutes>",
        "multiple": false,
        "type": "option"
      }
    },
    "id": "project:deploy:report",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "deploy",
      "report.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "deploy:metadata:report",
      "metadata:deploy:report",
      "metadata:report:deploy",
      "deploy:report:metadata",
      "report:deploy:metadata",
      "report:metadata:deploy"
    ],
    "permutations": [
      "project:deploy:report",
      "deploy:project:report",
      "deploy:report:project",
      "project:report:deploy",
      "report:project:deploy",
      "report:deploy:project"
    ]
  },
  {
    "aliases": [
      "deploy:metadata:resume"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "description": "Use this command to resume watching a deploy operation if the original command times out or you specified the --async flag. Deploy operations include standard deploys, quick deploys, deploy validations, and deploy cancellations. This command doesn't resume the original operation itself, because the operation always continues after you've started it, regardless of whether you're watching it or not. When the deploy completes, source tracking information is updated as needed.\n\nRun this command by either passing it a job ID or specifying the --use-most-recent flag to use the job ID of the most recent deploy operation.",
    "summary": "Resume watching a deploy operation and update source tracking when the deploy completes.",
    "examples": [
      "Resume watching a deploy operation using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2",
      "Resume watching the most recent deploy operation:\n<%= config.bin %> <%= command.id %> --use-most-recent"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "concise": {
        "exclusive": [
          "verbose"
        ],
        "name": "concise",
        "summary": "Show concise output of the deploy operation result.",
        "allowNo": false,
        "type": "boolean"
      },
      "job-id": {
        "char": "i",
        "description": "These commands return a job ID if they time out or you specified the --async flag:\n\n- <%= config.bin %> project deploy start\n- <%= config.bin %> project deploy validate\n- <%= config.bin %> project deploy quick\n- <%= config.bin %> project deploy cancel\n\nThe job ID is valid for 10 days from when you started the deploy operation.",
        "name": "job-id",
        "summary": "Job ID of the deploy operation you want to resume.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-most-recent": {
        "char": "r",
        "description": "For performance reasons, this flag uses job IDs for deploy operations that started only in the past 3 days or less. If your most recent operation was more than 3 days ago, this flag won't find a job ID.",
        "name": "use-most-recent",
        "summary": "Use the job ID of the most recent deploy operation.",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "exclusive": [
          "concise"
        ],
        "name": "verbose",
        "summary": "Show verbose output of the deploy operation result.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you. To resume watching the deploy operation, run this command again. To check the status of the deploy operation, run \"<%= config.bin %> project deploy report\".",
        "name": "wait",
        "summary": "Number of minutes to wait for the command to complete and display results.",
        "hasDynamicHelp": true,
        "helpValue": "<minutes>",
        "multiple": false,
        "type": "option"
      },
      "coverage-formatters": {
        "description": "For multiple formatters, repeat the flag for each formatter.\n--coverage-formatters lcov --coverage-formatters clover",
        "helpGroup": "Test",
        "name": "coverage-formatters",
        "summary": "Format of the code coverage results.",
        "hasDynamicHelp": false,
        "multiple": true,
        "options": [
          "clover",
          "cobertura",
          "html-spa",
          "html",
          "json",
          "json-summary",
          "lcovonly",
          "none",
          "teamcity",
          "text",
          "text-summary"
        ],
        "type": "option"
      },
      "junit": {
        "helpGroup": "Test",
        "name": "junit",
        "summary": "Output JUnit test results.",
        "allowNo": false,
        "type": "boolean"
      },
      "results-dir": {
        "helpGroup": "Test",
        "name": "results-dir",
        "relationships": [
          {
            "type": "some",
            "flags": [
              "coverage-formatters",
              "junit"
            ]
          }
        ],
        "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "envVariablesSection": {
      "header": "ENVIRONMENT VARIABLES",
      "body": [
        {
          "name": "SF_USE_PROGRESS_BAR",
          "description": "Set to false to disable the progress bar when running the metadata deploy command."
        }
      ]
    },
    "errorCodes": {
      "header": "ERROR CODES",
      "body": [
        {
          "name": "Succeeded (0)",
          "description": "The deploy succeeded."
        },
        {
          "name": "Canceled (1)",
          "description": "The deploy was canceled."
        },
        {
          "name": "Failed (1)",
          "description": "The deploy failed."
        },
        {
          "name": "SucceededPartial (68)",
          "description": "The deploy partially succeeded."
        },
        {
          "name": "InProgress (69)",
          "description": "The deploy is in progress."
        },
        {
          "name": "Pending (69)",
          "description": "The deploy is pending."
        },
        {
          "name": "Canceling (69)",
          "description": "The deploy is being canceled."
        }
      ]
    },
    "id": "project:deploy:resume",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "deploy",
      "resume.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "deploy:metadata:resume",
      "metadata:deploy:resume",
      "metadata:resume:deploy",
      "deploy:resume:metadata",
      "resume:deploy:metadata",
      "resume:metadata:deploy"
    ],
    "permutations": [
      "project:deploy:resume",
      "deploy:project:resume",
      "deploy:resume:project",
      "project:resume:deploy",
      "resume:project:deploy",
      "resume:deploy:project"
    ]
  },
  {
    "aliases": [
      "deploy:metadata"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "description": "You must run this command from within a project.\n\nMetadata components are deployed in source format by default. Deploy them in metadata format by specifying the --metadata-dir flag, which specifies the root directory or ZIP file that contains the metadata formatted files you want to deploy.\n\nIf your org allows source tracking, then this command tracks the changes in your source. Some orgs, such as production orgs, never allow source tracking. Source tracking is enabled by default on scratch and sandbox orgs; you can disable source tracking when you create the orgs by specifying the --no-track-source flag on the \"sf org create scratch|sandbox\" commands.\n\nTo deploy multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --source-dir.",
    "summary": "Deploy metadata to an org from your local project.",
    "examples": [
      "Deploy local changes not in the org; uses your default org:\n<%= config.bin %> <%= command.id %>",
      "Deploy all source files in the \"force-app\" directory to an org with alias \"my-scratch\"; show only concise output, in other words don't print a list of all the source that was deployed:\n<%= config.bin %> <%= command.id %>  --source-dir force-app --target-org my-scratch --concise",
      "Deploy all the Apex classes and custom objects that are in the \"force-app\" directory. The list views, layouts, etc, that are associated with the custom objects are also deployed. Both examples are equivalent:\n<%= config.bin %> <%= command.id %> --source-dir force-app/main/default/classes force-app/main/default/objects\n<%= config.bin %> <%= command.id %> --source-dir force-app/main/default/classes --source-dir force-app/main/default/objects",
      "Deploy all Apex classes that are in all package directories defined in the \"sfdx-project.json\" file:\n<%= config.bin %> <%= command.id %> --metadata ApexClass",
      "Deploy a specific Apex class; ignore any conflicts between the local project and org (be careful with this flag, because it will overwrite the Apex class in the org if there are conflicts!):\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass --ignore-conflicts",
      "Deploy specific Apex classes that match a pattern; in this example, deploy Apex classes whose names contain the string \"MyApex\". Also ignore any deployment warnings (again, be careful with this flag! You typically want to see the warnings):\n<%= config.bin %> <%= command.id %> --metadata 'ApexClass:MyApex*' --ignore-warnings",
      "Deploy a custom object called ExcitingObject that's in the SBQQ namespace:\nsf <%= command.id %> --metadata CustomObject:SBQQ__ExcitingObject",
      "Deploy all custom objects in the SBQQ namespace by using a wildcard and quotes:\nsf <%= command.id %> --metadata 'CustomObject:SBQQ__*'",
      "Deploy all custom objects and Apex classes found in all defined package directories (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --metadata CustomObject ApexClass\n<%= config.bin %> <%= command.id %> --metadata CustomObject --metadata ApexClass",
      "Deploy all Apex classes and a profile that has a space in its name:\n<%= config.bin %> <%= command.id %> --metadata ApexClass --metadata \"Profile:My Profile\"",
      "Deploy all components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml",
      "Run the tests that aren’t in any managed packages as part of a deployment:\n<%= config.bin %> <%= command.id %> --metadata ApexClass --test-level RunLocalTests",
      "Deploy all metadata formatted files in the \"MDAPI\" directory:\n<%= config.bin %> <%= command.id %> --metadata-dir MDAPI",
      "Deploy all metadata formatted files in the \"MDAPI\" directory; items listed in the MDAPI/destructiveChangesPre.xml and MDAPI/destructiveChangesPost.xml manifests are immediately eligible for deletion rather than stored in the Recycle Bin:\n<%= config.bin %> <%= command.id %> --metadata-dir MDAPI --purge-on-delete"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "char": "a",
        "description": "Use this flag to override the default API version with the API version of your package.xml file. The default API version is the latest version supported by the CLI.",
        "name": "api-version",
        "summary": "Target API version for the deploy.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "async": {
        "description": "The command immediately returns the job ID and control of the terminal to you. This way, you can continue to use the CLI. To resume the deployment, run \"<%= config.bin %> project deploy resume\". To check the status of the deployment, run \"<%= config.bin %> project deploy report\".",
        "exclusive": [
          "wait"
        ],
        "name": "async",
        "summary": "Run the command asynchronously.",
        "allowNo": false,
        "type": "boolean"
      },
      "concise": {
        "exclusive": [
          "verbose"
        ],
        "name": "concise",
        "summary": "Show concise output of the deploy result.",
        "allowNo": false,
        "type": "boolean"
      },
      "dry-run": {
        "name": "dry-run",
        "summary": "Validate deploy and run Apex tests but don’t save to the org.",
        "allowNo": false,
        "type": "boolean"
      },
      "ignore-conflicts": {
        "char": "c",
        "description": "This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.",
        "name": "ignore-conflicts",
        "summary": "Ignore conflicts and deploy local files, even if they overwrite changes in the org.",
        "allowNo": false,
        "type": "boolean"
      },
      "ignore-errors": {
        "char": "r",
        "description": "Never use this flag when deploying to a production org. If you specify it, components without errors are deployed and components with errors are skipped, and could result in an inconsistent production org.",
        "name": "ignore-errors",
        "summary": "Ignore any errors and don’t roll back deployment.",
        "allowNo": false,
        "type": "boolean"
      },
      "ignore-warnings": {
        "char": "g",
        "description": "If you specify this flag, and a warning occurs, the success status of the deployment is set to true. If you don't specify this flag, and a warning occurs, then the success status is set to false, and the warning is treated like an error.\n\nThis flag is useful in a CI environment and your deployment includes destructive changes; if you try to delete a component that doesn't exist in the org, you get a warning. In this case, to ensure that the command returns a success value of true, specify this flag.",
        "name": "ignore-warnings",
        "summary": "Ignore warnings and allow a deployment to complete successfully.",
        "allowNo": false,
        "type": "boolean"
      },
      "manifest": {
        "char": "x",
        "description": "All child components are included. If you specify this flag, don’t specify --metadata or --source-dir.",
        "exclusive": [
          "source-dir",
          "metadata",
          "metadata-dir"
        ],
        "helpGroup": "Source Format",
        "name": "manifest",
        "summary": "Full file path for manifest (package.xml) of components to deploy.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "metadata": {
        "char": "m",
        "exclusive": [
          "manifest",
          "source-dir",
          "metadata-dir"
        ],
        "helpGroup": "Source Format",
        "name": "metadata",
        "summary": "Metadata component names to deploy. Wildcards (`*` ) supported as long as you use quotes, such as `ApexClass:MyClass*`.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "metadata-dir": {
        "exclusive": [
          "manifest",
          "source-dir",
          "metadata"
        ],
        "helpGroup": "Metadata API Format",
        "name": "metadata-dir",
        "summary": "Root of directory or zip file of metadata formatted files to deploy.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "single-package": {
        "dependsOn": [
          "metadata-dir"
        ],
        "helpGroup": "Metadata API Format",
        "name": "single-package",
        "summary": "Indicates that the metadata zip file points to a directory structure for a single package.",
        "allowNo": false,
        "type": "boolean"
      },
      "source-dir": {
        "char": "d",
        "description": "The supplied path can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its subdirectories).\n\nIf you specify this flag, don’t specify --metadata or --manifest.",
        "exclusive": [
          "manifest",
          "metadata",
          "metadata-dir"
        ],
        "helpGroup": "Source Format",
        "name": "source-dir",
        "summary": "Path to the local source files to deploy.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "tests": {
        "char": "t",
        "description": "If a test name contains a space, enclose it in double quotes.\nFor multiple test names, use one of the following formats:\n\n- Repeat the flag for multiple test names: --tests Test1 --tests Test2 --tests \"Test With Space\"\n- Separate the test names with spaces: --tests Test1 Test2 \"Test With Space\"",
        "helpGroup": "Test",
        "name": "tests",
        "summary": "Apex tests to run when --test-level is RunSpecifiedTests.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "test-level": {
        "char": "l",
        "description": "Valid values are:\n\n- NoTestRun — No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\n\n- RunSpecifiedTests — Runs only the tests that you specify with the --tests flag. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n\n- RunLocalTests — All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n\n- RunAllTestsInOrg — All tests in your org are run, including tests of managed packages.\n\n  If you don’t specify a test level, the default behavior depends on the contents of your deployment package and target org. For more information, see [Running Tests in a Deployment](https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deploy_running_tests.htm) in the \"Metadata API Developer Guide\".",
        "helpGroup": "Test",
        "name": "test-level",
        "summary": "Deployment Apex testing level.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "NoTestRun",
          "RunSpecifiedTests",
          "RunLocalTests",
          "RunAllTestsInOrg"
        ],
        "type": "option"
      },
      "verbose": {
        "exclusive": [
          "concise"
        ],
        "name": "verbose",
        "summary": "Show verbose output of the deploy result.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To resume the deployment, run \"<%= config.bin %> project deploy resume\". To check the status of the deployment, run \"<%= config.bin %> project deploy report\".",
        "exclusive": [
          "async"
        ],
        "name": "wait",
        "summary": "Number of minutes to wait for command to complete and display results.",
        "hasDynamicHelp": true,
        "helpValue": "<minutes>",
        "multiple": false,
        "type": "option"
      },
      "purge-on-delete": {
        "helpGroup": "Delete",
        "name": "purge-on-delete",
        "relationships": [
          {
            "type": "some",
            "flags": [
              "pre-destructive-changes",
              "manifest",
              "metadata-dir",
              "post-destructive-changes"
            ]
          }
        ],
        "summary": "Specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin.",
        "allowNo": false,
        "type": "boolean"
      },
      "pre-destructive-changes": {
        "dependsOn": [
          "manifest"
        ],
        "helpGroup": "Delete",
        "name": "pre-destructive-changes",
        "summary": "File path for a manifest (destructiveChangesPre.xml) of components to delete before the deploy.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "post-destructive-changes": {
        "dependsOn": [
          "manifest"
        ],
        "helpGroup": "Delete",
        "name": "post-destructive-changes",
        "summary": "File path for a manifest (destructiveChangesPost.xml) of components to delete after the deploy.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "coverage-formatters": {
        "description": "For multiple formatters, repeat the flag for each formatter.\n--coverage-formatters lcov --coverage-formatters clover",
        "helpGroup": "Test",
        "name": "coverage-formatters",
        "summary": "Format of the code coverage results.",
        "hasDynamicHelp": false,
        "multiple": true,
        "options": [
          "clover",
          "cobertura",
          "html-spa",
          "html",
          "json",
          "json-summary",
          "lcovonly",
          "none",
          "teamcity",
          "text",
          "text-summary"
        ],
        "type": "option"
      },
      "junit": {
        "helpGroup": "Test",
        "name": "junit",
        "summary": "Output JUnit test results.",
        "allowNo": false,
        "type": "boolean"
      },
      "results-dir": {
        "helpGroup": "Test",
        "name": "results-dir",
        "relationships": [
          {
            "type": "some",
            "flags": [
              "coverage-formatters",
              "junit"
            ]
          }
        ],
        "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "configurationVariablesSection": {
      "header": "CONFIGURATION VARIABLES",
      "body": [
        {
          "name": "target-org",
          "description": "Username or alias of the org that all commands run against by default. (sf only)"
        },
        {
          "name": "org-api-version",
          "description": "API version of your project. Default: API version of your Dev Hub org."
        }
      ]
    },
    "envVariablesSection": {
      "header": "ENVIRONMENT VARIABLES",
      "body": [
        {
          "name": "SF_TARGET_ORG",
          "description": "Username or alias of your default org. Overrides the target-org configuration variable."
        },
        {
          "name": "SF_USE_PROGRESS_BAR",
          "description": "Set to false to disable the progress bar when running the metadata deploy command."
        }
      ]
    },
    "errorCodes": {
      "header": "ERROR CODES",
      "body": [
        {
          "name": "Succeeded (0)",
          "description": "The deploy succeeded."
        },
        {
          "name": "Canceled (1)",
          "description": "The deploy was canceled."
        },
        {
          "name": "Failed (1)",
          "description": "The deploy failed."
        },
        {
          "name": "SucceededPartial (68)",
          "description": "The deploy partially succeeded."
        },
        {
          "name": "InProgress (69)",
          "description": "The deploy is in progress."
        },
        {
          "name": "Pending (69)",
          "description": "The deploy is pending."
        },
        {
          "name": "Canceling (69)",
          "description": "The deploy is being canceled."
        }
      ]
    },
    "id": "project:deploy:start",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "deploy",
      "start.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "deploy:metadata",
      "metadata:deploy"
    ],
    "permutations": [
      "project:deploy:start",
      "deploy:project:start",
      "deploy:start:project",
      "project:start:deploy",
      "start:project:deploy",
      "start:deploy:project"
    ]
  },
  {
    "aliases": [
      "deploy:metadata:validate"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "description": "Use this command to verify whether a deployment will succeed without actually deploying the metadata to your org. This command is similar to \"sf project deploy start\", except you're required to run Apex tests, and the command returns a job ID rather than executing the deployment. If the validation succeeds, then you pass this job ID to the \"sf project deploy quick\" command to actually deploy the metadata. This quick deploy takes less time because it skips running Apex tests. The job ID is valid for 10 days from when you started the validation. Validating first is useful if the deployment to your production org take several hours and you don’t want to risk a failed deploy.\n\nYou must run this command from within a project.\n\nThis command doesn't support source-tracking. When you quick deploy with the resulting job ID, the source you deploy overwrites the corresponding metadata in your org.\n\nTo validate the deployment of multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --source-dir.\n\nNote: Don't use this command on sandboxes; the command is intended to be used on production orgs. By default, sandboxes don't run tests during a deploy. If you want to validate a deployment with tests on a sandbox, use \"sf project deploy start --dry-run --test-level RunLocalTests\" instead.",
    "summary": "Validate a metadata deployment without actually executing it.",
    "examples": [
      "NOTE: These examples focus on validating large deployments. See the help for \"<%= config.bin %> project deploy start\" for examples of deploying smaller sets of metadata which you can also use to validate.",
      "Validate the deployment of all source files in the \"force-app\" directory to the default org:\n<%= config.bin %> <%= command.id %> --source-dir force-app",
      "Validate the deployment of all source files in two directories: \"force-app\" and \"force-app-utils\":\n<%= config.bin %> <%= command.id %> --source-dir force-app --source-dir force-app-utils",
      "Asynchronously validate the deployment and run all tests in the org with alias \"my-prod-org\"; command immediately returns the job ID:\n<%= config.bin %> <%= command.id %> --source-dir force-app --async --test-level RunAllTestsInOrg --target-org my-prod-org",
      "Validate the deployment of all components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "char": "a",
        "description": "Use this flag to override the default API version with the API version of your package.xml file. The default API version is the latest version supported by the CLI.",
        "name": "api-version",
        "summary": "Target API version for the validation.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "async": {
        "description": "The command immediately returns the job ID and control of the terminal to you. This way, you can continue to use the CLI. To resume watching the validation, run \"<%= config.bin %> project deploy resume\". To check the status of the validation, run \"<%= config.bin %> project deploy report\".",
        "name": "async",
        "summary": "Run the command asynchronously.",
        "allowNo": false,
        "type": "boolean"
      },
      "concise": {
        "exclusive": [
          "verbose"
        ],
        "name": "concise",
        "summary": "Show concise output of the validation result.",
        "allowNo": false,
        "type": "boolean"
      },
      "manifest": {
        "char": "x",
        "description": "All child components are included. If you specify this flag, don’t specify --metadata or --source-dir.",
        "helpGroup": "Source Format",
        "name": "manifest",
        "summary": "Full file path for manifest (package.xml) of components to validate for deployment.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "metadata": {
        "char": "m",
        "helpGroup": "Source Format",
        "name": "metadata",
        "summary": "Metadata component names to validate for deployment.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "source-dir": {
        "char": "d",
        "description": "The supplied path can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its subdirectories).\n\nIf you specify this flag, don’t specify --metadata or --manifest.",
        "helpGroup": "Source Format",
        "name": "source-dir",
        "summary": "Path to the local source files to validate for deployment.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "metadata-dir": {
        "helpGroup": "Metadata API Format",
        "name": "metadata-dir",
        "summary": "Root of directory or zip file of metadata formatted files to deploy.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "single-package": {
        "dependsOn": [
          "metadata-dir"
        ],
        "helpGroup": "Metadata API Format",
        "name": "single-package",
        "summary": "Indicates that the metadata zip file points to a directory structure for a single package.",
        "allowNo": false,
        "type": "boolean"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "tests": {
        "char": "t",
        "description": "If a test name contains a space, enclose it in double quotes.\nFor multiple test names, use one of the following formats:\n\n- Repeat the flag for multiple test names: --tests Test1 --tests Test2 --tests \"Test With Space\"\n- Separate the test names with spaces: --tests Test1 Test2 \"Test With Space\"",
        "helpGroup": "Test",
        "name": "tests",
        "summary": "Apex tests to run when --test-level is RunSpecifiedTests.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "test-level": {
        "char": "l",
        "description": "Valid values are:\n\n- RunSpecifiedTests — Runs only the tests that you specify with the --tests flag. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n\n- RunLocalTests — All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default.\n\n- RunAllTestsInOrg — All tests in your org are run, including tests of managed packages.",
        "helpGroup": "Test",
        "name": "test-level",
        "summary": "Deployment Apex testing level.",
        "default": "RunLocalTests",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "RunAllTestsInOrg",
          "RunLocalTests",
          "RunSpecifiedTests"
        ],
        "type": "option"
      },
      "verbose": {
        "exclusive": [
          "concise"
        ],
        "name": "verbose",
        "summary": "Show verbose output of the validation result.",
        "allowNo": false,
        "type": "boolean"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To resume watching the validation, run \"<%= config.bin %> project deploy resume\". To check the status of the validation, run \"<%= config.bin %> project deploy report\".",
        "name": "wait",
        "summary": "Number of minutes to wait for the command to complete and display results.",
        "hasDynamicHelp": true,
        "helpValue": "<minutes>",
        "multiple": false,
        "type": "option"
      },
      "ignore-warnings": {
        "char": "g",
        "description": "If you specify this flag, and a warning occurs, the success status of the deployment is set to true. If you don't specify this flag, and a warning occurs, then the success status is set to false, and the warning is treated like an error.\n\nThis flag is useful in a CI environment and your deployment includes destructive changes; if you try to delete a component that doesn't exist in the org, you get a warning. In this case, to ensure that the command returns a success value of true, specify this flag.",
        "name": "ignore-warnings",
        "summary": "Ignore warnings and allow a deployment to complete successfully.",
        "allowNo": false,
        "type": "boolean"
      },
      "coverage-formatters": {
        "description": "For multiple formatters, repeat the flag for each formatter.\n--coverage-formatters lcov --coverage-formatters clover",
        "helpGroup": "Test",
        "name": "coverage-formatters",
        "summary": "Format of the code coverage results.",
        "hasDynamicHelp": false,
        "multiple": true,
        "options": [
          "clover",
          "cobertura",
          "html-spa",
          "html",
          "json",
          "json-summary",
          "lcovonly",
          "none",
          "teamcity",
          "text",
          "text-summary"
        ],
        "type": "option"
      },
      "junit": {
        "helpGroup": "Test",
        "name": "junit",
        "summary": "Output JUnit test results.",
        "allowNo": false,
        "type": "boolean"
      },
      "results-dir": {
        "helpGroup": "Test",
        "name": "results-dir",
        "relationships": [
          {
            "type": "some",
            "flags": [
              "coverage-formatters",
              "junit"
            ]
          }
        ],
        "summary": "Output directory for code coverage and JUnit results; defaults to the deploy ID.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "purge-on-delete": {
        "dependsOn": [
          "manifest"
        ],
        "helpGroup": "Delete",
        "name": "purge-on-delete",
        "relationships": [
          {
            "type": "some",
            "flags": [
              "pre-destructive-changes",
              "post-destructive-changes"
            ]
          }
        ],
        "summary": "Specify that deleted components in the destructive changes manifest file are immediately eligible for deletion rather than being stored in the Recycle Bin.",
        "allowNo": false,
        "type": "boolean"
      },
      "pre-destructive-changes": {
        "dependsOn": [
          "manifest"
        ],
        "helpGroup": "Delete",
        "name": "pre-destructive-changes",
        "summary": "File path for a manifest (destructiveChangesPre.xml) of components to delete before the deploy",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "post-destructive-changes": {
        "dependsOn": [
          "manifest"
        ],
        "helpGroup": "Delete",
        "name": "post-destructive-changes",
        "summary": "File path for a manifest (destructiveChangesPost.xml) of components to delete after the deploy.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "configurationVariablesSection": {
      "header": "CONFIGURATION VARIABLES",
      "body": [
        {
          "name": "target-org",
          "description": "Username or alias of the org that all commands run against by default. (sf only)"
        },
        {
          "name": "org-api-version",
          "description": "API version of your project. Default: API version of your Dev Hub org."
        }
      ]
    },
    "envVariablesSection": {
      "header": "ENVIRONMENT VARIABLES",
      "body": [
        {
          "name": "SF_TARGET_ORG",
          "description": "Username or alias of your default org. Overrides the target-org configuration variable."
        },
        {
          "name": "SF_USE_PROGRESS_BAR",
          "description": "Set to false to disable the progress bar when running the metadata deploy command."
        }
      ]
    },
    "errorCodes": {
      "header": "ERROR CODES",
      "body": [
        {
          "name": "Succeeded (0)",
          "description": "The deploy succeeded."
        },
        {
          "name": "Canceled (1)",
          "description": "The deploy was canceled."
        },
        {
          "name": "Failed (1)",
          "description": "The deploy failed."
        },
        {
          "name": "SucceededPartial (68)",
          "description": "The deploy partially succeeded."
        },
        {
          "name": "InProgress (69)",
          "description": "The deploy is in progress."
        },
        {
          "name": "Pending (69)",
          "description": "The deploy is pending."
        },
        {
          "name": "Canceling (69)",
          "description": "The deploy is being canceled."
        }
      ]
    },
    "id": "project:deploy:validate",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "deploy",
      "validate.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "deploy:metadata:validate",
      "metadata:deploy:validate",
      "metadata:validate:deploy",
      "deploy:validate:metadata",
      "validate:deploy:metadata",
      "validate:metadata:deploy"
    ],
    "permutations": [
      "project:deploy:validate",
      "deploy:project:validate",
      "deploy:validate:project",
      "project:validate:deploy",
      "validate:project:deploy",
      "validate:deploy:project"
    ]
  },
  {
    "aliases": [
      "force:project:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a Salesforce DX project.",
    "description": "A Salesforce DX project has a specific structure and a configuration file (sfdx-project.json) that identifies the directory as a Salesforce DX project. This command generates the necessary configuration files and directories to get you started.\n\nBy default, the generated sfdx-project.json file sets the sourceApiVersion property to the default API version currently used by Salesforce CLI. To specify a different version, set the apiVersion configuration variable. For example: \"sf config set apiVersion=57.0 --global\".",
    "examples": [
      "Generate a project called \"mywork\":\n<%= config.bin %> <%= command.id %> --name mywork",
      "Similar to previous example, but generate the files in a directory called \"myapp\":\n<%= config.bin %> <%= command.id %> --name mywork --default-package-dir myapp",
      "Similar to prevoius example, but also generate a default package.xml manifest file:\n<%= config.bin %> <%= command.id %> --name mywork --default-package-dir myapp --manifest",
      "Generate a project with the minimum files and directories:\n<%= config.bin %> <%= command.id %> --name mywork --template empty"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "projectname"
        ],
        "char": "n",
        "deprecateAliases": true,
        "description": "Generates a project directory with this name; any valid directory name is accepted. Also sets the \"name\" property in the sfdx-project.json file to this name.",
        "name": "name",
        "required": true,
        "summary": "Name of the generated project.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "template": {
        "char": "t",
        "description": "The template determines the sample configuration files and directories that this command generates. For example, the empty template provides these files and directory to get you started.\n\n- .forceignore\n- config/project-scratch-def.json\n- sfdx-project.json\n- package.json\n- force-app (basic source directory structure)\n\nThe standard template provides a complete force-app directory structure so you know where to put your source. It also provides additional files and scripts, especially useful when using Salesforce Extensions for VS Code. For example:\n\n- .gitignore: Use Git for version control.\n- .prettierrc and .prettierignore: Use Prettier to format your Aura components.\n- .vscode/extensions.json: When launched, Visual Studio Code, prompts you to install the recommended extensions for your project.\n- .vscode/launch.json: Configures Replay Debugger.\n- .vscode/settings.json: Additional configuration settings.\n\nThe analytics template provides similar files and the force-app/main/default/waveTemplates directory.",
        "name": "template",
        "summary": "Template to use for project creation.",
        "default": "standard",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "standard",
          "empty",
          "analytics"
        ],
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir"
        ],
        "char": "d",
        "deprecateAliases": true,
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "name": "output-dir",
        "summary": "Directory for saving the created files.",
        "default": ".",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "namespace": {
        "char": "s",
        "name": "namespace",
        "summary": "Namespace associated with this project and any connected scratch orgs.",
        "default": "",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "default-package-dir": {
        "aliases": [
          "defaultpackagedir"
        ],
        "char": "p",
        "deprecateAliases": true,
        "description": "Metadata items such as classes and Lightning bundles are placed inside this folder.",
        "name": "default-package-dir",
        "summary": "Default package directory name.",
        "default": "force-app",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "manifest": {
        "char": "x",
        "description": "Generates a default manifest (package.xml) for fetching Apex, Visualforce, Lightning components, and static resources.",
        "name": "manifest",
        "summary": "Generate a manifest (package.xml) for change-set based development.",
        "allowNo": false,
        "type": "boolean"
      },
      "login-url": {
        "aliases": [
          "loginurl"
        ],
        "char": "l",
        "deprecateAliases": true,
        "description": "Normally defaults to https://login.salesforce.com.",
        "hidden": true,
        "name": "login-url",
        "summary": "Salesforce instance login URL.",
        "default": "https://login.salesforce.com",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "summary": "Will set this version as sourceApiVersion in the sfdx-project.json file",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "project:generate",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "generate.js"
    ],
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginName": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliasPermutations": [
      "force:project:create",
      "project:force:create",
      "project:create:force",
      "force:create:project",
      "create:force:project",
      "create:project:force"
    ],
    "permutations": [
      "project:generate",
      "generate:project"
    ]
  },
  {
    "aliases": [
      "force:source:manifest:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Create a project manifest that lists the metadata components you want to deploy or retrieve.",
    "description": "Create a manifest from a list of metadata components (--metadata) or from one or more local directories that contain source files (--source-dir). You can specify either of these flags, not both.\n\nUse --type to specify the type of manifest you want to create. The resulting manifest files have specific names, such as the standard package.xml or destructiveChanges.xml to delete metadata. Valid values for this flag, and their respective file names, are:\n\n    * package : package.xml (default)\n    * pre : destructiveChangesPre.xml\n    * post : destructiveChangesPost.xml\n    * destroy : destructiveChanges.xml\n\nSee https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deploy_deleting_files.htm for information about these destructive manifest files.\n\nUse --name to specify a custom name for the generated manifest if the pre-defined ones don’t suit your needs. You can specify either --type or --name, but not both.\n\nTo include multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --include-packages and --source-dir.\n\nTo build a manifest from the metadata in an org, use the --from-org flag. You can combine --from-org with the --metadata flag to include only certain metadata types, or with the --excluded-metadata flag to exclude certain metadata types. When building a manifest from an org, the command makes many concurrent API calls to discover the metadata that exists in the org. To limit the number of concurrent requests, use the SF_LIST_METADATA_BATCH_SIZE environment variable and set it to a size that works best for your org and environment. If you experience timeouts or inconsistent manifest contents, then setting this environment variable can improve accuracy. However, the command takes longer to run because it sends fewer requests at a time.",
    "examples": [
      "Create a manifest for deploying or retrieving all Apex classes and custom objects:\n$ <%= config.bin %> <%= command.id %> --metadata ApexClass --metadata CustomObject",
      "Create a manifest for deleting the specified Apex class:\n$ <%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass --type destroy",
      "Create a manifest for deploying or retrieving all the metadata components in the specified local directory; name the file myNewManifest.xml:\n$ <%= config.bin %> <%= command.id %> --source-dir force-app --name myNewManifest",
      "Create a manifest from the metadata components in the specified org and include metadata in any unlocked packages:\n$ <%= config.bin %> <%= command.id %> --from-org test@myorg.com --include-packages unlocked",
      "Create a manifest from specific metadata types in an org:\n$ <%= config.bin %> <%= command.id %> --from-org test@myorg.com --metadata ApexClass,CustomObject,CustomLabels",
      "Create a manifest from all metadata components in an org excluding specific metadata types:\n$ <%= config.bin %> <%= command.id %> --from-org test@myorg.com --excluded-metadata StandardValueSet"
    ],
    "deprecateAliases": true,
    "requiresProject": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "metadata": {
        "char": "m",
        "exclusive": [
          "source-dir"
        ],
        "name": "metadata",
        "summary": "Names of metadata components to include in the manifest.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "source-dir": {
        "aliases": [
          "sourcepath"
        ],
        "char": "p",
        "deprecateAliases": true,
        "exclusive": [
          "metadata"
        ],
        "name": "source-dir",
        "summary": "Paths to the local source files to include in the manifest.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "name": {
        "aliases": [
          "manifestname"
        ],
        "char": "n",
        "deprecateAliases": true,
        "exclusive": [
          "type"
        ],
        "name": "name",
        "summary": "Name of a custom manifest file to create.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "type": {
        "aliases": [
          "manifesttype"
        ],
        "char": "t",
        "deprecateAliases": true,
        "exclusive": [
          "name"
        ],
        "name": "type",
        "summary": "Type of manifest to create; the type determines the name of the created file.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "pre",
          "post",
          "destroy",
          "package"
        ],
        "type": "option"
      },
      "include-packages": {
        "aliases": [
          "includepackages"
        ],
        "char": "c",
        "dependsOn": [
          "from-org"
        ],
        "deprecateAliases": true,
        "name": "include-packages",
        "summary": "Package types (managed, unlocked) whose metadata is included in the manifest; by default, metadata in managed and unlocked packages is excluded. Metadata in unmanaged packages is always included.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "options": [
          "managed",
          "unlocked"
        ],
        "type": "option"
      },
      "excluded-metadata": {
        "dependsOn": [
          "from-org"
        ],
        "exclusive": [
          "metadata"
        ],
        "name": "excluded-metadata",
        "summary": "Metadata types to exclude when building a manifest from an org. Specify the name of the type, not the name of a specific component.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "from-org": {
        "aliases": [
          "fromorg"
        ],
        "deprecateAliases": true,
        "exclusive": [
          "source-dir"
        ],
        "name": "from-org",
        "summary": "Username or alias of the org that contains the metadata components from which to build a manifest.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir",
          "o"
        ],
        "char": "d",
        "deprecateAliases": true,
        "name": "output-dir",
        "summary": "Directory to save the created manifest.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "project:generate:manifest",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "generate",
      "manifest.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "force:source:manifest:create",
      "source:force:manifest:create",
      "source:manifest:force:create",
      "source:manifest:create:force",
      "force:manifest:source:create",
      "manifest:force:source:create",
      "manifest:source:force:create",
      "manifest:source:create:force",
      "force:manifest:create:source",
      "manifest:force:create:source",
      "manifest:create:force:source",
      "manifest:create:source:force",
      "force:source:create:manifest",
      "source:force:create:manifest",
      "source:create:force:manifest",
      "source:create:manifest:force",
      "force:create:source:manifest",
      "create:force:source:manifest",
      "create:source:force:manifest",
      "create:source:manifest:force",
      "force:create:manifest:source",
      "create:force:manifest:source",
      "create:manifest:force:source",
      "create:manifest:source:force"
    ],
    "permutations": [
      "project:generate:manifest",
      "generate:project:manifest",
      "generate:manifest:project",
      "project:manifest:generate",
      "manifest:project:generate",
      "manifest:generate:project"
    ]
  },
  {
    "aliases": [
      "force:source:ignored:list"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Check your local project package directories for forceignored files.",
    "description": "When deploying or retrieving metadata between your local project and an org, you can specify the source files you want to exclude with a .forceignore file. The .forceignore file structure mimics the .gitignore structure. Each line in .forceignore specifies a pattern that corresponds to one or more files. The files typically represent metadata components, but can be any files you want to exclude, such as LWC configuration JSON files or tests.",
    "examples": [
      "List all the files in all package directories that are ignored:\n<%= config.bin %> <%= command.id %>",
      "List all the files in a specific directory that are ignored:\n<%= config.bin %> <%= command.id %> --source-dir force-app",
      "Check if a particular file is ignored:\n<%= config.bin %> <%= command.id %> --source-dir package.xml"
    ],
    "requiresProject": true,
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "source-dir": {
        "aliases": [
          "sourcepath"
        ],
        "char": "p",
        "deprecateAliases": true,
        "name": "source-dir",
        "summary": "File or directory of files that the command checks for foreceignored files.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "project:list:ignored",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "list",
      "ignored.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "force:source:ignored:list",
      "source:force:ignored:list",
      "source:ignored:force:list",
      "source:ignored:list:force",
      "force:ignored:source:list",
      "ignored:force:source:list",
      "ignored:source:force:list",
      "ignored:source:list:force",
      "force:ignored:list:source",
      "ignored:force:list:source",
      "ignored:list:force:source",
      "ignored:list:source:force",
      "force:source:list:ignored",
      "source:force:list:ignored",
      "source:list:force:ignored",
      "source:list:ignored:force",
      "force:list:source:ignored",
      "list:force:source:ignored",
      "list:source:force:ignored",
      "list:source:ignored:force",
      "force:list:ignored:source",
      "list:force:ignored:source",
      "list:ignored:force:source",
      "list:ignored:source:force"
    ],
    "permutations": [
      "project:list:ignored",
      "list:project:ignored",
      "list:ignored:project",
      "project:ignored:list",
      "ignored:project:list",
      "ignored:list:project"
    ]
  },
  {
    "aliases": [
      "force:source:tracking:reset"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "deprecateAliases": true,
    "summary": "Reset local and remote source tracking.",
    "description": "WARNING: This command deletes or overwrites all existing source tracking files. Use with extreme caution.\n\nResets local and remote source tracking so that Salesforce CLI no longer registers differences between your local files and those in the org. When you next run 'project deploy preview', Salesforce CLI returns no results, even though conflicts might actually exist. Salesforce CLI then resumes tracking new source changes as usual.\n\nUse the --revision flag to reset source tracking to a specific revision number of an org source member. To get the revision number, query the SourceMember Tooling API object with the 'data soql' command. For example:\n\n    sf data query --query \"SELECT MemberName, MemberType, RevisionCounter FROM SourceMember\" --use-tooling-api --target-org my-scratch",
    "requiresProject": true,
    "examples": [
      "Reset source tracking for the org with alias \"my-scratch\":\n$ <%= config.bin %> <%= command.id %> --target-org my-scratch",
      "Reset source tracking to revision number 30 for your default org:\n$ <%= config.bin %> <%= command.id %> --revision 30"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "revision": {
        "char": "r",
        "name": "revision",
        "summary": "SourceMember revision counter number to reset to.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "no-prompt": {
        "aliases": [
          "noprompt"
        ],
        "char": "p",
        "deprecateAliases": true,
        "name": "no-prompt",
        "summary": "Don't prompt for source tracking override confirmation.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "project:reset:tracking",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "reset",
      "tracking.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "force:source:tracking:reset",
      "source:force:tracking:reset",
      "source:tracking:force:reset",
      "source:tracking:reset:force",
      "force:tracking:source:reset",
      "tracking:force:source:reset",
      "tracking:source:force:reset",
      "tracking:source:reset:force",
      "force:tracking:reset:source",
      "tracking:force:reset:source",
      "tracking:reset:force:source",
      "tracking:reset:source:force",
      "force:source:reset:tracking",
      "source:force:reset:tracking",
      "source:reset:force:tracking",
      "source:reset:tracking:force",
      "force:reset:source:tracking",
      "reset:force:source:tracking",
      "reset:source:force:tracking",
      "reset:source:tracking:force",
      "force:reset:tracking:source",
      "reset:force:tracking:source",
      "reset:tracking:force:source",
      "reset:tracking:source:force"
    ],
    "permutations": [
      "project:reset:tracking",
      "reset:project:tracking",
      "reset:tracking:project",
      "project:tracking:reset",
      "tracking:project:reset",
      "tracking:reset:project"
    ]
  },
  {
    "aliases": [
      "retrieve:metadata:preview"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "description": "You must run this command from within a project.\n\nThe command outputs a table that describes what will happen if you run the \"sf project retrieve start\" command. The table lists the metadata components that will be retrieved and deleted. The table also lists the current conflicts between files in your local project and components in the org. Finally, the table lists the files that won't be retrieved because they're included in your .forceignore file.\n\nIf your org allows source tracking, then this command displays potential conflicts between the org and your local project. Some orgs, such as production org, never allow source tracking. Source tracking is enabled by default on scratch and sandbox orgs; you can disable source tracking when you create the orgs by specifying the --no-track-source flag on the \"sf org create scratch|sandbox\" commands.",
    "summary": "Preview a retrieval to see what will be retrieved from the org, the potential conflicts, and the ignored files.",
    "examples": [
      "Preview the retrieve of all changes from your default org:\n<%= config.bin %> <%= command.id %>",
      "Preview the retrieve when ignoring any conflicts from an org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --ignore-conflicts --target-org my-scratch"
    ],
    "requiresProject": true,
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "ignore-conflicts": {
        "char": "c",
        "description": "This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.",
        "name": "ignore-conflicts",
        "summary": "Don't display conflicts in the preview of the retrieval.",
        "allowNo": false,
        "type": "boolean"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "concise": {
        "name": "concise",
        "summary": "Show only the changes that will be retrieved; omits files that are forceignored.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "project:retrieve:preview",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "retrieve",
      "preview.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "retrieve:metadata:preview",
      "metadata:retrieve:preview",
      "metadata:preview:retrieve",
      "retrieve:preview:metadata",
      "preview:retrieve:metadata",
      "preview:metadata:retrieve"
    ],
    "permutations": [
      "project:retrieve:preview",
      "retrieve:project:preview",
      "retrieve:preview:project",
      "project:preview:retrieve",
      "preview:project:retrieve",
      "preview:retrieve:project"
    ]
  },
  {
    "aliases": [
      "retrieve:metadata"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Retrieve metadata from an org to your local project.",
    "description": "You must run this command from within a project.\n\nMetadata components are retrieved in source format by default. Retrieve them in metadata format by specifying the --target-metadata-dir flag, which retrieves the components into a ZIP file in the specified directory.\n\nIf your org allows source tracking, then this command tracks the changes in your source. Some orgs, such as production orgs, never allow source tracking. Source tracking is enabled by default on scratch and sandbox orgs; you can disable source tracking when you create the orgs by specifying the --no-track-source flag on the \"sf org create scratch|sandbox\" commands.\n\nTo retrieve multiple metadata components, either use multiple --metadata <name> flags or use a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --source-dir.",
    "examples": [
      "Retrieve all remote changes from your default org:\n<%= config.bin %> <%= command.id %>",
      "Retrieve the source files in the \"force-app\" directory from an org with alias \"my-scratch\":\n<%= config.bin %> <%= command.id %> --source-dir force-app --target-org my-scratch",
      "Retrieve all the Apex classes and custom objects whose source is in the \"force-app\" directory. The list views, layouts, etc, that are associated with the custom objects are also retrieved. Both examples are equivalent:\n<%= config.bin %> <%= command.id %> --source-dir force-app/main/default/classes force-app/main/default/objects\n<%= config.bin %> <%= command.id %> --source-dir force-app/main/default/classes --source-dir force-app/main/default/objects",
      "Retrieve all Apex classes that are in all package directories defined in the \"sfdx-project.json\" file:\n<%= config.bin %> <%= command.id %> --metadata ApexClass",
      "Retrieve a specific Apex class; ignore any conflicts between the local project and org (be careful with this flag, because it will overwrite the Apex class source files in your local project if there are conflicts!):\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass --ignore-conflicts",
      "Retrieve specific Apex classes that match a pattern; in this example, retrieve Apex classes whose names contain the string \"MyApex\":\n<%= config.bin %> <%= command.id %> --metadata 'ApexClass:MyApex*'",
      "Retrieve a custom object called ExcitingObject that's in the SBQQ namespace:\nsf <%= command.id %> --metadata CustomObject:SBQQ__ExcitingObject",
      "Retrieve all custom objects in the SBQQ namespace by using a wildcard and quotes:\nsf <%= command.id %> --metadata 'CustomObject:SBQQ__*'",
      "Retrieve all custom objects and Apex classes found in all defined package directories (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --metadata CustomObject ApexClass\n<%= config.bin %> <%= command.id %> --metadata CustomObject --metadata ApexClass",
      "Retrieve all metadata components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml",
      "Retrieve metadata from a package:\n<%= config.bin %> <%= command.id %> --package-name MyPackageName",
      "Retrieve metadata from multiple packages, one of which has a space in its name (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --package-name Package1 \"PackageName With Spaces\" Package3\n<%= config.bin %> <%= command.id %> --package-name Package1 --package-name \"PackageName With Spaces\" --package-name Package3",
      "Retrieve the metadata components listed in the force-app directory, but retrieve them in metadata format into a ZIP file in the \"output\" directory:\n<%= config.bin %> <%= command.id %> --source-dir force-app --target-metadata-dir output",
      "Retrieve in metadata format and automatically extract the contents into the \"output\" directory:\n<%= config.bin %> <%= command.id %> --source-dir force-app --target-metadata-dir output --unzip"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "char": "a",
        "description": "Use this flag to override the default API version, which is the latest version supported the CLI, with the API version in your package.xml file.",
        "name": "api-version",
        "summary": "Target API version for the retrieve.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "ignore-conflicts": {
        "char": "c",
        "description": "This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.",
        "name": "ignore-conflicts",
        "summary": "Ignore conflicts and retrieve and save files to your local filesystem, even if they overwrite your local changes.",
        "allowNo": false,
        "type": "boolean"
      },
      "manifest": {
        "char": "x",
        "description": "If you specify this flag, don’t specify --metadata or --source-dir.",
        "exclusive": [
          "metadata",
          "source-dir"
        ],
        "name": "manifest",
        "summary": "File path for the manifest (package.xml) that specifies the components to retrieve.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "metadata": {
        "char": "m",
        "exclusive": [
          "manifest",
          "source-dir"
        ],
        "name": "metadata",
        "summary": "Metadata component names to retrieve. Wildcards (`*`) supported as long as you use quotes, such as `ApexClass:MyClass*`.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "package-name": {
        "char": "n",
        "description": "The metadata of the supplied package name(s) will be retrieved into a child directory of the project. The name of that child directory matches the name of the package. The retrieved metadata is meant for your reference only, don't add it to a source control system for development and deployment. For package development, retrieve the metadata using a manifest (`--manifest` flag) or by targeting a source controlled package directory within your project (`--source-dir` flag).",
        "name": "package-name",
        "summary": "Package names to retrieve. Use of this flag is for reference only; don't use it to retrieve packaged metadata for development.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "output-dir": {
        "char": "r",
        "description": "The root of the directory structure into which the source files are retrieved.\nIf the target directory matches one of the package directories in your sfdx-project.json file, the command fails.\nRunning the command multiple times with the same target adds new files and overwrites existing files.",
        "exclusive": [
          "package-name",
          "source-dir"
        ],
        "name": "output-dir",
        "summary": "Directory root for the retrieved source files.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "single-package": {
        "dependsOn": [
          "target-metadata-dir"
        ],
        "exclusive": [
          "ignore-conflicts"
        ],
        "helpGroup": "Metadata API Format",
        "name": "single-package",
        "summary": "Indicates that the zip file points to a directory structure for a single package.",
        "allowNo": false,
        "type": "boolean"
      },
      "source-dir": {
        "char": "d",
        "description": "The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all source files in the directory and its subdirectories).",
        "exclusive": [
          "manifest",
          "metadata"
        ],
        "name": "source-dir",
        "summary": "File paths for source to retrieve from the org.",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "target-metadata-dir": {
        "char": "t",
        "exclusive": [
          "ignore-conflicts"
        ],
        "helpGroup": "Metadata API Format",
        "name": "target-metadata-dir",
        "relationships": [
          {
            "type": "some",
            "flags": [
              "manifest",
              "metadata",
              "source-dir",
              "package-name"
            ]
          }
        ],
        "summary": "Directory that will contain the retrieved metadata format files or ZIP.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "char": "o",
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "wait": {
        "char": "w",
        "description": "If the command continues to run after the wait period, the CLI returns control of the terminal window to you.",
        "name": "wait",
        "summary": "Number of minutes to wait for the command to complete and display results to the terminal window.",
        "default": "33 minutes",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "unzip": {
        "char": "z",
        "dependsOn": [
          "target-metadata-dir"
        ],
        "exclusive": [
          "ignore-conflicts"
        ],
        "helpGroup": "Metadata API Format",
        "name": "unzip",
        "summary": "Extract all files from the retrieved zip file.",
        "allowNo": false,
        "type": "boolean"
      },
      "zip-file-name": {
        "dependsOn": [
          "target-metadata-dir"
        ],
        "exclusive": [
          "ignore-conflicts"
        ],
        "helpGroup": "Metadata API Format",
        "name": "zip-file-name",
        "summary": "File name to use for the retrieved zip file.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "configurationVariablesSection": {
      "header": "CONFIGURATION VARIABLES",
      "body": [
        {
          "name": "target-org",
          "description": "Username or alias of the org that all commands run against by default. (sf only)"
        },
        {
          "name": "org-api-version",
          "description": "API version of your project. Default: API version of your Dev Hub org."
        }
      ]
    },
    "envVariablesSection": {
      "header": "ENVIRONMENT VARIABLES",
      "body": [
        {
          "name": "SF_TARGET_ORG",
          "description": "Username or alias of your default org. Overrides the target-org configuration variable."
        },
        {
          "name": "SF_USE_PROGRESS_BAR",
          "description": "Set to false to disable the progress bar when running the metadata deploy command."
        }
      ]
    },
    "id": "project:retrieve:start",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "project",
      "retrieve",
      "start.js"
    ],
    "pluginAlias": "@salesforce/plugin-deploy-retrieve",
    "pluginName": "@salesforce/plugin-deploy-retrieve",
    "pluginType": "core",
    "aliasPermutations": [
      "retrieve:metadata",
      "metadata:retrieve"
    ],
    "permutations": [
      "project:retrieve:start",
      "retrieve:project:start",
      "retrieve:start:project",
      "project:start:retrieve",
      "start:project:retrieve",
      "start:retrieve:project"
    ]
  },
  {
    "id": "run:function",
    "summary": "Send a cloudevent to a function.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Run a function:\n<%= config.bin %> <%= command.id %> --url http://path/to/function",
      "Run a function with a payload and a JSON response:\n<%= config.bin %> <%= command.id %> --url http://path/to/function --payload '@file.json' --structured"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "function-url": {
        "name": "function-url",
        "type": "option",
        "char": "l",
        "description": "URL of the function to run.",
        "multiple": false,
        "exclusive": [
          "url"
        ]
      },
      "url": {
        "name": "url",
        "type": "option",
        "char": "l",
        "description": "URL of the function to run.",
        "hidden": true,
        "multiple": false,
        "exclusive": [
          "function-url"
        ]
      },
      "headers": {
        "name": "headers",
        "type": "option",
        "char": "H",
        "description": "Set headers.",
        "multiple": true
      },
      "payload": {
        "name": "payload",
        "type": "option",
        "char": "p",
        "description": "Set the payload of the cloudevent as a JSON object or a path to a file via @file.json.",
        "multiple": false
      },
      "structured": {
        "name": "structured",
        "type": "boolean",
        "char": "s",
        "description": "Set the cloudevent to be emitted as a structured JSON cloudevent.",
        "allowNo": false
      },
      "connected-org": {
        "name": "connected-org",
        "type": "option",
        "char": "o",
        "description": "Username or alias for the target org; overrides default target org.",
        "multiple": false
      }
    },
    "args": {}
  },
  {
    "id": "run:function:start",
    "summary": "Build and run a Salesforce Function.",
    "description": "Run this command from the directory of your Salesforce Functions project.\n\nThis command will run the target function locally (on the same operating system as this CLI), just like the `local` subcommand.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Build a function and start the invoker\n<%= config.bin %> <%= command.id %>",
      "Start the invoker with a specific language and port\n<%= config.bin %> <%= command.id %> --port 5000 --language javascript"
    ],
    "flags": {
      "path": {
        "name": "path",
        "type": "option",
        "description": "Path to function directory.",
        "hidden": true,
        "multiple": false,
        "default": "/home/runner/work/plugin-functions/plugin-functions"
      },
      "port": {
        "name": "port",
        "type": "option",
        "char": "p",
        "description": "Port for running the function.",
        "multiple": false,
        "default": 8080
      },
      "debug-port": {
        "name": "debug-port",
        "type": "option",
        "char": "b",
        "description": "Port for remote debugging.",
        "multiple": false,
        "default": 9229
      },
      "language": {
        "name": "language",
        "type": "option",
        "char": "l",
        "description": "The language that the function runs in.",
        "multiple": false,
        "options": [
          "auto",
          "java",
          "javascript",
          "typescript"
        ],
        "default": "auto"
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "char": "v",
        "description": "Output additional logs.",
        "allowNo": false
      }
    },
    "args": {}
  },
  {
    "id": "run:function:start:container",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "hidden": false,
    "aliases": [],
    "flags": {},
    "args": {}
  },
  {
    "id": "run:function:start:local",
    "description": "Build and run a Salesforce Function locally.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Build a function and start the invoker\n<%= config.bin %> <%= command.id %>",
      "Start the invoker with a specific language and port\n<%= config.bin %> <%= command.id %> --port 5000 --language javascript"
    ],
    "flags": {
      "path": {
        "name": "path",
        "type": "option",
        "description": "Path to function directory.",
        "hidden": true,
        "multiple": false,
        "default": "/home/runner/work/plugin-functions/plugin-functions"
      },
      "port": {
        "name": "port",
        "type": "option",
        "char": "p",
        "description": "Port to bind the invoker to.",
        "multiple": false,
        "default": 8080
      },
      "debug-port": {
        "name": "debug-port",
        "type": "option",
        "char": "b",
        "description": "Port to use for debugging the function.",
        "multiple": false,
        "default": 9229
      },
      "language": {
        "name": "language",
        "type": "option",
        "char": "l",
        "description": "The language in which the function is written.",
        "multiple": false,
        "options": [
          "auto",
          "java",
          "javascript",
          "typescript"
        ],
        "default": "auto"
      }
    },
    "args": {}
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@3.27.0",
    "SF_ENV": "SF_ENV",
    "summary": "Add custom rules to Salesforce Code Analyzer's registry to run them along with the built-in rules.",
    "description": "Bundle custom PMD rules in JAR files. Follow PMD conventions, such as defining the custom rules in XML files under a `/category/` directory. Compile and test custom rules separately before adding them. See PMD's documentation for more information on writing rules.",
    "examples": [
      "This example shows how to specify two JAR files directly.\n<%= config.bin %> <%= command.id %> --language apex --path \"/Users/me/rules/Jar1.jar,/Users/me/rules/Jar2.jar\"\nThis example shows how to specify a directory containing one or more JARs, all of which are added to the registry.\n<%= config.bin %> <%= command.id %> --language apex --path \"/Users/me/rules\""
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "language": {
        "char": "l",
        "name": "language",
        "required": true,
        "summary": "Language that the custom rules are evaluated against.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "path": {
        "char": "p",
        "description": "Specify multiple values as a comma-separated list.",
        "name": "path",
        "required": true,
        "summary": "One or more paths (such as a directory or JAR file) to custom rule definitions.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      }
    },
    "id": "scanner:rule:add",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "scanner",
      "rule",
      "add.js"
    ],
    "pluginAlias": "@salesforce/sfdx-scanner",
    "pluginName": "@salesforce/sfdx-scanner",
    "pluginType": "user",
    "aliasPermutations": [],
    "permutations": [
      "scanner:rule:add",
      "rule:scanner:add",
      "rule:add:scanner",
      "scanner:add:rule",
      "add:scanner:rule",
      "add:rule:scanner"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@3.27.0",
    "SF_ENV": "SF_ENV",
    "summary": "Provide detailed information about a rule that includes the rule's language (such as Apex or Java), the violation it detects, example code of the violation, and the rule's categories and rulesets.",
    "examples": [
      "This example shows how to describe the ApexBadCrypto rule.\n<%= config.bin %> <%= command.id %> --rulename ApexBadCrypto"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "rulename": {
        "char": "n",
        "name": "rulename",
        "required": true,
        "summary": "The name of the rule.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Emit additional command output to stdout.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "scanner:rule:describe",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "scanner",
      "rule",
      "describe.js"
    ],
    "pluginAlias": "@salesforce/sfdx-scanner",
    "pluginName": "@salesforce/sfdx-scanner",
    "pluginType": "user",
    "aliasPermutations": [],
    "permutations": [
      "scanner:rule:describe",
      "rule:scanner:describe",
      "rule:describe:scanner",
      "scanner:describe:rule",
      "describe:scanner:rule",
      "describe:rule:scanner"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@3.27.0",
    "SF_ENV": "SF_ENV",
    "summary": "List basic information about all rules matching provided criteria.",
    "description": "Filter the output to view a smaller set of rules. Use the `scanner rule describe` command to get information about a specific rule.",
    "examples": [
      "This example invokes the command without filter criteria, which returns all rules.\n<%= config.bin %> <%= command.id %>\nThis example returns all rules for Apex OR Javascript. Values supplied to a single filter are handled with a logical OR.\n<%= config.bin %> <%= command.id %> --language apex,javascript\nThis example returns all rules that target Apex OR Javascript, AND are members of the Braces OR Security rulesets. The different filters are combined with a logical AND.\n<%= config.bin %> <%= command.id %> --language apex,javascript --ruleset Braces,Security"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Emit additional command output to stdout.",
        "allowNo": false,
        "type": "boolean"
      },
      "category": {
        "char": "c",
        "description": "Specify multiple values as a comma-separated list.",
        "name": "category",
        "summary": "Select rules by category.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "ruleset": {
        "char": "r",
        "deprecated": {
          "message": "The 'ruleset' command parameter is deprecated. Use 'category' instead"
        },
        "name": "ruleset",
        "summary": "Deprecated. Use category instead. Select rules by ruleset.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "language": {
        "char": "l",
        "description": "Specify multiple values as a comma-separated list.",
        "name": "language",
        "summary": "Select rules by language.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "engine": {
        "char": "e",
        "description": "Specify multiple values as a comma-separated list.",
        "name": "engine",
        "summary": "Select rules by engine.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "options": [
          "eslint",
          "eslint-lwc",
          "eslint-typescript",
          "pmd",
          "pmd-appexchange",
          "retire-js",
          "cpd",
          "sfge"
        ],
        "type": "option"
      }
    },
    "id": "scanner:rule:list",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "scanner",
      "rule",
      "list.js"
    ],
    "pluginAlias": "@salesforce/sfdx-scanner",
    "pluginName": "@salesforce/sfdx-scanner",
    "pluginType": "user",
    "aliasPermutations": [],
    "permutations": [
      "scanner:rule:list",
      "rule:scanner:list",
      "rule:list:scanner",
      "scanner:list:rule",
      "list:scanner:rule",
      "list:rule:scanner"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@3.27.0",
    "SF_ENV": "SF_ENV",
    "summary": "Remove custom rules from the registry of available rules.",
    "description": "Use the `-p|--path` parameter to specify one or more paths to remove. If you don't specify any parameters, the command lists all valid custom paths but doesn't remove any.",
    "examples": [
      "This example runs the command without arguments to see a list of registered custom paths.\n<%= config.bin %> <%= command.id %>\nThis example uses the --path parameter to deregister the rules defined in somerules.jar and any JARs/XMLs contained in the rules folder.\n<%= config.bin %> <%= command.id %> --path \"~/path/to/somerules.jar,~/path/to/folder/containing/rules\"\nThis example uses the --force flag to bypass the confirmation prompt, removing all rules defined in somerules.jar. By default, a list of all rules that will be unregistered is displayed, and the action must be confirmed. To bypass that confirmation, use the --force flag.\n<%= config.bin %> <%= command.id %> --force --path \"~/path/to/somerules.jar\""
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Emit additional command output to stdout.",
        "allowNo": false,
        "type": "boolean"
      },
      "force": {
        "char": "f",
        "name": "force",
        "summary": "Bypass the confirmation prompt and immediately remove the rules.",
        "allowNo": false,
        "type": "boolean"
      },
      "path": {
        "char": "p",
        "description": "Specify multiple values with a comma-separated list.",
        "name": "path",
        "summary": "One or more paths to remove.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      }
    },
    "id": "scanner:rule:remove",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "scanner",
      "rule",
      "remove.js"
    ],
    "pluginAlias": "@salesforce/sfdx-scanner",
    "pluginName": "@salesforce/sfdx-scanner",
    "pluginType": "user",
    "aliasPermutations": [],
    "permutations": [
      "scanner:rule:remove",
      "rule:scanner:remove",
      "rule:remove:scanner",
      "scanner:remove:rule",
      "remove:scanner:rule",
      "remove:rule:scanner"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@3.27.0",
    "SF_ENV": "SF_ENV",
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Emit additional command output to stdout.",
        "allowNo": false,
        "type": "boolean"
      },
      "category": {
        "char": "c",
        "description": "Specify multiple values as a comma-separated list.",
        "name": "category",
        "summary": "One or more categories of rules to run.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "format": {
        "char": "f",
        "name": "format",
        "summary": "The output format for results written directly to the console.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "csv",
          "html",
          "json",
          "junit",
          "sarif",
          "table",
          "xml"
        ],
        "type": "option"
      },
      "outfile": {
        "char": "o",
        "name": "outfile",
        "summary": "File to write output to.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "severity-threshold": {
        "char": "s",
        "description": "Values are 1 (high), 2 (moderate), and 3 (low). Exit code is the most severe violation. Using this flag also invokes the --normalize-severity flag.",
        "exclusive": [
          "json"
        ],
        "name": "severity-threshold",
        "summary": "An error will be thrown when a violation is found with a severity equal to or greater than the specified level.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "normalize-severity": {
        "description": "For the html option, the normalized severity is displayed instead of the engine severity.",
        "name": "normalize-severity",
        "summary": "Include normalized severity levels 1 (high), 2 (moderate), and 3 (low) with the results.",
        "allowNo": false,
        "type": "boolean"
      },
      "projectdir": {
        "char": "p",
        "description": "Specify multiple values as a comma-separated list. Each project directory must be a path, not a glob. If --projectdir isn’t specified, a default value is calculated. The default value is a directory that contains all the target files.",
        "name": "projectdir",
        "summary": "The relative or absolute root project directories used to set the context for Graph Engine's analysis.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "ruleset": {
        "char": "r",
        "deprecated": {
          "message": "The 'ruleset' command parameter is deprecated. Use 'category' instead."
        },
        "description": "Use category instead. One or more rulesets to run. Specify multiple values as a comma-separated list.",
        "name": "ruleset",
        "summary": "[Deprecated] Rulesets to run.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "engine": {
        "char": "e",
        "description": "Submit multiple values as a comma-separated list.",
        "name": "engine",
        "summary": "Specify which engines to run.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "options": [
          "eslint",
          "eslint-lwc",
          "eslint-typescript",
          "pmd",
          "pmd-appexchange",
          "retire-js",
          "sfge",
          "cpd"
        ],
        "type": "option"
      },
      "target": {
        "char": "t",
        "description": "Specify multiple values as a comma-separated list. Can use glob patterns. Default is \".\".",
        "name": "target",
        "summary": "Source code location.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "tsconfig": {
        "name": "tsconfig",
        "summary": "Location of tsconfig.json file used by the eslint-typescript engine. The --tsconfig flag can’t be used with --eslintconfig flag.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "eslintconfig": {
        "name": "eslintconfig",
        "summary": "Specify the location of eslintrc config to customize eslint engine. The --tsconfig flag can’t be used with --eslintconfig flag.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "pmdconfig": {
        "name": "pmdconfig",
        "summary": "Location of PMD rule reference XML file to customize rule selection.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "env": {
        "deprecated": {
          "message": "--env parameter is being deprecated, and will be removed in a future release."
        },
        "description": "Overrides ESLint's default environmental variables, in JSON-formatted string.",
        "name": "env",
        "summary": "[Deprecated] Override ESLint's default environment variables, in JSON-formatted string.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "verbose-violations": {
        "name": "verbose-violations",
        "summary": "Includes Retire-js violation-message details about each vulnerability in the results, including summary, common vulnerabilities and exposures (CVE), and URLs.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "summary": "Scan a codebase with all the rules in the registry, or use parameters to filter the rules based on rulename, category, or ruleset.",
    "description": "Specify the format of the output, such as XML or JUnit. Print the output to the console (default) or to a file using the --outfile parameter.",
    "examples": [
      "This example evaluates all rules against somefile.js. Invoking code analyzer without specifying any rules causes all rules to be run.\n<%= config.bin %> <%= command.id %> --format xml --target \"somefile.js\"\nThis example evaluates all rules in the Design and Best Practices categories. When you specify multiple categories or rulesets, the results are combined with a logical OR.\n<%= config.bin %> <%= command.id %> --format xml --target \"somefile.js\" --\nThese examples evaluate rules against all .js files in the current directory, except for IgnoreMe.js. Unix example:\n<%= config.bin %> <%= command.id %> --target './**/*.js,!./**/IgnoreMe.js' ...\nWindows example:\n<%= config.bin %> <%= command.id %> --target \".\\**\\*.js,!.\\**\\IgnoreMe.js\" ...\nThis example scans the project contained in '/my-project' if the current working directory is another directory. Specify tsconfig.json if the current working directory does not contain the tsconfig.json that corresponds to the TypeScript files being scanned.\n<%= config.bin %> <%= command.id %> --target \"/my-project/**/*.ts\" --tsconfig \"/my-project/tsconfig.json\"\nThis example evaluates rules against somefile.js, including Jasmine in the environment variables. Uses --env to override the default ESLint environment variables to add frameworks.\n<%= config.bin %> <%= command.id %> --target \"somefile.js\" --env '{\"jasmine\": true}'\nThis example evaluates rules aginst somefile.js using eslint-lwc and pmd engines. Use --engine to include or exclude engines. Any engine listed will be run, regardless of its current 'disabled' attribute.\n<%= config.bin %> <%= command.id %> --target \"somefile.js\" --engine \"eslint-lwc,pmd\"\nThis example executes CPD engine against known file extensions in \"/some/dir\". CPD helps detect blocks of code duplication in selected languages. Use --engine to invoke engines that are not enabled by default.\n<%= config.bin %> <%= command.id %> --target \"/some/dir\" --engine cpd\nThis example executes rules defined in pmd_rule_ref.xml against the files in 'src'. To use PMD with your own rule reference file, use --pmdconfig. Note that rule filters are not applied.\n<%= config.bin %> <%= command.id %> --target \"src\" --pmdconfig \"pmd_rule_ref.xml\"\nThis example uses a custom config to scan the files in 'src'. To use ESLint with your own .eslintrc.json file, use --eslintconfig. Make sure that the directory you run the command from has all the NPM dependencies installed.\n<%= config.bin %> <%= command.id %> --target \"src\" --eslintconfig \"/home/my/setup/.eslintrc.json\"\nThis example uses --normalize-severity to output normalized severity and engine-specific severity across all engines. Normalized severity is: 1 (high), 2 (moderate), and 3 (low).\n<%= config.bin %> <%= command.id %> --target \"/some-project/\" --format csv --normalize-severity\nThis example uses --severity-threshold to throw a non-zero exit code when rule violations of normalized severity 2 or greater are found. If any violations with the specified severity (or greater) are found, the exit code equals the severity of the most severe violation.\n<%= config.bin %> <%= command.id %> --target \"/some-project/\" --severity-threshold 2\nThese examples explain that the paths specified for --projectdir must contain all files specified through --target cumulatively.\n<%= config.bin %> <%= command.id %> --target \"./myproject/main/default/classes/*.cls\" --projectdir \"./myproject/\"\n<%= config.bin %> <%= command.id %> --target \"./**/*.cls\" --projectdir \"./\"\n<%= config.bin %> <%= command.id %> --target \"./dir1/file1.cls,./dir2/file2.cls\" --projectdir \"./dir1/,./dir2/\"\nThis example fails because the set of files included in --target is larger than that contained in --projectdir.\n<%= config.bin %> <%= command.id %> --target \"./**/*.cls\" --projectdir \"./myproject/\""
    ],
    "invocation": "scanner run",
    "id": "scanner:run",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "scanner",
      "run.js"
    ],
    "pluginAlias": "@salesforce/sfdx-scanner",
    "pluginName": "@salesforce/sfdx-scanner",
    "pluginType": "user",
    "aliasPermutations": [],
    "permutations": [
      "scanner:run",
      "run:scanner"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@3.27.0",
    "SF_ENV": "SF_ENV",
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "name": "verbose",
        "summary": "Emit additional command output to stdout.",
        "allowNo": false,
        "type": "boolean"
      },
      "category": {
        "char": "c",
        "description": "Specify multiple values as a comma-separated list.",
        "name": "category",
        "summary": "One or more categories of rules to run.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "format": {
        "char": "f",
        "name": "format",
        "summary": "The output format for results written directly to the console.",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "csv",
          "html",
          "json",
          "junit",
          "sarif",
          "table",
          "xml"
        ],
        "type": "option"
      },
      "outfile": {
        "char": "o",
        "name": "outfile",
        "summary": "File to write output to.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "severity-threshold": {
        "char": "s",
        "description": "Values are 1 (high), 2 (moderate), and 3 (low). Exit code is the most severe violation. Using this flag also invokes the --normalize-severity flag.",
        "exclusive": [
          "json"
        ],
        "name": "severity-threshold",
        "summary": "An error will be thrown when a violation is found with a severity equal to or greater than the specified level.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "normalize-severity": {
        "description": "For the html option, the normalized severity is displayed instead of the engine severity.",
        "name": "normalize-severity",
        "summary": "Include normalized severity levels 1 (high), 2 (moderate), and 3 (low) with the results.",
        "allowNo": false,
        "type": "boolean"
      },
      "projectdir": {
        "char": "p",
        "description": "Specify multiple values as a comma-separated list. Each project directory must be a path, not a glob. If --projectdir isn’t specified, a default value is calculated. The default value is a directory that contains all the target files.",
        "name": "projectdir",
        "summary": "The relative or absolute root project directories used to set the context for Graph Engine's analysis.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "with-pilot": {
        "name": "with-pilot",
        "summary": "Allow pilot rules to execute.",
        "allowNo": false,
        "type": "boolean"
      },
      "target": {
        "char": "t",
        "description": "Use glob patterns or specify individual methods with #-syntax. Multiple values are specified as a comma-separated list. Default is \".\".",
        "name": "target",
        "summary": "Source code location.",
        "delimiter": ",",
        "hasDynamicHelp": false,
        "multiple": true,
        "type": "option"
      },
      "rule-thread-count": {
        "env": "SFGE_RULE_THREAD_COUNT",
        "name": "rule-thread-count",
        "summary": "Number of DFA rule-evaluation threads or how many entry points can be evaluated concurrently. Inherits its value from the SFGE_RULE_THREAD_COUNT environment variable, if set.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "rule-thread-timeout": {
        "env": "SFGE_RULE_THREAD_TIMEOUT",
        "name": "rule-thread-timeout",
        "summary": "Time limit, in milliseconds, for evaluating a single entry point. Inherits its value from the \"SFGE_RULE_THREAD_TIMEOUT\" environment variable, if set.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "rule-disable-warning-violation": {
        "description": "Examples of warning violations include those on StripInaccessible READ access, to get only high-severity violations.",
        "name": "rule-disable-warning-violation",
        "summary": "Disable warning violations from Salesforce Graph Engine. Inherits value from SFGE_RULE_DISABLE_WARNING_VIOLATION env-var, if set.",
        "allowNo": false,
        "type": "boolean"
      },
      "sfgejvmargs": {
        "description": "Separate multiple arguments by a space.",
        "env": "SFGE_JVM_ARGS",
        "name": "sfgejvmargs",
        "summary": "Java Virtual Machine (JVM) arguments to override system defaults while executing Salesforce Graph Engine.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "pathexplimit": {
        "description": "Set the value to -1 to remove any upper boundary. Its default value is derived from JVM heap space allocation.",
        "env": "SFGE_PATH_EXPANSION_LIMIT",
        "name": "pathexplimit",
        "summary": "Path expansion  upper boundary to limit the complexity of code that Graph Engine analyzes before failing test. Inherits it value from the \"SFGE_PATH_EXPANSION_LIMIT\", if set.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "enablecaching": {
        "description": "",
        "env": "SFGE_ENABLE_CACHING",
        "hidden": true,
        "name": "enablecaching",
        "summary": "",
        "allowNo": false,
        "type": "boolean"
      },
      "cachepath": {
        "description": "",
        "env": "SFGE_FILES_TO_ENTRIES_CACHE_LOCATION",
        "hidden": true,
        "name": "cachepath",
        "summary": "",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Scan codebase with all DFA rules by default.",
    "description": "Specify the format of output and print results directly or as contents of a file that you provide with --outfile flag.",
    "examples": [
      "These examples show how the paths specified for --projectdir must contain all files specified through --target cumulatively.\n<%= config.bin %> <%= command.id %> --target \"./**/*.cls\" --projectdir \"./\"\n<%= config.bin %> <%= command.id %> --target \"./dir1/file1.cls,./dir2/file2.cls\" --projectdir \"./dir1/,./dir2/\"\nThis example fails because the set of files included in --target is larger than that contained in --projectdir.\n<%= config.bin %> <%= command.id %> --target \"./**/*.cls\" --projectdir \"./myproject/\"\nGlobs must be wrapped in quotes, as in these Windows and Unix examples, which evaluate rules against all .cls files in the current directory and subdirectories except for IgnoreMe.cls. Unix example:\n<%= config.bin %> <%= command.id %> --target \"./**/*.cls,!./**/IgnoreMe.cls\" ...\nWindows example:\n<%= config.bin %> <%= command.id %> --target \".\\**\\*.cls,!.\\**\\IgnoreMe.cls\" ...\nYou can target individual methods within a file with a suffix hash (#) on the file's path, and with a semi-colon-delimited list of method names. This syntax is incompatible with globs and directories. This example evaluates rules against all methods named Method1 or Method2 in File1.cls, and all methods named Method3 in File2.cls.\n<%= config.bin %> <%= command.id %> --target \"./File1.cls#Method1;Method2,./File2.cls#Method3\" ...\nUse --normalize-severity to output a normalized severity across all engines, in addition to the engine-specific severity. Normalized severity is 1 (high), 2 (moderate), and 3 (low).\n<%= config.bin %> <%= command.id %> --target \"./some-project/\" --projectdir \"./some-project/\" --format csv --normalize-severity\nUse --severity-threshold to throw a non-zero exit code when rule violations of a specific normalized severity or greater are found. If there are any rule violations with a severity of 2 or 1, the exit code is equal to the severity of the most severe violation.\n<%= config.bin %> <%= command.id %> --target \"./some-project/\" --projectdir \"./some-project/\" --severity-threshold 2\nUse --rule-thread-count to allow more (or fewer) entrypoints to be evaluated concurrently.\n<%= config.bin %> <%= command.id %> --rule-thread-count 6 ...\nUse --rule-thread-timeout to increase or decrease the maximum runtime for a single entrypoint evaluation. This increases the timeout from the 15-minute default to 150 minutes.\n<%= config.bin %> <%= command.id %> --rule-thread-timeout 9000000 ...\nUse --sfgejvmargs to pass Java Virtual Machine args to override system defaults while executing Salesforce Graph Engine's rules. The example overrides the system's default heap space allocation to 8 GB and decreases chances of encountering OutOfMemory error.\n<%= config.bin %> <%= command.id %> --sfgejvmargs \"-Xmx8g\" ...\nUse --with-pilot to allow execution of pilot rules. This example allows pilot rules in the \"Performance\" category to execute.\n<%= config.bin %> <%= command.id %> --category 'Performance' --with-pilot ..."
    ],
    "invocation": "scanner run dfa",
    "id": "scanner:run:dfa",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "scanner",
      "run",
      "dfa.js"
    ],
    "pluginAlias": "@salesforce/sfdx-scanner",
    "pluginName": "@salesforce/sfdx-scanner",
    "pluginType": "user",
    "aliasPermutations": [],
    "permutations": [
      "scanner:run:dfa",
      "run:scanner:dfa",
      "run:dfa:scanner",
      "scanner:dfa:run",
      "dfa:scanner:run",
      "dfa:run:scanner"
    ]
  },
  {
    "aliases": [
      "generate:metadata:field"
    ],
    "args": {},
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate metadata source files for a new custom field on a specified object.",
    "description": "This command is interactive and must be run in a Salesforce DX project directory. You're required to specify the field's label with the \"--label\" flag. The command uses this label to provide intelligent suggestions for other field properties, such as its API name.\n\nYou can generate a custom field on either a standard object, such as Account, or a custom object. In both cases, the source files for the object must already exist in your local project before you run this command. If you create a relationship field, the source files for the parent object must also exist in your local directory.  Use the command \"sf metadata retrieve -m CustomObject:<object>\" to retrieve source files for both standard and custom objects from your org.  To create a custom object, run the \"sf generate metadata sobject\" command or use the Object Manager UI in your Salesforce org.",
    "examples": [
      "Create a field with the specified label; the command prompts you for the object:\n<%= config.bin %> <%= command.id %> --label \"My Field\"",
      "Specify the local path to the object's folder:\n<%= config.bin %> <%= command.id %> --label \"My Field\" --object force-app/main/default/objects/MyObject__c"
    ],
    "requiresProject": true,
    "deprecateAliases": true,
    "flags": {
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "label": {
        "char": "l",
        "name": "label",
        "required": true,
        "summary": "The field's label.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "object": {
        "char": "o",
        "description": "The object source files in your local project are grouped in a directoy with the same name as the object. Custom object names always end in \"__c\". An example of the object directory for the Account standard object is \"force-app/main/default/objects/Account\" An example custom object directory is \"force-app/main/default/objects/MyObject__c\"\n\nIf you don't specify this flag, the command prompts you to choose from your local objects.",
        "name": "object",
        "summary": "The directory that contains the object's source files.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "schema:generate:field",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "schema",
      "generate",
      "field.js"
    ],
    "pluginAlias": "@salesforce/plugin-sobject",
    "pluginName": "@salesforce/plugin-sobject",
    "pluginType": "core",
    "aliasPermutations": [
      "generate:metadata:field",
      "metadata:generate:field",
      "metadata:field:generate",
      "generate:field:metadata",
      "field:generate:metadata",
      "field:metadata:generate"
    ],
    "permutations": [
      "schema:generate:field",
      "generate:schema:field",
      "generate:field:schema",
      "schema:field:generate",
      "field:schema:generate",
      "field:generate:schema"
    ]
  },
  {
    "aliases": [
      "generate:metadata:platformevent"
    ],
    "args": {},
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate metadata source files for a new platform event.",
    "description": "This command is interactive and must be run in a Salesforce DX project directory. You're required to specify the event's label with the \"--label\" flag. The command uses this label to provide intelligent suggestions for other event properties, such as its API name.",
    "examples": [
      "Create a platform event with the specified label:\n<%= config.bin %> <%= command.id %> --label \"My Platform Event\""
    ],
    "requiresProject": true,
    "deprecateAliases": true,
    "flags": {
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "label": {
        "char": "l",
        "name": "label",
        "required": true,
        "summary": "The platform event's label.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "schema:generate:platformevent",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "schema",
      "generate",
      "platformevent.js"
    ],
    "pluginAlias": "@salesforce/plugin-sobject",
    "pluginName": "@salesforce/plugin-sobject",
    "pluginType": "core",
    "aliasPermutations": [
      "generate:metadata:platformevent",
      "metadata:generate:platformevent",
      "metadata:platformevent:generate",
      "generate:platformevent:metadata",
      "platformevent:generate:metadata",
      "platformevent:metadata:generate"
    ],
    "permutations": [
      "schema:generate:platformevent",
      "generate:schema:platformevent",
      "generate:platformevent:schema",
      "schema:platformevent:generate",
      "platformevent:schema:generate",
      "platformevent:generate:schema"
    ]
  },
  {
    "aliases": [
      "generate:metadata:sobject"
    ],
    "args": {},
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate metadata source files for a new custom object.",
    "description": "This command is interactive and must be run in a Salesforce DX project directory. You're required to specify the object's label with the \"--label\" flag. The command uses this label to provide intelligent suggestions for other object properties, such as its API name and plural label.\n\nAll Salesforce objects are required to have a Name field, so this command also prompts you for the label and type of the Name field. Run the \"sf metadata generate field\" command to create additional fields for the object.\n\nTo reduce the number of prompts, use the \"--use-default-features\" flag to automatically enable some features, such as reporting and search on the object.",
    "examples": [
      "Create a custom object with the specified label and be prompted for additional information:\n<%= config.bin %> <%= command.id %> --label \"My Object\"",
      "Create a custom object and enable optional features without prompting:\n<%= config.bin %> <%= command.id %> --label \"My Object\" --use-default-features"
    ],
    "requiresProject": true,
    "deprecateAliases": true,
    "flags": {
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "label": {
        "char": "l",
        "name": "label",
        "required": true,
        "summary": "The custom object's label.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-default-features": {
        "char": "f",
        "description": "Enables these features:\n\n- Search: Allows users to find the custom object's records when they search, including SOSL.\n- Feeds: Enables feed tracking.\n- Reports: Allows reporting of the data in the custom object records.\n- History: Enables object history tracking.\n- Activities: Allows users to associate tasks and scheduled calendar events related to the custom object records.\n- Bulk API: With Sharing and Streaming API, classifies the custom object as an Enterprise Application object.\n- Sharing: With Bulk API and Streaming API, classifies the custom object as an Enterprise Application object.\n- Streaming API: With Bulk API and Sharing, classifies the custom object as an Enterprise Application object.",
        "name": "use-default-features",
        "summary": "Enable all optional features without prompting.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "schema:generate:sobject",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "schema",
      "generate",
      "sobject.js"
    ],
    "pluginAlias": "@salesforce/plugin-sobject",
    "pluginName": "@salesforce/plugin-sobject",
    "pluginType": "core",
    "aliasPermutations": [
      "generate:metadata:sobject",
      "metadata:generate:sobject",
      "metadata:sobject:generate",
      "generate:sobject:metadata",
      "sobject:generate:metadata",
      "sobject:metadata:generate"
    ],
    "permutations": [
      "schema:generate:sobject",
      "generate:schema:sobject",
      "generate:sobject:schema",
      "schema:sobject:generate",
      "sobject:schema:generate",
      "sobject:generate:schema"
    ]
  },
  {
    "aliases": [
      "generate:metadata:tab"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate the metadata source files for a new custom tab on a custom object.",
    "description": "Custom tabs let you display custom object data or other web content in Salesforce. Custom tabs appear in Salesforce as an item in the app’s navigation bar and in the App Launcher.\n\nThis command must be run in a Salesforce DX project directory. You must pass all required information to it with the required flags. The source files for the custom object for which you're generating a tab don't need to exist in your local project.",
    "examples": [
      "Create a tab on the `MyObject__c` custom object:\n<%= config.bin %> <%= command.id %> --object `MyObject__c` --icon 54 --directory force-app/main/default/tabs"
    ],
    "requiresProject": true,
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "object": {
        "char": "o",
        "description": "The API name for a custom object always ends in `__c`, such as `MyObject__c`.",
        "name": "object",
        "required": true,
        "summary": "API name of the custom object you're generating a tab for.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "directory": {
        "char": "d",
        "name": "directory",
        "required": true,
        "summary": "Path to a \"tabs\" directory that will contain the source files for your new tab.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "icon": {
        "char": "i",
        "description": "See https://lightningdesignsystem.com/icons/#custom for the available icons.",
        "name": "icon",
        "required": true,
        "summary": "Number from 1 to 100 that specifies the color scheme and icon for the custom tab.",
        "default": 1,
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "schema:generate:tab",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "schema",
      "generate",
      "tab.js"
    ],
    "pluginAlias": "@salesforce/plugin-sobject",
    "pluginName": "@salesforce/plugin-sobject",
    "pluginType": "core",
    "aliasPermutations": [
      "generate:metadata:tab",
      "metadata:generate:tab",
      "metadata:tab:generate",
      "generate:tab:metadata",
      "tab:generate:metadata",
      "tab:metadata:generate"
    ],
    "permutations": [
      "schema:generate:tab",
      "generate:schema:tab",
      "generate:tab:schema",
      "schema:tab:generate",
      "tab:schema:generate",
      "tab:generate:schema"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "description": "Once you select a command, hit enter and it will show the help for that command.",
    "summary": "Search for a command.",
    "id": "search",
    "isESM": true,
    "relativePath": [
      "dist",
      "commands",
      "search.js"
    ],
    "flags": {},
    "pluginAlias": "@oclif/plugin-search",
    "pluginName": "@oclif/plugin-search",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "search"
    ]
  },
  {
    "_base": "@oclif/core@1.26.2",
    "aliases": [],
    "strict": true,
    "parse": true,
    "parserOptions": {},
    "_enableJsonFlag": false,
    "supportsUsername": true,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": false,
    "result": {},
    "varargs": false,
    "description": "Starts the execution of the migration job using the SFDX Data Move Utility Plugin (SFDMU).",
    "longDescription": "Starts execution of the migration job using the SFDX Data Move Utility Plugin (SFDMU).\nRefer https://help.sfdmu.com for the detailed help information.",
    "flagsConfig": {
      "sourceusername": {
        "kind": "string",
        "char": "s",
        "description": "Source org username/alias or 'csvfile' for csv load",
        "longDescription": "Provide a username or alias for the source organization, or use 'csvfile' if CSV files are being used as the data source.",
        "default": "",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "path": {
        "kind": "directory",
        "char": "p",
        "description": "[Optional] Absolute/relative path to the directory containing export.json file",
        "longDescription": "[Optional] The absolute or relative path to the directory that contains the working export.json file. If not provided, the command will search for the file in the current directory.",
        "default": "",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "verbose": {
        "description": "[Optional] Emits full command output to stdout",
        "longDescription": "[Optional] This flag enables the output of all messages to the standard output (stdout).",
        "type": "builtin"
      },
      "concise": {
        "description": "[Optional] Emits brief command output to stdout",
        "longDescription": "[Optional] This flag enables the output of only important messages to the standard output (stdout), which are necessary for understanding the command progress.",
        "type": "builtin"
      },
      "quiet": {
        "description": "[Optional] Suppresses stdout logging",
        "longDescription": "[Optional] This flag suppresses the output to the standard output (stdout). If file logging is enabled, the command will still log to the file.",
        "type": "builtin"
      },
      "silent": {
        "kind": "boolean",
        "description": "[Optional] Same as --quiet",
        "longDescription": "[Optional] The same as the --quiet flag.",
        "allowNo": false,
        "type": "boolean"
      },
      "version": {
        "kind": "boolean",
        "char": "v",
        "description": "[Optional] Prints the current version of the command",
        "longDescription": "[Optional] Prints the currently installed or linked version of the command.",
        "allowNo": false,
        "type": "boolean"
      },
      "apiversion": {
        "description": "[Optional] Overrides the api version set in the export.json definition",
        "longDescription": "[Optional] If specified, it overrides the apiVersion parameter of the export.json file. This value is used for all API requests made by this command.",
        "type": "builtin"
      },
      "filelog": {
        "kind": "integer",
        "char": "l",
        "description": "[Optional] Turns onn/off file logging",
        "longDescription": "[Optional] In addition to logging to the standard output (stdout), this flag controls logging to a file. Set this flag to 1 (or omit this flag) to enable file logging, or set it to 0 to disable file logging.",
        "default": 1,
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "noprompt": {
        "kind": "boolean",
        "char": "n",
        "description": "[Optional] Suppresses prompting the user for input or confirmation",
        "longDescription": "[Optional] Flag to suppress prompting the user for inputs or confirmation. The command will continue using the default options.",
        "allowNo": false,
        "type": "boolean"
      },
      "json": {
        "kind": "boolean",
        "description": "[Optional] Format the command output as json",
        "longDescription": "[Optional] [Optional] If set to true, the command will return the result as a formatted JSON instead of text to the standard output (stdout). The JSON will be emitted to both the log file and stdout after the command is fully completed. The JSON includes all logged messages during the command execution, along with extended information such as execution start time, end time, and elapsed time.",
        "default": false,
        "allowNo": false,
        "type": "boolean"
      },
      "nowarnings": {
        "kind": "boolean",
        "char": "w",
        "description": "[Optional] Suppresses all warning messages",
        "longDescription": "[Optional] Flag to suppress the output of all warning messages to the standard output (stdout).",
        "allowNo": false,
        "type": "boolean"
      },
      "canmodify": {
        "kind": "string",
        "char": "c",
        "description": "[Optional] Allows modification of target production environment without preliminary prompting the user about it.",
        "longDescription": "[Optional] When the target org is set to Production and this flag is set to the target domain name (e.g., prod-instance.my.salesforce.com), the command will not prompt the user for approval to make modifications. Otherwise, the user will be prompted to prevent accidental destruction of critical data.",
        "default": "",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "simulation": {
        "kind": "boolean",
        "char": "m",
        "description": "[Optional] Turn on simulation mode",
        "longDescription": "[Optional] The simulation mode allows you to check which records will be affected by the export.json configuration without actually updating, deleting, or inserting them.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "kind": "string",
        "description": "[Optional] File logging level for this command invocation",
        "longDescription": "[Optional] Specified the type of messages to be logged to file.\nLog file always contains all messages emitted during execution of the command.",
        "default": "trace",
        "options": [
          "info",
          "debug",
          "warn",
          "error",
          "fatal",
          "trace",
          "INFO",
          "DEBUG",
          "WARN",
          "ERROR",
          "FATAL",
          "TRACE"
        ],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "usesf": {
        "kind": "string",
        "description": "[Optional] Enables the usage of modern Salesforce CLI (sf-cli) commands instead of deprecated Salesforce DX CLI (sfdx-cli) commands.",
        "longDescription": "[Optional] If set to 'true', forces the Plugin to use the latest Salesforce CLI (sf-cli) commands instead of Salesforce DX CLI (sfdx-cli) commands for deprecated commands. For example, it will use sf org display instead of sfdx force:org:display. Setting this flag to 'false' will force the Plugin to use the deprecated Salesforce DX CLI (sfdx-cli) commands. If not set, the Plugin will use the latest Salesforce CLI (sf-cli) commands by default. This flag is useful when you have both Salesforce CLI (sf-cli) and Salesforce DX CLI (sfdx-cli) installed and you want to force the Plugin to use a specific CLI.",
        "default": "true",
        "options": [
          "true",
          "false",
          "TRUE",
          "FALSE"
        ],
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "logfullquery": {
        "kind": "boolean",
        "description": "[Optional] Enables logging of full SOQL queries",
        "longDescription": "[Optional] If provided, the command will log full SOQL queries instead of short versions.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "sfdmu:run",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "sfdmu",
      "run.js"
    ],
    "usage": "sfdmu:run [-s <string>] [-p <directory>] [--silent] [-v] [-l <integer>] [-n] [-w] [-c <string>] [-m] [--usesf <string>] [--logfullquery] [-u <string>] [--apiversion <string>] [--verbose] [--concise] [--quiet] [--json] [--loglevel <string>]",
    "pluginName": "sfdmu",
    "pluginType": "user",
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "[Optional] Format the command output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "[Optional] File logging level for this command invocation",
        "options": [
          "info",
          "debug",
          "warn",
          "error",
          "fatal",
          "trace",
          "INFO",
          "DEBUG",
          "WARN",
          "ERROR",
          "FATAL",
          "TRACE"
        ],
        "default": "trace"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "[Optional] Overrides the api version set in the export.json definition"
      },
      "sourceusername": {
        "name": "sourceusername",
        "type": "option",
        "char": "s",
        "description": "Source org username/alias or 'csvfile' for csv load",
        "default": ""
      },
      "path": {
        "name": "path",
        "type": "option",
        "char": "p",
        "description": "[Optional] Absolute/relative path to the directory containing export.json file",
        "default": ""
      },
      "verbose": {
        "name": "verbose",
        "type": "boolean",
        "description": "[Optional] Emits full command output to stdout",
        "allowNo": false
      },
      "concise": {
        "name": "concise",
        "type": "boolean",
        "description": "[Optional] Emits brief command output to stdout",
        "allowNo": false
      },
      "quiet": {
        "name": "quiet",
        "type": "boolean",
        "description": "[Optional] Suppresses stdout logging",
        "allowNo": false
      },
      "silent": {
        "name": "silent",
        "type": "boolean",
        "description": "[Optional] Same as --quiet",
        "allowNo": false
      },
      "version": {
        "name": "version",
        "type": "boolean",
        "char": "v",
        "description": "[Optional] Prints the current version of the command",
        "allowNo": false
      },
      "filelog": {
        "name": "filelog",
        "type": "option",
        "char": "l",
        "description": "[Optional] Turns onn/off file logging",
        "default": 1
      },
      "noprompt": {
        "name": "noprompt",
        "type": "boolean",
        "char": "n",
        "description": "[Optional] Suppresses prompting the user for input or confirmation",
        "allowNo": false
      },
      "nowarnings": {
        "name": "nowarnings",
        "type": "boolean",
        "char": "w",
        "description": "[Optional] Suppresses all warning messages",
        "allowNo": false
      },
      "canmodify": {
        "name": "canmodify",
        "type": "option",
        "char": "c",
        "description": "[Optional] Allows modification of target production environment without preliminary prompting the user about it.",
        "default": ""
      },
      "simulation": {
        "name": "simulation",
        "type": "boolean",
        "char": "m",
        "description": "[Optional] Turn on simulation mode",
        "allowNo": false
      },
      "usesf": {
        "name": "usesf",
        "type": "option",
        "description": "[Optional] Enables the usage of modern Salesforce CLI (sf-cli) commands instead of deprecated Salesforce DX CLI (sfdx-cli) commands.",
        "options": [
          "true",
          "false",
          "TRUE",
          "FALSE"
        ],
        "default": "true"
      },
      "logfullquery": {
        "name": "logfullquery",
        "type": "boolean",
        "description": "[Optional] Enables logging of full SOQL queries",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "sfdmu"
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.3",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate incremental package manifest and source content",
    "description": "Use two git commit reference to generate the package corresponding to what has changed in between",
    "examples": [
      "- Build incremental manifest from the previous commit\n\n<%= config.bin %> <%= command.id %> --from \"origin/development\" --output-dir incremental\n\n- Build incremental manifest and source from the development branch\n\n<%= config.bin %> <%= command.id %> --from \"origin/development\" --generate-delta --output-dir incremental"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "from": {
        "char": "f",
        "name": "from",
        "required": true,
        "summary": "commit sha from where the diff is done",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "to": {
        "char": "t",
        "name": "to",
        "summary": "commit sha to where the diff is done",
        "default": "HEAD",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "generate-delta": {
        "char": "d",
        "name": "generate-delta",
        "summary": "generate delta files in [--output-dir] folder",
        "allowNo": false,
        "type": "boolean"
      },
      "output-dir": {
        "aliases": [
          "output"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "output-dir",
        "summary": "source package specific output",
        "default": "./output",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "repo-dir": {
        "aliases": [
          "repo"
        ],
        "char": "r",
        "deprecateAliases": true,
        "name": "repo-dir",
        "summary": "git repository location",
        "default": "./",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "source-dir": {
        "aliases": [
          "source"
        ],
        "char": "s",
        "deprecateAliases": true,
        "name": "source-dir",
        "summary": "source folder focus location related to --repo-dir",
        "default": "./",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "ignore-file": {
        "aliases": [
          "ignore"
        ],
        "char": "i",
        "deprecateAliases": true,
        "name": "ignore-file",
        "summary": "file listing paths to explicitly ignore for any diff actions",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "ignore-destructive-file": {
        "aliases": [
          "ignore-destructive"
        ],
        "char": "D",
        "deprecateAliases": true,
        "name": "ignore-destructive-file",
        "summary": "file listing paths to explicitly ignore for any destructive actions",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "include-file": {
        "aliases": [
          "include"
        ],
        "char": "n",
        "deprecateAliases": true,
        "name": "include-file",
        "summary": "file listing paths to explicitly include for any diff actions",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "include-destructive-file": {
        "aliases": [
          "include-destructive"
        ],
        "char": "N",
        "deprecateAliases": true,
        "name": "include-destructive-file",
        "summary": "file listing paths to explicitly include for any destructive actions",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "ignore-whitespace": {
        "char": "W",
        "name": "ignore-whitespace",
        "summary": "ignore git diff whitespace (space, tab, eol) changes",
        "allowNo": false,
        "type": "boolean"
      },
      "api-version": {
        "char": "a",
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "summary": "salesforce metadata API version, default to sfdx-project.json \"sourceApiVersion\" attribute or latest version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "sgd:source:delta",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "sgd",
      "source",
      "delta.js"
    ],
    "pluginAlias": "sfdx-git-delta",
    "pluginName": "sfdx-git-delta",
    "pluginType": "user",
    "aliasPermutations": [],
    "permutations": [
      "sgd:source:delta",
      "source:sgd:delta",
      "source:delta:sgd",
      "sgd:delta:source",
      "delta:sgd:source",
      "delta:source:sgd"
    ]
  },
  {
    "aliases": [
      "force:schema:sobject:describe"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Display the metadata for a standard or custom object or a Tooling API object.",
    "description": "The metadata is displayed in JSON format. See this topic for a description of each property: https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_calls_describesobjects_describesobjectresult.htm.\n\nThis command displays metadata for Salesforce objects by default. Use the --use-tooling-api flag to view metadata for a Tooling API object.",
    "examples": [
      "Display the metadata of the \"Account\" standard object in your default org:\n<%= config.bin %> <%= command.id %> --sobject Account",
      "Display the metadata of the \"MyObject__c\" custom object in the org with alias \"my-scratch-org\":\n<%= config.bin %> <%= command.id %> --sobject MyObject__c --target-org my-scratch-org",
      "Display the metadata of the ApexCodeCoverage Tooling API object in your default org:\n<%= config.bin %> <%= command.id %> --sobject ApexCodeCoverage --use-tooling-api"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sobject": {
        "aliases": [
          "sobjecttype"
        ],
        "char": "s",
        "name": "sobject",
        "required": true,
        "summary": "API name of the object to describe.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "use-tooling-api": {
        "aliases": [
          "usetoolingapi"
        ],
        "char": "t",
        "name": "use-tooling-api",
        "summary": "Use Tooling API to display metadata for Tooling API objects.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "sobject:describe",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "sobject",
      "describe.js"
    ],
    "pluginAlias": "@salesforce/plugin-schema",
    "pluginName": "@salesforce/plugin-schema",
    "pluginType": "core",
    "aliasPermutations": [
      "force:schema:sobject:describe",
      "schema:force:sobject:describe",
      "schema:sobject:force:describe",
      "schema:sobject:describe:force",
      "force:sobject:schema:describe",
      "sobject:force:schema:describe",
      "sobject:schema:force:describe",
      "sobject:schema:describe:force",
      "force:sobject:describe:schema",
      "sobject:force:describe:schema",
      "sobject:describe:force:schema",
      "sobject:describe:schema:force",
      "force:schema:describe:sobject",
      "schema:force:describe:sobject",
      "schema:describe:force:sobject",
      "schema:describe:sobject:force",
      "force:describe:schema:sobject",
      "describe:force:schema:sobject",
      "describe:schema:force:sobject",
      "describe:schema:sobject:force",
      "force:describe:sobject:schema",
      "describe:force:sobject:schema",
      "describe:sobject:force:schema",
      "describe:sobject:schema:force"
    ],
    "permutations": [
      "sobject:describe",
      "describe:sobject"
    ]
  },
  {
    "aliases": [
      "force:schema:sobject:list"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": true,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "List all Salesforce objects of a specified category.",
    "description": "You can list the standard objects, custom objects, or all. The lists include only Salesforce objects, not Tooling API objects.",
    "examples": [
      "List all objects in your default org:\n<%= config.bin %> <%= command.id %> --sobject all",
      "List only custom objects in the org with alias \"my-scratch-org\":\n<%= config.bin %> <%= command.id %> --sobject custom --target-org my-scratch-org"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "target-org": {
        "aliases": [
          "targetusername",
          "u"
        ],
        "char": "o",
        "deprecateAliases": true,
        "name": "target-org",
        "noCacheDefault": true,
        "required": true,
        "summary": "Username or alias of the target org. Not required if the `target-org` configuration variable is already set.",
        "hasDynamicHelp": true,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "sobject": {
        "aliases": [
          "sobjecttypecategory",
          "c"
        ],
        "char": "s",
        "name": "sobject",
        "summary": "Category of objects to list.",
        "default": "ALL",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "sobject:list",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "sobject",
      "list.js"
    ],
    "pluginAlias": "@salesforce/plugin-schema",
    "pluginName": "@salesforce/plugin-schema",
    "pluginType": "core",
    "aliasPermutations": [
      "force:schema:sobject:list",
      "schema:force:sobject:list",
      "schema:sobject:force:list",
      "schema:sobject:list:force",
      "force:sobject:schema:list",
      "sobject:force:schema:list",
      "sobject:schema:force:list",
      "sobject:schema:list:force",
      "force:sobject:list:schema",
      "sobject:force:list:schema",
      "sobject:list:force:schema",
      "sobject:list:schema:force",
      "force:schema:list:sobject",
      "schema:force:list:sobject",
      "schema:list:force:sobject",
      "schema:list:sobject:force",
      "force:list:schema:sobject",
      "list:force:schema:sobject",
      "list:schema:force:sobject",
      "list:schema:sobject:force",
      "force:list:sobject:schema",
      "list:force:sobject:schema",
      "list:sobject:force:schema",
      "list:sobject:schema:force"
    ],
    "permutations": [
      "sobject:list",
      "list:sobject"
    ]
  },
  {
    "aliases": [
      "force:staticresource:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a static resource.",
    "description": "Generates the metadata resource file in the specified directory or the current working directory. Static resource files must be contained in a parent directory called \"staticresources\" in your package directory. Either run this command from an existing directory of this name, or use the --output-dir flag to create one or point to an existing one.",
    "examples": [
      "Generate the metadata file for a static resource called MyResource in the current directory:\n<%= config.bin %> <%= command.id %> --name MyResource",
      "Similar to previous example, but specifies a MIME type of application/json:\n<%= config.bin %> <%= command.id %> --name MyResource --type application/json",
      "Generate the resource file in the \"force-app/main/default/staticresources\" directory:\n<%= config.bin %> <%= command.id %> --name MyResource --output-dir force-app/main/default/staticresources"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "resourcename"
        ],
        "char": "n",
        "deprecateAliases": true,
        "description": "This name can contain only underscores and alphanumeric characters, and must be unique in your org. It must begin with a letter, not include spaces, not end with an underscore, and not contain two consecutive underscores.",
        "name": "name",
        "required": true,
        "summary": "Name of the generated static resource.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "type": {
        "aliases": [
          "contenttype"
        ],
        "deprecateAliases": true,
        "description": "Must be a valid MIME type such as application/json, application/javascript, application/zip, text/plain, text/css, etc.",
        "name": "type",
        "summary": "Content type (mime type) of the generated static resource.",
        "default": "application/zip",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir"
        ],
        "char": "d",
        "deprecateAliases": true,
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "name": "output-dir",
        "summary": "Directory for saving the created files.",
        "default": ".",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "static-resource:generate",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "static-resource",
      "generate.js"
    ],
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginName": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliasPermutations": [
      "force:staticresource:create",
      "staticresource:force:create",
      "staticresource:create:force",
      "force:create:staticresource",
      "create:force:staticresource",
      "create:staticresource:force"
    ],
    "permutations": [
      "static-resource:generate",
      "generate:static-resource"
    ]
  },
  {
    "_base": "@oclif/command@1.8.36",
    "aliases": [],
    "strict": true,
    "parse": true,
    "parserOptions": {},
    "supportsUsername": false,
    "requiresUsername": false,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": true,
    "result": {},
    "varargs": false,
    "description": "Generate apex class representing System.Label\nGenerate apex class representing System.Label. Due to limitations of metadata api (labels can't be fetched with jsforce) labels will be generated only for locally stored labels.\n\nHow to use?\n\n1. Generate typings file.\nUse\n\tsfdx apex-typings:labels -o pathToDIr\ncommand to generate typing. It is recommended to name file 'Label.cls'. Specified file must be in one of folders mentioned in sfdx-project.json file (otherwise apex language server wont see it)\n\n2. Add generated file to .forceignore  to avoid deployment problems\n\n3. Use new typings by referencing Label class(Without System namespace)!\nTrigger.new[0].addError(Label.nameOfLabelWithError);",
    "flagsConfig": {
      "out": {
        "kind": "string",
        "description": "File to which typings should be printed out. by default typings will be printed to standard output",
        "char": "o",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "id": "typings:apex:labels",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "typings",
      "apex",
      "labels.js"
    ],
    "usage": "typings:apex:labels [-o <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "sfdx-apex-typings-generator",
    "pluginType": "user",
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "out": {
        "name": "out",
        "type": "option",
        "char": "o",
        "description": "File to which typings should be printed out. by default typings will be printed to standard output"
      }
    },
    "args": [],
    "pluginAlias": "sfdx-apex-typings-generator"
  },
  {
    "_base": "@oclif/command@1.8.36",
    "aliases": [],
    "strict": true,
    "parse": true,
    "parserOptions": {},
    "supportsUsername": false,
    "requiresUsername": true,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": true,
    "result": {},
    "varargs": false,
    "description": "Generate typings for namespace",
    "examples": [
      "#Fetch all namespaces\nsfdx typings:apex:namespace -o force-app/main/default/classes/.typings",
      "#Fetch typings for namespace\nsfdx typings:apex:namespace -o classes/.typings -n sbqq",
      "#Fetch multiple namespaces\nsfdx typings:apex:namespace -o .typings, -n sbqq,blng"
    ],
    "flagsConfig": {
      "namespaces": {
        "kind": "string",
        "description": "Classes namespace to generate, for example sbqq",
        "char": "n",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "output-folder": {
        "kind": "string",
        "description": "Folder to which typings should be written",
        "char": "o",
        "required": true,
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "id": "typings:apex:namespace",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "typings",
      "apex",
      "namespace.js"
    ],
    "usage": "typings:apex:namespace -o <string> [-n <string>] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "sfdx-apex-typings-generator",
    "pluginType": "user",
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "namespaces": {
        "name": "namespaces",
        "type": "option",
        "char": "n",
        "description": "Classes namespace to generate, for example sbqq"
      },
      "output-folder": {
        "name": "output-folder",
        "type": "option",
        "char": "o",
        "description": "Folder to which typings should be written",
        "required": true
      }
    },
    "args": [],
    "pluginAlias": "sfdx-apex-typings-generator"
  },
  {
    "_base": "@oclif/command@1.8.36",
    "aliases": [],
    "strict": true,
    "parse": true,
    "parserOptions": {},
    "supportsUsername": false,
    "requiresUsername": true,
    "supportsDevhubUsername": false,
    "requiresDevhubUsername": false,
    "requiresProject": true,
    "result": {},
    "varargs": false,
    "flagsConfig": {
      "sobjects": {
        "kind": "string",
        "description": "Comma separated sObjects api names to generate typings for",
        "required": true,
        "char": "s",
        "input": [],
        "multiple": false,
        "type": "option"
      },
      "remove-existing": {
        "kind": "boolean",
        "description": "Remove existing typings",
        "char": "r",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "typings:apex:sobject",
    "isESM": false,
    "relativePath": [
      "lib",
      "commands",
      "typings",
      "apex",
      "sobject.js"
    ],
    "usage": "typings:apex:sobject -s <string> [-r] [-u <string>] [--apiversion <string>] [--json] [--loglevel trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL]",
    "pluginName": "sfdx-apex-typings-generator",
    "pluginType": "user",
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "format output as json",
        "allowNo": false
      },
      "loglevel": {
        "name": "loglevel",
        "type": "option",
        "description": "logging level for this command invocation",
        "required": false,
        "helpValue": "(trace|debug|info|warn|error|fatal|TRACE|DEBUG|INFO|WARN|ERROR|FATAL)",
        "options": [
          "trace",
          "debug",
          "info",
          "warn",
          "error",
          "fatal",
          "TRACE",
          "DEBUG",
          "INFO",
          "WARN",
          "ERROR",
          "FATAL"
        ],
        "default": "warn"
      },
      "targetusername": {
        "name": "targetusername",
        "type": "option",
        "char": "u",
        "description": "username or alias for the target org; overrides default target org"
      },
      "apiversion": {
        "name": "apiversion",
        "type": "option",
        "description": "override the api version used for api requests made by this command"
      },
      "sobjects": {
        "name": "sobjects",
        "type": "option",
        "char": "s",
        "description": "Comma separated sObjects api names to generate typings for",
        "required": true
      },
      "remove-existing": {
        "name": "remove-existing",
        "type": "boolean",
        "char": "r",
        "description": "Remove existing typings",
        "allowNo": false
      }
    },
    "args": [],
    "pluginAlias": "sfdx-apex-typings-generator"
  },
  {
    "aliases": [],
    "args": {
      "channel": {
        "name": "channel"
      }
    },
    "enableJsonFlag": false,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "description": "update the sf CLI",
    "examples": [
      {
        "command": "<%= config.bin %> <%= command.id %> stable",
        "description": "Update to the stable channel:"
      },
      {
        "command": "<%= config.bin %> <%= command.id %> --version 1.0.0",
        "description": "Update to a specific version:"
      },
      {
        "command": "<%= config.bin %> <%= command.id %> --interactive",
        "description": "Interactively select version:"
      },
      {
        "command": "<%= config.bin %> <%= command.id %> --available",
        "description": "See available versions:"
      }
    ],
    "flags": {
      "autoupdate": {
        "hidden": true,
        "name": "autoupdate",
        "allowNo": false,
        "type": "boolean"
      },
      "available": {
        "char": "a",
        "description": "See available versions.",
        "exclusive": [
          "version",
          "interactive"
        ],
        "name": "available",
        "allowNo": false,
        "type": "boolean"
      },
      "force": {
        "description": "Force a re-download of the requested version.",
        "exclusive": [
          "interactive",
          "available"
        ],
        "name": "force",
        "allowNo": false,
        "type": "boolean"
      },
      "interactive": {
        "char": "i",
        "description": "Interactively select version to install. This is ignored if a channel is provided.",
        "exclusive": [
          "version"
        ],
        "name": "interactive",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "char": "b",
        "dependsOn": [
          "available"
        ],
        "description": "Show more details about the available versions.",
        "name": "verbose",
        "allowNo": false,
        "type": "boolean"
      },
      "version": {
        "char": "v",
        "description": "Install a specific version.",
        "exclusive": [
          "interactive"
        ],
        "name": "version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "update",
    "isESM": true,
    "relativePath": [
      "dist",
      "commands",
      "update.js"
    ],
    "pluginAlias": "@oclif/plugin-update",
    "pluginName": "@oclif/plugin-update",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "update"
    ]
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "verbose": {
        "description": "Additionally shows the architecture, node version, operating system, and versions of plugins that the CLI is using.",
        "name": "verbose",
        "summary": "Show additional information about the CLI.",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "id": "version",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "version.js"
    ],
    "pluginAlias": "@oclif/plugin-version",
    "pluginName": "@oclif/plugin-version",
    "pluginType": "core"
  },
  {
    "aliases": [
      "force:visualforce:component:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a Visualforce Component.",
    "description": "The command generates the .Component file and associated metadata file in the specified directory or the current working directory by default.",
    "examples": [
      "Generate the metadata files for a Visualforce component in the current directory:\n<%= config.bin %> <%= command.id %> --name mycomponent --label mylabel",
      "Similar to previous example, but generate the files in the directory \"force-app/main/default/components\":\n<%= config.bin %> <%= command.id %> --name mycomponent --label mylabel --output-dir components"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "componentname"
        ],
        "char": "n",
        "deprecateAliases": true,
        "description": "The name can be up to 40 characters and must start with a letter.",
        "name": "name",
        "required": true,
        "summary": "Name of the generated Visualforce Component.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "template": {
        "char": "t",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "name": "template",
        "summary": "Template to use for file creation.",
        "default": "DefaultVFComponent",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "DefaultVFComponent"
        ],
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir"
        ],
        "char": "d",
        "deprecateAliases": true,
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "name": "output-dir",
        "summary": "Directory for saving the created files.",
        "default": ".",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "label": {
        "char": "l",
        "name": "label",
        "required": true,
        "summary": "Visualforce Component label.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "visualforce:generate:component",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "visualforce",
      "generate",
      "component.js"
    ],
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginName": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliasPermutations": [
      "force:visualforce:component:create",
      "visualforce:force:component:create",
      "visualforce:component:force:create",
      "visualforce:component:create:force",
      "force:component:visualforce:create",
      "component:force:visualforce:create",
      "component:visualforce:force:create",
      "component:visualforce:create:force",
      "force:component:create:visualforce",
      "component:force:create:visualforce",
      "component:create:force:visualforce",
      "component:create:visualforce:force",
      "force:visualforce:create:component",
      "visualforce:force:create:component",
      "visualforce:create:force:component",
      "visualforce:create:component:force",
      "force:create:visualforce:component",
      "create:force:visualforce:component",
      "create:visualforce:force:component",
      "create:visualforce:component:force",
      "force:create:component:visualforce",
      "create:force:component:visualforce",
      "create:component:force:visualforce",
      "create:component:visualforce:force"
    ],
    "permutations": [
      "visualforce:generate:component",
      "generate:visualforce:component",
      "generate:component:visualforce",
      "visualforce:component:generate",
      "component:visualforce:generate",
      "component:generate:visualforce"
    ]
  },
  {
    "aliases": [
      "force:visualforce:page:create"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Generate a Visualforce Page.",
    "description": "The command generates the .Page file and associated metadata file in the specified directory or the current working directory by default.",
    "examples": [
      "Generate the metadata files for a Visualforce page in the current directory:\n<%= config.bin %> <%= command.id %> --name mypage --label mylabel",
      "Similar to previous example, but generate the files in the directory \"force-app/main/default/pages\":\n<%= config.bin %> <%= command.id %> --name mypage --label mylabel --output-dir pages"
    ],
    "deprecateAliases": true,
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "name": {
        "aliases": [
          "pagename"
        ],
        "char": "n",
        "deprecateAliases": true,
        "description": "The name can be up to 40 characters and must start with a letter.",
        "name": "name",
        "required": true,
        "summary": "Name of the generated Visualforce Page.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "template": {
        "char": "t",
        "description": "Supplied parameter values or default values are filled into a copy of the template.",
        "hidden": true,
        "name": "template",
        "summary": "Template to use for file creation.",
        "default": "DefaultVFPage",
        "hasDynamicHelp": false,
        "multiple": false,
        "options": [
          "DefaultVFPage"
        ],
        "type": "option"
      },
      "output-dir": {
        "aliases": [
          "outputdir"
        ],
        "char": "d",
        "deprecateAliases": true,
        "description": "The location can be an absolute path or relative to the current working directory. The default is the current directory.",
        "name": "output-dir",
        "summary": "Directory for saving the created files.",
        "default": ".",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "api-version": {
        "aliases": [
          "apiversion"
        ],
        "deprecateAliases": true,
        "description": "Override the api version used for api requests made by this command",
        "name": "api-version",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "label": {
        "char": "l",
        "name": "label",
        "required": true,
        "summary": "Visualforce Page label.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "visualforce:generate:page",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "visualforce",
      "generate",
      "page.js"
    ],
    "pluginAlias": "@salesforce/plugin-templates",
    "pluginName": "@salesforce/plugin-templates",
    "pluginType": "core",
    "aliasPermutations": [
      "force:visualforce:page:create",
      "visualforce:force:page:create",
      "visualforce:page:force:create",
      "visualforce:page:create:force",
      "force:page:visualforce:create",
      "page:force:visualforce:create",
      "page:visualforce:force:create",
      "page:visualforce:create:force",
      "force:page:create:visualforce",
      "page:force:create:visualforce",
      "page:create:force:visualforce",
      "page:create:visualforce:force",
      "force:visualforce:create:page",
      "visualforce:force:create:page",
      "visualforce:create:force:page",
      "visualforce:create:page:force",
      "force:create:visualforce:page",
      "create:force:visualforce:page",
      "create:visualforce:force:page",
      "create:visualforce:page:force",
      "force:create:page:visualforce",
      "create:force:page:visualforce",
      "create:page:force:visualforce",
      "create:page:visualforce:force"
    ],
    "permutations": [
      "visualforce:generate:page",
      "generate:visualforce:page",
      "generate:page:visualforce",
      "visualforce:page:generate",
      "page:visualforce:generate",
      "page:generate:visualforce"
    ]
  },
  {
    "aliases": [
      "whatsnew"
    ],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": true,
    "_base": "@oclif/core@4.2.4",
    "baseFlags": {
      "flags-dir": {
        "summary": "Import flag values from a directory.",
        "helpGroup": "GLOBAL",
        "input": [],
        "multiple": false,
        "type": "option"
      }
    },
    "summary": "Display Salesforce CLI release notes on the command line.",
    "description": "By default, this command displays release notes for the currently installed CLI version on your computer. Use the --version flag to view release notes for a different release.",
    "examples": [
      "Display release notes for the currently installed CLI version:\n<%= config.bin %> <%= command.id %>",
      "Display release notes for CLI version 7.120.0:\n<%= config.bin %> <%= command.id %> --version 7.120.0",
      "Display release notes for the CLI version that corresponds to a tag (stable, stable-rc, latest, latest-rc, rc):\n<%= config.bin %> <%= command.id %> --version latest"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      },
      "flags-dir": {
        "helpGroup": "GLOBAL",
        "name": "flags-dir",
        "summary": "Import flag values from a directory.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "version": {
        "char": "v",
        "name": "version",
        "summary": "CLI version or tag for which to display release notes.",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      },
      "hook": {
        "hidden": true,
        "name": "hook",
        "summary": "This hidden parameter is used in post install or update hooks.",
        "allowNo": false,
        "type": "boolean"
      },
      "loglevel": {
        "deprecated": {
          "message": "The loglevel flag is no longer in use on this command. You may use it without error, but it will be ignored.\nSet the log level using the `SFDX_LOG_LEVEL` environment variable."
        },
        "hidden": true,
        "name": "loglevel",
        "hasDynamicHelp": false,
        "multiple": false,
        "type": "option"
      }
    },
    "id": "whatsnew",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "info",
      "releasenotes",
      "display.js"
    ],
    "pluginAlias": "@salesforce/plugin-info",
    "pluginName": "@salesforce/plugin-info",
    "pluginType": "core",
    "aliasPermutations": [
      "whatsnew"
    ],
    "permutations": [
      "info:releasenotes:display",
      "releasenotes:info:display",
      "releasenotes:display:info",
      "info:display:releasenotes",
      "display:info:releasenotes",
      "display:releasenotes:info"
    ],
    "hidden": false
  },
  {
    "aliases": [],
    "args": {},
    "enableJsonFlag": true,
    "hasDynamicHelp": false,
    "hiddenAliases": [],
    "strict": false,
    "_base": "@oclif/core@4.2.4",
    "description": "Show which plugin a command is in.",
    "examples": [
      {
        "command": "<%= config.bin %> <%= command.id %> help",
        "description": "See which plugin the `help` command is in:"
      },
      {
        "command": "<%= config.bin %> <%= command.id %> foo:bar:baz",
        "description": "Use colon separators."
      },
      {
        "command": "<%= config.bin %> <%= command.id %> foo bar baz",
        "description": "Use spaces as separators."
      },
      {
        "command": "<%= config.bin %> <%= command.id %> \"foo bar baz\"",
        "description": "Wrap command in quotes to use spaces as separators."
      }
    ],
    "id": "which",
    "isESM": true,
    "relativePath": [
      "lib",
      "commands",
      "which.js"
    ],
    "flags": {
      "json": {
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "name": "json",
        "allowNo": false,
        "type": "boolean"
      }
    },
    "pluginAlias": "@oclif/plugin-which",
    "pluginName": "@oclif/plugin-which",
    "pluginType": "core",
    "aliasPermutations": [],
    "permutations": [
      "which"
    ]
  },
  {
    "id": "whoami:functions",
    "summary": "Show information on your Salesforce Functions login.",
    "description": "Returns your email and ID. Use '--show-token' to show your Salesforce Functions token.",
    "strict": true,
    "pluginName": "@salesforce/plugin-functions",
    "pluginAlias": "@salesforce/cli",
    "pluginType": "jit",
    "aliases": [],
    "examples": [
      "Get account information:\n<%= config.bin %> <%= command.id %>",
      "Show token and output result as JSON:\n<%= config.bin %> <%= command.id %> --show-token --json"
    ],
    "flags": {
      "json": {
        "name": "json",
        "type": "boolean",
        "description": "Format output as json.",
        "helpGroup": "GLOBAL",
        "allowNo": false
      },
      "show-token": {
        "name": "show-token",
        "type": "boolean",
        "description": "Show the stored functions token.",
        "hidden": true,
        "allowNo": false
      }
    },
    "args": {}
  }
]
